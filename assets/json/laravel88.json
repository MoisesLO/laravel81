[
    {
        "title": "Instalación",
        "subtitle": "EMPEZANDO",
        "contenido": "<div>\n    <h1>Instalación</h1>\n    <h2 id=\"meet-laravel\"><span class=\"link\">Conoce a Laravel</span></h2>\n    <p>Laravel es un marco de aplicación web con una sintaxis elegante y expresiva. Un marco web proporciona una estructura y un punto de partida para crear su aplicación, lo que le permite concentrarse en crear algo sorprendente mientras nos preocupamos por los detalles.</p>\n    <p>Laravel se esfuerza por proporcionar una experiencia de desarrollador increíble al tiempo que proporciona funciones poderosas como la inyección de dependencias exhaustiva, una capa de abstracción de base de datos expresiva, colas y trabajos programados, pruebas de integración y unidad, y más.</p>\n    <p>Si eres nuevo en PHP o frameworks web o tienes años de experiencia, Laravel es un framework que puede crecer contigo. Le ayudaremos a dar sus primeros pasos como desarrollador web o le daremos un impulso a medida que lleva su experiencia al siguiente nivel. No podemos esperar a ver lo que construyes.</p>\n    <p></p>\n    <h3 id=\"why-laravel\"><span class=\"link\">¿Por qué Laravel?</span></h3>\n    <p>Hay una variedad de herramientas y marcos disponibles para usted cuando crea una aplicación web. Sin embargo, creemos que Laravel es la mejor opción para crear aplicaciones web modernas y completas.</p>\n    <h4>Un marco progresivo</h4>\n    <p>Nos gusta llamar a Laravel un marco \"progresivo\". Con eso, queremos decir que Laravel crece contigo. Si está dando sus primeros pasos en el desarrollo web, la vasta biblioteca de documentación, guías y <span class=\"link\">tutoriales en video de</span> Laravel lo ayudará a aprender a manejar sin sentirse abrumado.</p>\n    <p>Si es un desarrollador senior, Laravel le brinda herramientas sólidas para <span class=\"link\">la inyección de dependencias</span> , <span class=\"link\">pruebas unitarias</span> , <span class=\"link\">colas</span> , <span class=\"link\">eventos en tiempo real</span> y más. Laravel está optimizado para crear aplicaciones web profesionales y está listo para manejar cargas de trabajo empresariales.</p>\n    <h4>Un marco escalable</h4>\n    <p>Laravel es increíblemente escalable. Gracias a la naturaleza amigable con el escalado de PHP y al soporte integrado de Laravel para sistemas de caché distribuidos y rápidos como Redis, el escalado horizontal con Laravel es muy sencillo. De hecho, las aplicaciones de Laravel se han escalado fácilmente para manejar cientos de millones de solicitudes por mes.</p>\n    <p>¿Necesitas un escalado extremo? Plataformas como <span class=\"link\">Laravel Vapor le</span> permiten ejecutar su aplicación Laravel a una escala casi ilimitada en la última tecnología sin servidor de AWS.</p>\n    <h4>Un marco comunitario</h4>\n    <p>Laravel combina los mejores paquetes del ecosistema PHP para ofrecer el marco más robusto y amigable para el desarrollador disponible. Además, miles de desarrolladores talentosos de todo el mundo han <span class=\"link\">contribuido al marco</span> . Quién sabe, tal vez incluso te conviertas en colaborador de Laravel.</p>\n    <p></p>\n    <h2 id=\"your-first-laravel-project\"><span class=\"link\">Tu primer proyecto Laravel</span></h2>\n    <p>Queremos que sea lo más fácil posible comenzar con Laravel. Hay una variedad de opciones para desarrollar y ejecutar un proyecto de Laravel en su propia computadora. Si bien es posible que desee explorar estas opciones más adelante, Laravel proporciona <span class=\"link\">Sail</span> , una solución incorporada para ejecutar su proyecto de Laravel usando <span class=\"link\">Docker</span> .</p>\n    <p>Docker es una herramienta para ejecutar aplicaciones y servicios en \"contenedores\" pequeños y livianos que no interfieren con el software o la configuración instalados en su computadora local. Esto significa que no tiene que preocuparse por configurar herramientas de desarrollo complicadas como servidores web y bases de datos en su computadora personal. Para comenzar, solo necesita instalar <span class=\"link\">Docker Desktop</span> .</p>\n    <p>Laravel Sail es una interfaz de línea de comandos liviana para interactuar con la configuración predeterminada de Docker de Laravel. Sail proporciona un excelente punto de partida para crear una aplicación Laravel usando PHP, MySQL y Redis sin requerir experiencia previa en Docker.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>¿Ya es un experto en Docker? ¡No te preocupes! Todo lo relacionado con Sail se puede personalizar utilizando el <code>docker-compose.yml</code>archivo incluido con Laravel.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"getting-started-on-macos\"><span class=\"link\">Introducción a macOS</span></h3>\n    <p>Si está desarrollando en una Mac y <span class=\"link\">Docker Desktop</span> ya está instalado, puede usar un comando de terminal simple para crear un nuevo proyecto de Laravel. Por ejemplo, para crear una nueva aplicación Laravel en un directorio llamado \"ejemplo-aplicación\", puede ejecutar el siguiente comando en su terminal:</p>\n    <pre class=\" language-nothing\"><code class=\" language-nothing\">curl -s \"https://laravel.build/example-app\" | bash</code></pre>\n    <p>Por supuesto, puede cambiar \"ejemplo-aplicación\" en esta URL a lo que quiera. El directorio de la aplicación Laravel se creará dentro del directorio desde el que ejecuta el comando.</p>\n    <p>Una vez creado el proyecto, puede navegar hasta el directorio de la aplicación e iniciar Laravel Sail. Laravel Sail proporciona una interfaz de línea de comandos simple para interactuar con la configuración predeterminada de Docker de Laravel:</p>\n    <pre class=\" language-nothing\"><code class=\" language-nothing\">cd example-app\n\n./vendor/bin/sail up</code></pre>\n    <p>La primera vez que ejecute el <code>up</code>comando Sail, los contenedores de aplicaciones de Sail se construirán en su máquina. Esto puede tardar varios minutos. <strong>No se preocupe, los intentos posteriores de iniciar Sail serán mucho más rápidos.</strong></p>\n    <p>Una vez que se hayan iniciado los contenedores Docker de la aplicación, puede acceder a la aplicación en su navegador web en: <span class=\"link\">http: // localhost</span> .</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Para seguir conociendo más sobre Laravel Sail, revisa su <span class=\"link\">documentación completa</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"getting-started-on-windows\"><span class=\"link\">Introducción a Windows</span></h3>\n    <p>Antes de crear una nueva aplicación Laravel en su máquina Windows, asegúrese de instalar <span class=\"link\">Docker Desktop</span> . A continuación, debe asegurarse de que el Subsistema de Windows para Linux 2 (WSL2) esté instalado y habilitado. WSL le permite ejecutar ejecutables binarios de Linux de forma nativa en Windows 10. Puede encontrar información sobre cómo instalar y habilitar WSL2 en la <span class=\"link\">documentación del entorno para desarrolladores</span> de Microsoft .</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Después de instalar y habilitar WSL2, debe asegurarse de que Docker Desktop esté <span class=\"link\">configurado para usar el backend de WSL2</span> .</p></p></div>\n    </blockquote>\n    <p>A continuación, está listo para crear su primer proyecto de Laravel. Inicie <span class=\"link\">Windows Terminal</span> y comience una nueva sesión de terminal para su sistema operativo WSL2 Linux. A continuación, puede usar un comando de terminal simple para crear un nuevo proyecto de Laravel. Por ejemplo, para crear una nueva aplicación Laravel en un directorio llamado \"ejemplo-aplicación\", puede ejecutar el siguiente comando en su terminal:</p>\n    <pre class=\" language-nothing\"><code class=\" language-nothing\">curl -s https://laravel.build/example-app | bash</code></pre>\n    <p>Por supuesto, puede cambiar \"ejemplo-aplicación\" en esta URL a lo que quiera. El directorio de la aplicación Laravel se creará dentro del directorio desde el que ejecuta el comando.</p>\n    <p>Una vez creado el proyecto, puede navegar hasta el directorio de la aplicación e iniciar Laravel Sail. Laravel Sail proporciona una interfaz de línea de comandos simple para interactuar con la configuración predeterminada de Docker de Laravel:</p>\n    <pre class=\" language-nothing\"><code class=\" language-nothing\">cd example-app\n\n./vendor/bin/sail up</code></pre>\n    <p>La primera vez que ejecute el <code>up</code>comando Sail, los contenedores de aplicaciones de Sail se construirán en su máquina. Esto puede tardar varios minutos. <strong>No se preocupe, los intentos posteriores de iniciar Sail serán mucho más rápidos.</strong></p>\n    <p>Una vez que se hayan iniciado los contenedores Docker de la aplicación, puede acceder a la aplicación en su navegador web en: <span class=\"link\">http: // localhost</span> .</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Para seguir conociendo más sobre Laravel Sail, revisa su <span class=\"link\">documentación completa</span> .</p></p></div>\n    </blockquote>\n    <h4>Desarrollo dentro de WSL2</h4>\n    <p>Por supuesto, deberá poder modificar los archivos de la aplicación Laravel que se crearon dentro de su instalación de WSL2. Para lograr esto, recomendamos usar el editor de <span class=\"link\">código Visual Studio de</span> Microsoft y su extensión propia para el <span class=\"link\">desarrollo remoto</span> .</p>\n    <p>Una vez instaladas estas herramientas, puedes abrir cualquier proyecto de Laravel ejecutando el <code>code .</code>comando desde el directorio raíz de tu aplicación usando la Terminal de Windows.</p>\n    <p></p>\n    <h3 id=\"getting-started-on-linux\"><span class=\"link\">Introducción a Linux</span></h3>\n    <p>Si está desarrollando en Linux y <span class=\"link\">Docker</span> ya está instalado, puede usar un comando de terminal simple para crear un nuevo proyecto de Laravel. Por ejemplo, para crear una nueva aplicación Laravel en un directorio llamado \"ejemplo-aplicación\", puede ejecutar el siguiente comando en su terminal:</p>\n    <pre class=\" language-nothing\"><code class=\" language-nothing\">curl -s https://laravel.build/example-app | bash</code></pre>\n    <p>Por supuesto, puede cambiar \"ejemplo-aplicación\" en esta URL a lo que quiera. El directorio de la aplicación Laravel se creará dentro del directorio desde el que ejecuta el comando.</p>\n    <p>Una vez creado el proyecto, puede navegar hasta el directorio de la aplicación e iniciar Laravel Sail. Laravel Sail proporciona una interfaz de línea de comandos simple para interactuar con la configuración predeterminada de Docker de Laravel:</p>\n    <pre class=\" language-nothing\"><code class=\" language-nothing\">cd example-app\n\n./vendor/bin/sail up</code></pre>\n    <p>La primera vez que ejecute el <code>up</code>comando Sail, los contenedores de aplicaciones de Sail se construirán en su máquina. Esto puede tardar varios minutos. <strong>No se preocupe, los intentos posteriores de iniciar Sail serán mucho más rápidos.</strong></p>\n    <p>Una vez que se hayan iniciado los contenedores Docker de la aplicación, puede acceder a la aplicación en su navegador web en: <span class=\"link\">http: // localhost</span> .</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Para seguir conociendo más sobre Laravel Sail, revisa su <span class=\"link\">documentación completa</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"choosing-your-sail-services\"><span class=\"link\">Elección de sus servicios de vela</span></h3>\n    <p>Al crear una nueva aplicación Laravel a través de Sail, puede usar la <code>with</code>variable de cadena de consulta para elegir qué servicios deben configurarse en el <code>docker-compose.yml</code>archivo de su nueva aplicación . Los servicios disponibles incluyen <code>mysql</code>, <code>pgsql</code>, <code>mariadb</code>, <code>redis</code>, <code>memcached</code>, <code>meilisearch</code>, <code>minio</code>, <code>selenium</code>, y <code>mailhog</code>:</p>\n    <pre class=\" language-nothing\"><code class=\" language-nothing\">curl -s \"https://laravel.build/example-app?with=mysql,redis\" | bash</code></pre>\n    <p>Si no se especifica qué servicios que le gustaría configurado, por defecto una pila de <code>mysql</code>, <code>redis</code>, <code>meilisearch</code>, <code>mailhog</code>, y <code>selenium</code>se configurará.</p>\n    <p></p>\n    <h3 id=\"installation-via-composer\"><span class=\"link\">Instalación a través de Composer</span></h3>\n    <p>Si su computadora ya tiene PHP y Composer instalados, puede crear un nuevo proyecto de Laravel usando Composer directamente. Una vez creada la aplicación, puede iniciar el servidor de desarrollo local de Laravel usando el <code>serve</code>comando de Artisan CLI :</p>\n    <pre class=\" language-php\"><code class=\" language-php\">composer create<span class=\"token operator\">-</span>project laravel<span class=\"token operator\">/</span>laravel example<span class=\"token operator\">-</span>app\n\ncd example<span class=\"token operator\">-</span>app\n\nphp artisan serve</code></pre>\n    <p></p>\n    <h4 id=\"the-laravel-installer\"><span class=\"link\">El instalador de Laravel</span></h4>\n    <p>O puede instalar el instalador de Laravel como una dependencia global de Composer:</p>\n    <pre class=\" language-nothing\"><code class=\" language-nothing\">composer global require laravel/installer\n\nlaravel new example-app\n\ncd example-app\n\nphp artisan serve</code></pre>\n    <p>Asegúrese de colocar el directorio bin del proveedor de todo el sistema de Composer en su <code>$PATH</code>para que <code>laravel</code>su sistema pueda localizar el ejecutable. Este directorio existe en diferentes ubicaciones según su sistema operativo; sin embargo, algunas ubicaciones comunes incluyen:</p>\n    <div class=\"content-list\">\n        <ul>\n            <li>Mac OS: <code>$HOME/.composer/vendor/bin</code></li>\n            <li>Ventanas: <code>%USERPROFILE%\\AppData\\Roaming\\Composer\\vendor\\bin</code></li>\n            <li>Distribuciones GNU / Linux: <code>$HOME/.config/composer/vendor/bin</code>o<code>$HOME/.composer/vendor/bin</code></li>\n        </ul>\n    </div>\n    <p>Para mayor comodidad, el instalador de Laravel también puede crear un repositorio de Git para su nuevo proyecto. Para indicar que desea que se cree un repositorio de Git, pase la <code>--git</code>marca al crear un nuevo proyecto:</p>\n    <pre class=\" language-bash\"><code class=\" language-bash\">laravel new example-app --git</code></pre>\n    <p>Este comando inicializará un nuevo repositorio de Git para su proyecto y automáticamente confirmará el esqueleto base de Laravel. La <code>git</code>bandera asume que ha instalado y configurado correctamente Git. También puede usar la <code>--branch</code>bandera para establecer el nombre de la rama inicial:</p>\n    <pre class=\" language-bash\"><code class=\" language-bash\">laravel new example-app --git --branch<span class=\"token operator\">=</span><span class=\"token string\">\"main\"</span></code></pre>\n    <p>En lugar de usar la <code>--git</code>bandera, también puede usar la <code>--github</code>bandera para crear un repositorio de Git y también crear un repositorio privado correspondiente en GitHub:</p>\n    <pre class=\" language-bash\"><code class=\" language-bash\">laravel new example-app --github</code></pre>\n    <p>El repositorio creado estará disponible en <code>https://github.com/&lt;your-account&gt;/example-app</code>. La <code>github</code>bandera asume que ha instalado correctamente la <span class=\"link\">CLI de GitHub</span> y está autenticado con GitHub. Además, debería haberlo <code>git</code>instalado y configurado correctamente. Si es necesario, puede pasar indicadores adicionales compatibles con la CLI de GitHub:</p>\n    <pre class=\" language-bash\"><code class=\" language-bash\">laravel new example-app --github<span class=\"token operator\">=</span><span class=\"token string\">\"--public\"</span></code></pre>\n    <p>Puede usar la <code>--organization</code>bandera para crear el repositorio en una organización de GitHub específica:</p>\n    <pre class=\" language-bash\"><code class=\" language-bash\">laravel new example-app --github<span class=\"token operator\">=</span><span class=\"token string\">\"--public\"</span> --organization<span class=\"token operator\">=</span><span class=\"token string\">\"laravel\"</span></code></pre>\n    <p></p>\n    <h2 id=\"initial-configuration\"><span class=\"link\">Configuracion inicial</span></h2>\n    <p>Todos los archivos de configuración para el marco de Laravel se almacenan en el <code>config</code>directorio. Cada opción está documentada, así que siéntase libre de revisar los archivos y familiarizarse con las opciones disponibles.</p>\n    <p>Laravel no necesita casi ninguna configuración adicional lista para usar. ¡Eres libre de comenzar a desarrollar! Sin embargo, es posible que desee revisar el <code>config/app.php</code>archivo y su documentación. Contiene varias opciones como <code>timezone</code>y <code>locale</code>que quizás desee cambiar de acuerdo con su aplicación.</p>\n    <p></p>\n    <h3 id=\"environment-based-configuration\"><span class=\"link\">Configuración basada en el entorno</span></h3>\n    <p>Dado que muchos de los valores de las opciones de configuración de Laravel pueden variar dependiendo de si su aplicación se está ejecutando en su computadora local o en un servidor web de producción, muchos valores de configuración importantes se definen utilizando el <code>.env</code>archivo que existe en la raíz de su aplicación.</p>\n    <p>Su <code>.env</code>archivo no debe estar comprometido con el control de código fuente de su aplicación, ya que cada desarrollador / servidor que use su aplicación podría requerir una configuración de entorno diferente. Además, esto sería un riesgo de seguridad en caso de que un intruso obtenga acceso a su repositorio de control de código fuente, ya que cualquier credencial confidencial quedaría expuesta.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Para obtener más información sobre la <code>.env</code>configuración basada en archivos y entornos, consulte la <span class=\"link\">documentación de configuración</span> completa .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"directory-configuration\"><span class=\"link\">Configuración de directorio</span></h3>\n    <p>Laravel siempre debe servirse desde la raíz del \"directorio web\" configurado para su servidor web. No debe intentar servir una aplicación de Laravel desde un subdirectorio del \"directorio web\". Intentar hacerlo podría exponer archivos confidenciales que existen dentro de su aplicación.</p>\n    <p></p>\n    <h2 id=\"next-steps\"><span class=\"link\">Próximos pasos</span></h2>\n    <p>Ahora que ha creado su proyecto de Laravel, es posible que se pregunte qué aprender a continuación. Primero, recomendamos encarecidamente familiarizarse con el funcionamiento de Laravel leyendo la siguiente documentación:</p>\n    <div class=\"content-list\">\n        <ul>\n            <li><span class=\"link\">Solicitar ciclo de vida</span></li>\n            <li><span class=\"link\">Configuración</span></li>\n            <li><span class=\"link\">Estructura de directorios</span></li>\n            <li><span class=\"link\">Contenedor de servicio</span></li>\n            <li><span class=\"link\">Fachadas</span></li>\n        </ul>\n    </div>\n    <p>La forma en que desee utilizar Laravel también determinará los próximos pasos en su viaje. Hay una variedad de formas de usar Laravel, y exploraremos dos casos de uso principales para el marco a continuación.</p>\n    <p></p>\n    <h3 id=\"laravel-the-fullstack-framework\"><span class=\"link\">Laravel El marco de pila completo</span></h3>\n    <p>Laravel puede servir como un marco de pila completo. Por marco de \"pila completa\" queremos decir que va a utilizar Laravel para enrutar las solicitudes a su aplicación y renderizar su interfaz a través de <span class=\"link\">plantillas Blade</span> o utilizando una tecnología híbrida de aplicación de una sola página como <span class=\"link\">Inertia.js</span> . Esta es la forma más común de usar el marco de Laravel.</p>\n    <p>Si así es como planeas usar Laravel, es posible que desees consultar nuestra documentación sobre <span class=\"link\">enrutamiento</span> , <span class=\"link\">vistas</span> o el <span class=\"link\">ORM de Eloquent</span> . Además, es posible que le interese aprender sobre paquetes comunitarios como <span class=\"link\">Livewire</span> e <span class=\"link\">Inertia.js</span> . Estos paquetes le permiten usar Laravel como un marco de pila completo mientras disfruta de muchos de los beneficios de la interfaz de usuario que brindan las aplicaciones JavaScript de una sola página.</p>\n    <p>Si está utilizando Laravel como un marco de pila completo, también le recomendamos encarecidamente que aprenda a compilar el CSS y JavaScript de su aplicación utilizando <span class=\"link\">Laravel Mix</span> .</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si desea comenzar con la creación de su aplicación, consulte uno de nuestros <span class=\"link\">kits de inicio de aplicaciones</span> oficiales .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"laravel-the-api-backend\"><span class=\"link\">Laravel La API Backend</span></h3>\n    <p>Laravel también puede servir como un backend de API para una aplicación de una sola página de JavaScript o una aplicación móvil. Por ejemplo, puede usar Laravel como un backend de API para su aplicación <span class=\"link\">Next.js. </span>En este contexto, puede usar Laravel para proporcionar <span class=\"link\">autenticación</span> y almacenamiento / recuperación de datos para su aplicación, al mismo tiempo que aprovecha los poderosos servicios de Laravel, como colas, correos electrónicos, notificaciones y más.</p>\n    <p>Si así es como planeas usar Laravel, es posible que desees consultar nuestra documentación sobre <span class=\"link\">enrutamiento</span> , <span class=\"link\">Laravel Sanctum</span> y <span class=\"link\">Eloquent ORM</span> .</p>\n</div>"
    },
    {
        "title": "Kits de inicio",
        "subtitle": "EMPEZANDO",
        "contenido": "<div>\n    <h1>Kits de inicio</h1>\n    <p></p>\n    <h2 ><span class=\"link\">Introducción</span></h2>\n    <p>Para darle una ventaja en la construcción de su nueva aplicación Laravel, nos complace ofrecer kits de inicio de aplicaciones y autenticación. Estos kits configuran automáticamente su aplicación con las rutas, controladores y vistas que necesita para registrar y autenticar a los usuarios de su aplicación.</p>\n    <p>Si bien puede utilizar estos kits de inicio, no son obligatorios. Eres libre de crear tu propia aplicación desde cero simplemente instalando una copia nueva de Laravel. De cualquier manera, ¡sabemos que construirás algo grandioso!</p>\n    <p></p>\n    <h2 id=\"laravel-breeze\"><span class=\"link\">Brisa de Laravel</span></h2>\n    <p>Laravel Breeze es una implementación mínima y simple de todas las <span class=\"link\">funciones de autenticación</span> de Laravel , que incluyen inicio de sesión, registro, restablecimiento de contraseña, verificación de correo electrónico y confirmación de contraseña. La capa de vista predeterminada de Laravel Breeze está formada por <span class=\"link\">plantillas Blade</span> simples diseñadas con <span class=\"link\">Tailwind CSS</span> . Breeze proporciona un maravilloso punto de partida para comenzar una nueva aplicación de Laravel.</p>\n    <p></p>\n    <h3 id=\"laravel-breeze-installation\"><span class=\"link\">Instalación</span></h3>\n    <p>Primero, debe <span class=\"link\">crear una nueva aplicación Laravel</span> , configurar su base de datos y ejecutar sus <span class=\"link\">migraciones de base de datos</span> :</p>\n    <pre class=\" language-bash\"><code class=\" language-bash\"><span class=\"token function\">curl</span> -s https://laravel.build/example-app <span class=\"token operator\">|</span> <span class=\"token function\">bash</span>\n\n<span class=\"token builtin class-name\">cd</span> example-app\n\nphp artisan migrate</code></pre>\n    <p>Una vez que haya creado una nueva aplicación Laravel, puede instalar Laravel Breeze usando Composer:</p>\n    <pre class=\" language-bash\"><code class=\" language-bash\"><span class=\"token function\">composer</span> require laravel/breeze --dev</code></pre>\n    <p>Una vez que Composer haya instalado el paquete Laravel Breeze, puede ejecutar el <code>breeze:install</code>comando Artisan. Este comando publica las vistas de autenticación, las rutas, los controladores y otros recursos de su aplicación. Laravel Breeze publica todo su código en su aplicación para que tenga control total y visibilidad sobre sus características e implementación. Después de instalar Breeze, también debe compilar sus activos para que el archivo CSS de su aplicación esté disponible:</p>\n    <pre class=\" language-nothing\"><code class=\" language-nothing\">php artisan breeze:install\n\nnpm install\nnpm run dev\nphp artisan migrate</code></pre>\n    <p>A continuación, puede navegar a las de aplicación <code>/login</code>o <code>/register</code>URL en su navegador web. Todas las rutas de Breeze están definidas dentro del <code>routes/auth.php</code>archivo.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Para obtener más información sobre la compilación de CSS y JavaScript de su aplicación, consulte la <span class=\"link\">documentación de Laravel Mix</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"breeze-and-inertia\"><span class=\"link\">Brisa e inercia</span></h3>\n    <p>Laravel Breeze también ofrece una implementación de frontend <span class=\"link\">Inertia.js</span> impulsada por Vue o React. Para usar una pila de inercia, especifique <code>vue</code>o <code>react</code>como su pila deseada al ejecutar el <code>breeze:install</code>comando Artisan:</p>\n    <pre class=\" language-nothing\"><code class=\" language-nothing\">php artisan breeze:install vue\n\n// Or...\n\nphp artisan breeze:install react\n\nnpm install\nnpm run dev\nphp artisan migrate</code></pre>\n    <p></p>\n    <h2 id=\"laravel-jetstream\"><span class=\"link\">Laravel Jetstream</span></h2>\n    <p>Si bien Laravel Breeze proporciona un punto de partida simple y mínimo para crear una aplicación Laravel, Jetstream aumenta esa funcionalidad con características más sólidas y pilas de tecnología frontend adicionales. <strong>Para aquellos que son nuevos en Laravel, recomendamos aprender las cuerdas con Laravel Breeze antes de graduarse en Laravel Jetstream.</strong></p>\n    <p>Jetstream proporciona un andamio de aplicaciones bellamente diseñado para Laravel e incluye inicio de sesión, registro, verificación de correo electrónico, autenticación de dos factores, administración de sesiones, soporte de API a través de Laravel Sanctum y administración de equipo opcional. Jetstream está diseñado con <span class=\"link\">Tailwind CSS</span> y ofrece su elección de andamios frontales impulsados \u200B\u200Bpor <span class=\"link\">Livewire</span> o <span class=\"link\">Inertia.js</span> .</p>\n    <p>La documentación completa para instalar Laravel Jetstream se puede encontrar dentro de la <span class=\"link\">documentación oficial de Jetstream</span> .</p>\n</div>"
    },
    {
        "title": "Proveedores de servicio",
        "subtitle": "CONCEPTOS DE ARQUITECTURA",
        "contenido": "<div>\n    <h1>Proveedores de servicio</h1>\n    <p></p>\n    <h2 ><span class=\"link\">Introducción</span></h2>\n    <p>Los proveedores de servicios son el lugar central de todas las aplicaciones de arranque de Laravel. Su propia aplicación, así como todos los servicios centrales de Laravel, se arrancan a través de proveedores de servicios.</p>\n    <p>Pero, ¿qué queremos decir con \"bootstrapped\"? En general, nos referimos al <strong>registro de</strong> cosas, incluido el registro de enlaces de contenedores de servicios, detectores de eventos, middleware e incluso rutas. Los proveedores de servicios son el lugar central para configurar su aplicación.</p>\n    <p>Si abre el <code>config/app.php</code>archivo incluido con Laravel, verá una <code>providers</code>matriz. Estas son todas las clases de proveedores de servicios que se cargarán para su aplicación. De forma predeterminada, un conjunto de proveedores de servicios centrales de Laravel se enumeran en esta matriz. Estos proveedores arrancan los componentes centrales de Laravel, como el mailer, la cola, la caché y otros. Muchos de estos proveedores son proveedores \"diferidos\", lo que significa que no se cargarán en cada solicitud, sino solo cuando los servicios que brindan sean realmente necesarios.</p>\n    <p>En esta descripción general, aprenderá cómo escribir sus propios proveedores de servicios y registrarlos con su aplicación Laravel.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si desea obtener más información sobre cómo Laravel maneja las solicitudes y funciona internamente, consulte nuestra documentación sobre el <span class=\"link\">ciclo de vida de las solicitudes de</span> Laravel .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h2 id=\"writing-service-providers\"><span class=\"link\">Proveedores de servicios de redacción</span></h2>\n    <p>Todos los proveedores de servicios amplían la <code>Illuminate\\Support\\ServiceProvider</code>clase. La mayoría de los proveedores de servicios contienen <code>register</code>un <code>boot</code>método y un . Dentro del <code>register</code>método, <strong>solo<span class=\"link\"></span></strong> debe <strong>vincular cosas en el </strong><strong><span class=\"link\">contenedor de servicios</span></strong> . Nunca debe intentar registrar ningún detector de eventos, rutas o cualquier otra función dentro del <code>register</code>método.</p>\n    <p>Artisan CLI puede generar un nuevo proveedor mediante el <code>make:provider</code>comando:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>provider RiakServiceProvider</code></pre>\n    <p></p>\n    <h3 id=\"the-register-method\"><span class=\"link\">El método de registro</span></h3>\n    <p>Como se mencionó anteriormente, dentro del <code>register</code>método, solo debe vincular cosas en el <span class=\"link\">contenedor de servicios</span> . Nunca debe intentar registrar ningún detector de eventos, rutas o cualquier otra función dentro del <code>register</code>método. De lo contrario, puede utilizar accidentalmente un servicio proporcionado por un proveedor de servicios que aún no se ha cargado.</p>\n    <p>Echemos un vistazo a un proveedor de servicios básicos. Dentro de cualquiera de los métodos de su proveedor de servicios, siempre tiene acceso a la <code>$app</code>propiedad que proporciona acceso al contenedor de servicios:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Services<span class=\"token punctuation\">\\</span>Riak<span class=\"token punctuation\">\\</span>Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>ServiceProvider</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RiakServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Register any application services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">app</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">singleton</span><span class=\"token punctuation\">(</span>Connection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$app</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Connection</span><span class=\"token punctuation\">(</span><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'riak'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Este proveedor de servicios solo define un <code>register</code>método y usa ese método para definir una implementación de <code>App\\Services\\Riak\\Connection</code>en el contenedor de servicios. Si aún no está familiarizado con el contenedor de servicios de Laravel, consulte <span class=\"link\">su documentación</span> .</p>\n    <p></p>\n    <h4 id=\"the-bindings-and-singletons-properties\"><span class=\"link\">Las propiedades <code>bindings</code>y<code>singletons</code></span></h4>\n    <p>Si su proveedor de servicios registra muchos enlaces simples, es posible que desee utilizar las propiedades <code>bindings</code>y <code>singletons</code>en lugar de registrar manualmente cada enlace de contenedor. Cuando el proveedor de servicios es cargado por el marco, automáticamente verificará estas propiedades y registrará sus enlaces:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>DowntimeNotifier</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>ServerProvider</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Services<span class=\"token punctuation\">\\</span>DigitalOceanServerProvider</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Services<span class=\"token punctuation\">\\</span>PingdomDowntimeNotifier</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Services<span class=\"token punctuation\">\\</span>ServerToolsProvider</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>ServiceProvider</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AppServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * All of the container bindings that should be registered.\n     *\n     * @var array\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$bindings</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        ServerProvider<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> DigitalOceanServerProvider<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * All of the container singletons that should be registered.\n     *\n     * @var array\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$singletons</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        DowntimeNotifier<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> PingdomDowntimeNotifier<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n        ServerProvider<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> ServerToolsProvider<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p></p>\n    <h3 id=\"the-boot-method\"><span class=\"link\">El método de arranque</span></h3>\n    <p>Entonces, ¿qué pasa si necesitamos registrar un <span class=\"link\">compositor de vistas</span> dentro de nuestro proveedor de servicios? Esto debe hacerse dentro del <code>boot</code>método. <strong>Este método se llama después de que se hayan registrado todos los demás proveedores de servicios</strong> , lo que significa que tiene acceso a todos los demás servicios que se han registrado en el marco:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>View</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>ServiceProvider</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ComposerServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        View<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">composer</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'view'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p></p>\n    <h4 id=\"boot-method-dependency-injection\"><span class=\"link\">Inyección de dependencia del método de arranque</span></h4>\n    <p>Puede escribir dependencias de sugerencia para el <code>boot</code>método de su proveedor de servicios . El <span class=\"link\">contenedor de servicios</span> inyectará automáticamente cualquier dependencia que necesite:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Routing<span class=\"token punctuation\">\\</span>ResponseFactory</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Bootstrap any application services.\n *\n * @param  \\Illuminate\\Contracts\\Routing\\ResponseFactory  $response\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span>ResponseFactory <span class=\"token variable\">$response</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">macro</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'serialized'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h2 id=\"registering-providers\"><span class=\"link\">Registro de proveedores</span></h2>\n    <p>Todos los proveedores de servicios están registrados en el <code>config/app.php</code>archivo de configuración. Este archivo contiene una <code>providers</code>matriz donde puede enumerar los nombres de clase de sus proveedores de servicios. De forma predeterminada, un conjunto de proveedores de servicios centrales de Laravel se enumeran en esta matriz. Estos proveedores arrancan los componentes centrales de Laravel, como el mailer, la cola, la caché y otros.</p>\n    <p>Para registrar su proveedor, agréguelo a la matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'providers'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// Other Service Providers</span>\n\n    App\\<span class=\"token package\">Providers<span class=\"token punctuation\">\\</span>ComposerServiceProvider</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    <p></p>\n    <h2 id=\"deferred-providers\"><span class=\"link\">Proveedores diferidos</span></h2>\n    <p>Si su proveedor <strong>solo</strong> registra enlaces en el <span class=\"link\">contenedor de servicios</span> , puede optar por aplazar su registro hasta que uno de los enlaces registrados sea realmente necesario. Aplazar la carga de dicho proveedor mejorará el rendimiento de su aplicación, ya que no se carga desde el sistema de archivos en cada solicitud.</p>\n    <p>Laravel compila y almacena una lista de todos los servicios proporcionados por proveedores de servicios diferidos, junto con el nombre de su clase de proveedor de servicios. Entonces, solo cuando intentas resolver uno de estos servicios, Laravel carga el proveedor de servicios.</p>\n    <p>Para aplazar la carga de un proveedor, implemente la <code>\\Illuminate\\Contracts\\Support\\DeferrableProvider</code>interfaz y defina un <code>provides</code>método. El <code>provides</code>método debe devolver los enlaces del contenedor de servicios registrados por el proveedor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Services<span class=\"token punctuation\">\\</span>Riak<span class=\"token punctuation\">\\</span>Connection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>DeferrableProvider</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>ServiceProvider</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RiakServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DeferrableProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Register any application services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">app</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">singleton</span><span class=\"token punctuation\">(</span>Connection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$app</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Connection</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$app</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'config'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'riak'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Get the services provided by the provider.\n     *\n     * @return array\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">provides</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>Connection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n</div>"
    },
    {
        "title": "Enrutamiento",
        "subtitle": "CONCEPTOS BASICOS",
        "contenido": "<div>\n    <h1>Enrutamiento</h1>\n    \n    <h2 id=\"basic-routing\"><span class=\"link\">Enrutamiento básico</span></h2>\n    <p>Las rutas de Laravel más básicas aceptan un URI y un cierre, proporcionando un método muy simple y expresivo para definir rutas y comportamientos sin complicados archivos de configuración de enrutamiento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Route</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/greeting'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'Hello World'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"the-default-route-files\"><span class=\"link\">Los archivos de ruta predeterminados</span></h4>\n    <p>Todas las rutas de Laravel se definen en sus archivos de ruta, que se encuentran en el <code>routes</code>directorio. Estos archivos son cargados automáticamente por su aplicación <code>App\\Providers\\RouteServiceProvider</code>. El <code>routes/web.php</code>archivo define rutas que son para su interfaz web. A estas rutas se les asigna el <code>web</code>grupo de middleware, que proporciona funciones como el estado de la sesión y la protección CSRF. Las rutas en <code>routes/api.php</code>son sin estado y se les asigna el <code>api</code>grupo de middleware.</p>\n    <p>Para la mayoría de las aplicaciones, comenzará por definir rutas en su <code>routes/web.php</code>archivo. Se <code>routes/web.php</code>puede acceder a las rutas definidas en ingresando la URL de la ruta definida en su navegador. Por ejemplo, puede acceder a la siguiente ruta navegando a <code>http://example.com/user</code>en su navegador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>UserController</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>UserController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'index'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Las rutas definidas en el <code>routes/api.php</code>archivo están anidadas dentro de un grupo de rutas por <code>RouteServiceProvider</code>. Dentro de este grupo, el <code>/api</code>prefijo URI se aplica automáticamente, por lo que no es necesario aplicarlo manualmente a todas las rutas del archivo. Puede modificar el prefijo y otras opciones del grupo de rutas modificando su <code>RouteServiceProvider</code>clase.</p>\n    \n    <h4 id=\"available-router-methods\"><span class=\"link\">Métodos de enrutador disponibles</span></h4>\n    <p>El enrutador le permite registrar rutas que responden a cualquier verbo HTTP:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">patch</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">options</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uri</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>A veces, es posible que deba registrar una ruta que responda a varios verbos HTTP. Puede hacerlo utilizando el <code>match</code>método. O incluso puede registrar una ruta que responda a todos los verbos HTTP utilizando el <code>any</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'post'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"dependency-injection\"><span class=\"link\">Inyección de dependencia</span></h4>\n    <p>Puede escribir sugerencias sobre cualquier dependencia requerida por su ruta en la firma de devolución de llamada de su ruta. Las dependencias declaradas se resolverán e inyectarán automáticamente en la devolución de llamada por el <span class=\"link\">contenedor de servicios de</span> Laravel . Por ejemplo, puede escribir una sugerencia a la <code>Illuminate\\Http\\Request</code>clase para que la solicitud HTTP actual se inyecte automáticamente en la devolución de llamada de su ruta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"csrf-protection\"><span class=\"link\">Protección CSRF</span></h4>\n    <p>Recuerde, cualquier forma de HTML que apuntan a <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, o <code>DELETE</code>rutas que se definen en el <code>web</code>archivo de rutas deben incluir un campo token CSRF. De lo contrario, la solicitud será rechazada. Puede leer más sobre la protección CSRF en la <span class=\"link\">documentación de CSRF</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>form method<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"POST\"</span> action<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"/profile\"</span><span class=\"token operator\">&gt;</span>\n    @csrf\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">&gt;</span></code></pre>\n    \n    <h3 id=\"redirect-routes\"><span class=\"link\">Redirigir rutas</span></h3>\n    <p>Si está definiendo una ruta que redirige a otro URI, puede usar el <code>Route::redirect</code>método. Este método proporciona un atajo conveniente para que no tenga que definir una ruta completa o un controlador para realizar una redirección simple:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/here'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'/there'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>De forma predeterminada, <code>Route::redirect</code>devuelve un <code>302</code>código de estado. Puede personalizar el código de estado utilizando el tercer parámetro opcional:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/here'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'/there'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">301</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>O puede usar el <code>Route::permanentRedirect</code>método para devolver un <code>301</code>código de estado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">permanentRedirect</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/here'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'/there'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Cuando se usan parámetros de ruta en rutas de redireccionamiento, Laravel reserva los siguientes parámetros y no se pueden usar: <code>destination</code>y <code>status</code>.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"view-routes\"><span class=\"link\">Ver rutas</span></h3>\n    <p>Si su ruta solo necesita devolver una <span class=\"link\">vista</span> , puede usar el <code>Route::view</code>método. Al igual que el <code>redirect</code>método, este método proporciona un atajo simple para que no tenga que definir una ruta completa o un controlador. El <code>view</code>método acepta un URI como primer argumento y un nombre de vista como segundo argumento. Además, puede proporcionar una matriz de datos para pasar a la vista como un tercer argumento opcional:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/welcome'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'welcome'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/welcome'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'welcome'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Al utilizar parámetros de la ruta en las rutas de vista, los siguientes parámetros están reservados por laravel y no se pueden utilizar: <code>view</code>, <code>data</code>, <code>status</code>, y <code>headers</code>.</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"route-parameters\"><span class=\"link\">Parámetros de ruta</span></h2>\n    \n    <h3 id=\"required-parameters\"><span class=\"link\">Parámetros requeridos</span></h3>\n    <p>A veces, necesitará capturar segmentos del URI dentro de su ruta. Por ejemplo, es posible que deba capturar la identificación de un usuario de la URL. Puede hacerlo definiendo parámetros de ruta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/{id}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'User '</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede definir tantos parámetros de ruta como requiera su ruta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/posts/{post}/comments/{comment}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$postId</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$commentId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Los parámetros de ruta siempre están entre <code>{}</code>llaves y deben constar de caracteres alfabéticos. Los guiones bajos ( <code>_</code>) también son aceptables dentro de los nombres de los parámetros de ruta. Los parámetros de ruta se inyectan en las devoluciones de llamada / controladores de ruta en función de su orden; los nombres de los argumentos de devolución de llamada / controlador de ruta no importan.</p>\n    \n    <h4 id=\"parameters-and-dependency-injection\"><span class=\"link\">Parámetros e inyección de dependencia</span></h4>\n    <p>Si su ruta tiene dependencias que le gustaría que el contenedor de servicios de Laravel inyecte automáticamente en la devolución de llamada de su ruta, debe enumerar los parámetros de su ruta después de sus dependencias:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/{id}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'User '</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"parameters-optional-parameters\"><span class=\"link\">Parámetros opcionales</span></h3>\n    <p>Ocasionalmente, es posible que deba especificar un parámetro de ruta que no siempre esté presente en el URI. Puede hacerlo colocando una <code>?</code>marca después del nombre del parámetro. Asegúrese de darle a la variable correspondiente de la ruta un valor predeterminado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/{name?}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/{name?}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'John'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"parameters-regular-expression-constraints\"><span class=\"link\">Restricciones de expresiones regulares</span></h3>\n    <p>Puede restringir el formato de los parámetros de su ruta utilizando el <code>where</code>método en una instancia de ruta. El <code>where</code>método acepta el nombre del parámetro y una expresión regular que define cómo se debe restringir el parámetro:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/{name}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'[A-Za-z]+'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/{id}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'[0-9]+'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/{id}/{name}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'[0-9]+'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'[a-z]+'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Para mayor comodidad, algunos patrones de expresión regular de uso común tienen métodos auxiliares que le permiten agregar rápidamente restricciones de patrón a sus rutas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/{id}/{name}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereNumber</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereAlpha</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/{name}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereAlphaNumeric</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/{id}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereUuid</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si la solicitud entrante no coincide con las restricciones del patrón de ruta, se devolverá una respuesta HTTP 404.</p>\n    \n    <h4 id=\"parameters-global-constraints\"><span class=\"link\">Restricciones globales</span></h4>\n    <p>Si desea que un parámetro de ruta esté siempre limitado por una expresión regular determinada, puede usar el <code>pattern</code>método. Debes definir estos patrones en el <code>boot</code>método de tu <code>App\\Providers\\RouteServiceProvider</code>clase:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Define your route model bindings, pattern filters, etc.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">pattern</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'[0-9]+'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Una vez que se ha definido el patrón, se aplica automáticamente a todas las rutas usando ese nombre de parámetro:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/{id}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Only executed if {id} is numeric...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"parameters-encoded-forward-slashes\"><span class=\"link\">Barras diagonales codificadas</span></h4>\n    <p>El componente de enrutamiento de Laravel permite que todos los caracteres <code>/</code>estén presentes dentro de los valores de los parámetros de ruta. Debe permitir explícitamente <code>/</code>ser parte de su marcador de posición mediante una <code>where</code>expresión regular de condición:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/search/{search}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$search</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$search</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'search'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'.*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p> Las barras diagonales codificadas solo se admiten dentro del último segmento de ruta.</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"named-routes\"><span class=\"link\">Rutas nombradas</span></h2>\n    <p>Las rutas con nombre permiten la generación conveniente de URL o redireccionamientos para rutas específicas. Puede especificar un nombre para una ruta encadenando el <code>name</code>método a la definición de la ruta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/profile'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'profile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede especificar nombres de ruta para las acciones del controlador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'/user/profile'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>UserProfileController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'show'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'profile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p> Los nombres de las rutas siempre deben ser únicos.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"generating-urls-to-named-routes\"><span class=\"link\">Generación de URL para rutas con nombre</span></h4>\n    <p>Una vez que haya asignado un nombre a una ruta determinada, puede usar el nombre de la ruta al generar URL o redireccionamientos a través de las funciones de ayuda <code>route</code>y de Laravel <code>redirect</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Generating URLs...</span>\n<span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'profile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Generating Redirects...</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'profile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si la ruta nombrada define parámetros, puede pasar los parámetros como segundo argumento a la <code>route</code>función. Los parámetros dados se insertarán automáticamente en la URL generada en sus posiciones correctas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/{id}/profile'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'profile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'profile'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si pasa parámetros adicionales en la matriz, esos pares clave / valor se agregarán automáticamente a la cadena de consulta de la URL generada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/{id}/profile'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'profile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'profile'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'photos'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'yes'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// /user/1/profile?photos=yes</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>A veces, es posible que desee especificar valores predeterminados para toda la solicitud para los parámetros de URL, como la configuración regional actual. Para lograr esto, puede utilizar el <span class=\"link\"><code>URL::defaults</code>método</span> .</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"inspecting-the-current-route\"><span class=\"link\">Inspección de la ruta actual</span></h4>\n    <p>Si desea determinar si la solicitud actual se enruta a una ruta con nombre determinada, puede usar el <code>named</code>método en una instancia de Ruta. Por ejemplo, puede verificar el nombre de la ruta actual desde un middleware de ruta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Handle an incoming request.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @param  \\Closure  $next\n * @return mixed\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> Closure <span class=\"token variable\">$next</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">named</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'profile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h2 id=\"route-groups\"><span class=\"link\">Grupos de ruta</span></h2>\n    <p>Los grupos de rutas le permiten compartir atributos de ruta, como middleware, en una gran cantidad de rutas sin necesidad de definir esos atributos en cada ruta individual.</p>\n    <p>Los grupos anidados intentan \"fusionar\" atributos de forma inteligente con su grupo principal. El middleware y las <code>where</code>condiciones se combinan mientras se añaden los nombres y los prefijos. Los delimitadores de espacio de nombres y las barras inclinadas en los prefijos de URI se agregan automáticamente cuando corresponde.</p>\n    \n    <h3 id=\"route-group-middleware\"><span class=\"link\">Middleware</span></h3>\n    <p>Para asignar <span class=\"link\">middleware</span> a todas las rutas dentro de un grupo, puede usar el <code>middleware</code>método antes de definir el grupo. El middleware se ejecuta en el orden en que se enumeran en la matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'first'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'second'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Uses first &amp; second middleware...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/profile'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Uses first &amp; second middleware...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"route-group-subdomain-routing\"><span class=\"link\">Enrutamiento de subdominio</span></h3>\n    <p>Los grupos de rutas también se pueden usar para manejar el enrutamiento de subdominios. A los subdominios se les pueden asignar parámetros de ruta al igual que los URI de ruta, lo que le permite capturar una parte del subdominio para usar en su ruta o controlador. El subdominio se puede especificar llamando al <code>domain</code>método antes de definir el grupo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">domain</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'{account}.example.com'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user/{id}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$account</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Para asegurarse de que las rutas de su subdominio sean accesibles, debe registrar las rutas del subdominio antes de registrar las rutas del dominio raíz. Esto evitará que las rutas del dominio raíz sobrescriban las rutas del subdominio que tienen la misma ruta URI.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"route-group-prefixes\"><span class=\"link\">Prefijos de ruta</span></h3>\n    <p>El <code>prefix</code>método puede usarse para prefijar cada ruta en el grupo con un URI dado. Por ejemplo, es posible que desee prefijar todos los URI de ruta dentro del grupo con <code>admin</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">prefix</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'admin'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Matches The \"/admin/users\" URL</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"route-group-name-prefixes\"><span class=\"link\">Prefijos de nombre de ruta</span></h3>\n    <p>El <code>name</code>método puede usarse para prefijar cada nombre de ruta en el grupo con una cadena dada. Por ejemplo, es posible que desee anteponer todos los nombres de las rutas agrupadas con <code>admin</code>. La cadena dada tiene el prefijo del nombre de la ruta exactamente como se especifica, por lo que nos aseguraremos de proporcionar el <code>.</code>carácter final en el prefijo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'admin.'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Route assigned name \"admin.users\"...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"route-model-binding\"><span class=\"link\">Enlace de modelo de ruta</span></h2>\n    <p>Al inyectar un ID de modelo a una ruta o acción de controlador, a menudo consultará la base de datos para recuperar el modelo que corresponde a ese ID. El enlace del modelo de ruta de Laravel proporciona una forma conveniente de inyectar automáticamente las instancias del modelo directamente en sus rutas. Por ejemplo, en lugar de inyectar la ID de un usuario, puede inyectar toda la <code>User</code>instancia del modelo que coincida con la ID dada.</p>\n    \n    <h3 id=\"implicit-binding\"><span class=\"link\">Enlace implícito</span></h3>\n    <p>Laravel resuelve automáticamente los modelos Eloquent definidos en rutas o acciones de controlador cuyos nombres de variables con sugerencias de tipo coinciden con el nombre de un segmento de ruta. Por ejemplo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/users/{user}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">email</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Dado que la <code>$user</code>variable está insinuada como <code>App\\Models\\User</code>modelo Eloquent y el nombre de la variable coincide con el <code>{user}</code>segmento URI, Laravel inyectará automáticamente la instancia del modelo que tiene una ID que coincide con el valor correspondiente del URI de la solicitud. Si no se encuentra una instancia de modelo coincidente en la base de datos, se generará automáticamente una respuesta HTTP 404.</p>\n    <p>Por supuesto, el enlace implícito también es posible cuando se utilizan métodos de controlador. Nuevamente, tenga en cuenta que el <code>{user}</code>segmento de URI coincide con la <code>$user</code>variable en el controlador que contiene una <code>App\\Models\\User</code>sugerencia de tipo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>UserController</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Route definition...</span>\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/users/{user}'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>UserController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'show'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Controller method definition...</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user.profile'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"implicit-soft-deleted-models\"><span class=\"link\">Modelos suavemente eliminados</span></h4>\n    <p>Normalmente, el enlace de modelo implícito no recuperará los modelos que se han <span class=\"link\">eliminado temporalmente</span> . Sin embargo, puede indicarle al enlace implícito que recupere estos modelos encadenando el <code>withTrashed</code>método a la definición de su ruta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/users/{user}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">email</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withTrashed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>\n    </p>\n    <h4 id=\"customizing-the-default-key-name\"><span class=\"link\"><span class=\"link\">Personalizando la clave</span></span></h4>\n    <p>A veces, es posible que desee resolver modelos de Eloquent utilizando una columna diferente a <code>id</code>. Para hacerlo, puede especificar la columna en la definición del parámetro de ruta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/posts/{post:slug}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Post <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea que el enlace de modelo siempre use una columna de base de datos que no sea <code>id</code>cuando se recupera una clase de modelo determinada, puede anular el <code>getRouteKeyName</code>método en el modelo Eloquent:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the route key for the model.\n *\n * @return string\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getRouteKeyName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'slug'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"implicit-model-binding-scoping\"><span class=\"link\">Teclas personalizadas y alcance</span></h4>\n    <p>Al vincular implícitamente múltiples modelos Eloquent en una sola definición de ruta, es posible que desee establecer el alcance del segundo modelo Eloquent de manera que debe ser un hijo del modelo Eloquent anterior. Por ejemplo, considere esta definición de ruta que recupera una publicación de blog por slug para un usuario específico:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/users/{user}/posts/{post:slug}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> Post <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Cuando se usa un enlace implícito con clave personalizada como un parámetro de ruta anidado, Laravel buscará automáticamente el alcance de la consulta para recuperar el modelo anidado por su padre usando convenciones para adivinar el nombre de la relación en el padre. En este caso, se asumirá que el <code>User</code>modelo tiene una relación nombrada <code>posts</code>(la forma plural del nombre del parámetro de ruta) que se puede utilizar para recuperar el <code>Post</code>modelo.</p>\n    \n    <h4><span class=\"link\">Personalización del comportamiento del modelo faltante</span></h4>\n    <p>Normalmente, se generará una respuesta HTTP 404 si no se encuentra un modelo enlazado implícitamente. Sin embargo, puede personalizar este comportamiento llamando al <code>missing</code>método al definir su ruta. El <code>missing</code>método acepta un cierre que se invocará si no se puede encontrar un modelo vinculado implícitamente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>LocationsController</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Redirect</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/locations/{location:slug}'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>LocationsController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'show'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'locations.view'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">missing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Redirect<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'locations.index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"explicit-binding\"><span class=\"link\">Enlace explícito</span></h3>\n    <p>No es necesario que utilice la resolución de modelo implícita basada en convenciones de Laravel para utilizar el enlace de modelo. También puede definir explícitamente cómo se corresponden los parámetros de ruta con los modelos. Para registrar un enlace explícito, use el <code>model</code>método del enrutador para especificar la clase para un parámetro dado. Debe definir sus enlaces de modelo explícitos al comienzo del <code>boot</code>método de su <code>RouteServiceProvider</code>clase:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Route</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Define your route model bindings, pattern filters, etc.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user'</span><span class=\"token punctuation\">,</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>A continuación, defina una ruta que contenga un <code>{user}</code>parámetro:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/users/{user}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Dado que hemos vinculado todos los <code>{user}</code>parámetros al <code>App\\Models\\User</code>modelo, se inyectará una instancia de esa clase en la ruta. Entonces, por ejemplo, una solicitud <code>users/1</code>inyectará la <code>User</code>instancia de la base de datos que tiene un ID de <code>1</code>.</p>\n    <p>Si no se encuentra una instancia de modelo coincidente en la base de datos, se generará automáticamente una respuesta HTTP 404.</p>\n    \n    <h4 id=\"customizing-the-resolution-logic\"><span class=\"link\">Personalización de la lógica de resolución</span></h4>\n    <p>Si desea definir su propia lógica de resolución de enlace de modelo, puede utilizar el <code>Route::bind</code>método. El cierre que pase al <code>bind</code>método recibirá el valor del segmento URI y debería devolver la instancia de la clase que debería inyectarse en la ruta. Nuevamente, esta personalización debe tener lugar en el <code>boot</code>método de su aplicación <code>RouteServiceProvider</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Route</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Define your route model bindings, pattern filters, etc.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">firstOrFail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Alternativamente, puede anular el <code>resolveRouteBinding</code>método en su modelo Eloquent. Este método recibirá el valor del segmento URI y debería devolver la instancia de la clase que debería inyectarse en la ruta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Retrieve the model for a bound value.\n *\n * @param  mixed  $value\n * @param  string|null  $field\n * @return \\Illuminate\\Database\\Eloquent\\Model|null\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">resolveRouteBinding</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$field</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">firstOrFail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Si una ruta utiliza <span class=\"link\">un ámbito de enlace implícito</span> , el <code>resolveChildRouteBinding</code>método se utilizará para resolver el enlace secundario del modelo principal:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Retrieve the child model for a bound value.\n *\n * @param  string  $childType\n * @param  mixed  $value\n * @param  string|null  $field\n * @return \\Illuminate\\Database\\Eloquent\\Model|null\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">resolveChildRouteBinding</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$childType</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$field</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">parent</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">resolveChildRouteBinding</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$childType</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$field</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h2 id=\"fallback-routes\"><span class=\"link\">Rutas de respaldo</span></h2>\n    <p>Con el <code>Route::fallback</code>método, puede definir una ruta que se ejecutará cuando ninguna otra ruta coincida con la solicitud entrante. Normalmente, las solicitudes no gestionadas generarán automáticamente una página \"404\" a través del controlador de excepciones de su aplicación. Sin embargo, dado que normalmente definiría la <code>fallback</code>ruta dentro de su <code>routes/web.php</code>archivo, todo el <code>web</code>middleware del grupo de middleware se aplicará a la ruta. Puede agregar middleware adicional a esta ruta según sea necesario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p> La ruta alternativa siempre debe ser la última ruta registrada por su aplicación.</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"rate-limiting\"><span class=\"link\">Limitación de tasa</span></h2>\n    \n    <h3 id=\"defining-rate-limiters\"><span class=\"link\">Definición de limitadores de velocidad</span></h3>\n    <p>Laravel incluye servicios de limitación de velocidad potentes y personalizables que puede utilizar para restringir la cantidad de tráfico para una ruta determinada o un grupo de rutas. Para comenzar, debe definir configuraciones de limitador de velocidad que satisfagan las necesidades de su aplicación. Normalmente, esto debe hacerse dentro del <code>configureRateLimiting</code>método de la <code>App\\Providers\\RouteServiceProvider</code>clase de su aplicación .</p>\n    <p>Los limitadores de velocidad se definen utilizando el método <code>RateLimiter</code>de fachada <code>for</code>. El <code>for</code>método acepta un nombre de limitador de velocidad y un cierre que devuelve la configuración de límite que debe aplicarse a las rutas asignadas al limitador de velocidad. La configuración de límite son instancias de la <code>Illuminate\\Cache\\RateLimiting\\Limit</code>clase. Esta clase contiene métodos \"constructores\" útiles para que pueda definir rápidamente su límite. El nombre del limitador de velocidad puede ser cualquier cadena que desee:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Cache<span class=\"token punctuation\">\\</span>RateLimiting<span class=\"token punctuation\">\\</span>Limit</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>RateLimiter</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Configure the rate limiters for the application.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">configureRateLimiting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    RateLimiter<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'global'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Limit<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">perMinute</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Si la solicitud entrante excede el límite de velocidad especificado, Laravel devolverá automáticamente una respuesta con un código de estado HTTP 429. Si desea definir su propia respuesta que debe ser devuelta por un límite de tasa, puede usar el <code>response</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">RateLimiter<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'global'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Limit<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">perMinute</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Custom response...'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">429</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Dado que las devoluciones de llamada del limitador de tasa reciben la instancia de solicitud HTTP entrante, puede crear el límite de tasa apropiado de forma dinámica en función de la solicitud entrante o del usuario autenticado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">RateLimiter<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'uploads'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">vipCustomer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">?</span> Limit<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">none</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">:</span> Limit<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">perMinute</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"segmenting-rate-limits\"><span class=\"link\">Límites de velocidad de segmentación</span></h4>\n    <p>A veces, es posible que desee segmentar los límites de tasas por algún valor arbitrario. Por ejemplo, es posible que desee permitir que los usuarios accedan a una ruta determinada 100 veces por minuto por dirección IP. Para lograr esto, puede usar el <code>by</code>método al construir su límite de tasa:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">RateLimiter<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'uploads'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">vipCustomer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">?</span> Limit<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">none</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">:</span> Limit<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">perMinute</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">by</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Para ilustrar esta función con otro ejemplo, podemos limitar el acceso a la ruta a 100 veces por minuto por ID de usuario autenticado o 10 veces por minuto por dirección IP para invitados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">RateLimiter<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'uploads'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">?</span> Limit<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">perMinute</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">by</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">:</span> Limit<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">perMinute</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">by</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"multiple-rate-limits\"><span class=\"link\">Límites de frecuencia múltiple</span></h4>\n    <p>Si es necesario, puede devolver una serie de límites de velocidad para una configuración de limitador de velocidad determinada. Cada límite de velocidad se evaluará para la ruta en función del orden en que se coloquen dentro de la matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">RateLimiter<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'login'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n        Limit<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">perMinute</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        Limit<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">perMinute</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">by</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"attaching-rate-limiters-to-routes\"><span class=\"link\">Colocación de limitadores de velocidad en rutas</span></h3>\n    <p>Los limitadores de velocidad se pueden adjuntar a rutas o grupos de rutas usando el <code>throttle</code> <span class=\"link\">middleware</span> . El middleware del acelerador acepta el nombre del limitador de velocidad que desea asignar a la ruta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'throttle:uploads'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/audio'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/video'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"throttling-with-redis\"><span class=\"link\">Aceleración con Redis</span></h4>\n    <p>Normalmente, el <code>throttle</code>middleware se asigna a la <code>Illuminate\\Routing\\Middleware\\ThrottleRequests</code>clase. Esta asignación se define en el kernel HTTP de su aplicación ( <code>App\\Http\\Kernel</code>). Sin embargo, si está usando Redis como el controlador de caché de su aplicación, es posible que desee cambiar esta asignación para usar la <code>Illuminate\\Routing\\Middleware\\ThrottleRequestsWithRedis</code>clase. Esta clase es más eficiente para administrar la limitación de velocidad con Redis:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'throttle'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Routing<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>ThrottleRequestsWithRedis</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span></code></pre>\n    \n    <h2 id=\"form-method-spoofing\"><span class=\"link\">Método de formulario suplantación de identidad</span></h2>\n    <p>Formularios HTML no son compatibles <code>PUT</code>, <code>PATCH</code>o <code>DELETE</code>acciones. Por lo tanto, al definir <code>PUT</code>, <code>PATCH</code>o <code>DELETE</code>rutas a las que se llama desde un formulario HTML, deberá agregar un <code>_method</code>campo oculto al formulario. El valor enviado con el <code>_method</code>campo se utilizará como método de solicitud HTTP:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>form action<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"/example\"</span> method<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"POST\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"hidden\"</span> name<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"_method\"</span> value<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"PUT\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"hidden\"</span> name<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"_token\"</span> value<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"{{ csrf_token() }}\"</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">&gt;</span></code></pre>\n    <p>Por conveniencia, puede utilizar la <code>@method</code> <span class=\"link\">directiva Blade</span> para generar el <code>_method</code>campo de entrada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>form action<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"/example\"</span> method<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"POST\"</span><span class=\"token operator\">&gt;</span>\n    @<span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'PUT'</span><span class=\"token punctuation\">)</span>\n    @csrf\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">&gt;</span></code></pre>\n    \n    <h2 id=\"accessing-the-current-route\"><span class=\"link\">Acceder a la ruta actual</span></h2>\n    <p>Es posible utilizar los <code>current</code>, <code>currentRouteName</code>y <code>currentRouteAction</code>métodos en la <code>Route</code>fachada de acceso a la información sobre el manejo de la solicitud entrante ruta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Route</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$route</span> <span class=\"token operator\">=</span> Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Illuminate\\Routing\\Route</span>\n<span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">currentRouteName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span>\n<span class=\"token variable\">$action</span> <span class=\"token operator\">=</span> Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">currentRouteAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span></code></pre>\n    <p>Puede consultar la documentación de la API para la <span class=\"link\">clase subyacente de la fachada de la ruta</span> y la <span class=\"link\">instancia de la ruta</span> para revisar todos los métodos que están disponibles en el enrutador y las clases de ruta.</p>\n    \n    <h2 id=\"cors\"><span class=\"link\">Uso compartido de recursos de origen cruzado (CORS)</span></h2>\n    <p>Laravel puede responder automáticamente a <code>OPTIONS</code>las solicitudes HTTP CORS con valores que usted configure. Todas las configuraciones de CORS pueden configurarse en el <code>config/cors.php</code>archivo de configuración de su aplicación . Las <code>OPTIONS</code>solicitudes serán manejadas automáticamente por el <code>HandleCors</code> <span class=\"link\">middleware</span> que se incluye de forma predeterminada en su pila global de middleware. Su pila de middleware global se encuentra en el kernel HTTP de su aplicación ( <code>App\\Http\\Kernel</code>).</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Para obtener más información sobre CORS y los encabezados CORS, consulte la <span class=\"link\">documentación web de MDN sobre CORS</span> .</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"route-caching\"><span class=\"link\">Almacenamiento en caché de ruta</span></h2>\n    <p>Al implementar su aplicación en producción, debe aprovechar la caché de rutas de Laravel. El uso de la memoria caché de rutas disminuirá drásticamente la cantidad de tiempo que lleva registrar todas las rutas de su aplicación. Para generar un caché de ruta, ejecute el <code>route:cache</code>comando Artisan:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan route<span class=\"token punctuation\">:</span>cache</code></pre>\n    <p>Después de ejecutar este comando, su archivo de rutas en caché se cargará en cada solicitud. Recuerde, si agrega alguna ruta nueva, deberá generar una memoria caché de ruta nueva. Debido a esto, solo debe ejecutar el <code>route:cache</code>comando durante la implementación de su proyecto.</p>\n    <p>Puede usar el <code>route:clear</code>comando para borrar la memoria caché de la ruta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan route<span class=\"token punctuation\">:</span>clear</code></pre>\n</div>"
    },
    {
        "title": "Middleware",
        "subtitle": "CONCEPTOS BASICOS",
        "contenido": "<div>\n    <h1>Middleware</h1>    \n    <h2 id=\"introduction\"><span class=\"link\">Introducción</span></h2>\n    <p>El middleware proporciona un mecanismo conveniente para inspeccionar y filtrar las solicitudes HTTP que ingresan a su aplicación. Por ejemplo, Laravel incluye un middleware que verifica que el usuario de su aplicación esté autenticado. Si el usuario no está autenticado, el middleware redirigirá al usuario a la pantalla de inicio de sesión de su aplicación. Sin embargo, si el usuario está autenticado, el middleware permitirá que la solicitud continúe en la aplicación.</p>\n    <p>Se puede escribir middleware adicional para realizar una variedad de tareas además de la autenticación. Por ejemplo, un middleware de registro puede registrar todas las solicitudes entrantes en su aplicación. Hay varios middleware incluidos en el marco de Laravel, incluido el middleware para la autenticación y la protección CSRF. Todos estos middleware se encuentran en el <code>app/Http/Middleware</code>directorio.</p>\n    \n    <h2 id=\"defining-middleware\"><span class=\"link\">Definición de middleware</span></h2>\n    <p>Para crear un nuevo middleware, use el <code>make:middleware</code>comando Artisan:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>middleware EnsureTokenIsValid</code></pre>\n    <p>Este comando colocará una nueva <code>EnsureTokenIsValid</code>clase dentro de su <code>app/Http/Middleware</code>directorio. En este middleware, solo permitiremos el acceso a la ruta si la <code>token</code>entrada proporcionada coincide con un valor especificado. De lo contrario, redirigiremos a los usuarios al <code>home</code>URI:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Closure</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">EnsureTokenIsValid</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Handle an incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> Closure <span class=\"token variable\">$next</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'token'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token single-quoted-string string\">'my-secret-token'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'home'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Como puede ver, si lo proporcionado <code>token</code>no coincide con nuestro token secreto, el middleware devolverá una redirección HTTP al cliente; de lo contrario, la solicitud se pasará a la aplicación. Para pasar la solicitud más profundamente en la aplicación (permitiendo que el middleware \"pase\"), debe llamar a la <code>$next</code>devolución de llamada con el <code>$request</code>.</p>\n    <p>Es mejor imaginarse el middleware como una serie de \"capas\" que las solicitudes HTTP deben atravesar antes de que lleguen a su aplicación. Cada capa puede examinar la solicitud e incluso rechazarla por completo.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Todo el middleware se resuelve a través del <span class=\"link\">contenedor de servicios</span> , por lo que puede indicar cualquier dependencia que necesite dentro del constructor de un middleware.</p></p></div>\n    </blockquote>\n    <p>\n    </p>\n    <h4 id=\"middleware-and-responses\"><span class=\"link\"><span class=\"link\">Middleware y respuestas</span></span></h4>\n    <p>Por supuesto, un middleware puede realizar tareas antes o después de pasar la solicitud más profundamente a la aplicación. Por ejemplo, el siguiente middleware realizaría alguna tarea <strong>antes</strong> de que la aplicación maneje la solicitud:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Closure</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BeforeMiddleware</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> Closure <span class=\"token variable\">$next</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Perform action</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Sin embargo, este middleware realizaría su tarea <strong>después</strong> de que la aplicación maneje la solicitud:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Closure</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AfterMiddleware</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> Closure <span class=\"token variable\">$next</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Perform action</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$response</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h2 id=\"registering-middleware\"><span class=\"link\">Registro de middleware</span></h2>\n    \n    <h3 id=\"global-middleware\"><span class=\"link\">Middleware global</span></h3>\n    <p>Si desea que se ejecute un middleware durante cada solicitud HTTP a su aplicación, enumere la clase de middleware en la <code>$middleware</code>propiedad de su <code>app/Http/Kernel.php</code>clase.</p>\n    \n    <h3 id=\"assigning-middleware-to-routes\"><span class=\"link\">Asignar middleware a rutas</span></h3>\n    <p>Si desea asignar middleware a rutas específicas, primero debe asignar al middleware una clave en el <code>app/Http/Kernel.php</code>archivo de su aplicación . De forma predeterminada, la <code>$routeMiddleware</code>propiedad de esta clase contiene entradas para el middleware incluido con Laravel. Puede agregar su propio middleware a esta lista y asignarle una clave de su elección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Within App\\Http\\Kernel class...</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$routeMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'auth'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> \\<span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>Authenticate</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'auth.basic'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>AuthenticateWithBasicAuth</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'bindings'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Routing<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>SubstituteBindings</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'cache.headers'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>SetCacheHeaders</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'can'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>Authorize</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'guest'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> \\<span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>RedirectIfAuthenticated</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'signed'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Routing<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>ValidateSignature</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'throttle'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Routing<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>ThrottleRequests</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'verified'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>EnsureEmailIsVerified</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Una vez que se ha definido el middleware en el kernel HTTP, puede usar el <code>middleware</code>método para asignar middleware a una ruta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/profile'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'auth'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede asignar varios middleware a la ruta pasando una matriz de nombres de middleware al <code>middleware</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'first'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'second'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Al asignar middleware, también puede pasar el nombre de clase completo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>EnsureTokenIsValid</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/profile'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span>EnsureTokenIsValid<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Al asignar middleware a un grupo de rutas, es posible que ocasionalmente necesite evitar que el middleware se aplique a una ruta individual dentro del grupo. Puede lograr esto usando el <code>withoutMiddleware</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>EnsureTokenIsValid</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>EnsureTokenIsValid<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/profile'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withoutMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>EnsureTokenIsValid<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>withoutMiddleware</code>método solo puede eliminar el middleware de ruta y no se aplica al <span class=\"link\">middleware global</span> .</p>\n    \n    <h3 id=\"middleware-groups\"><span class=\"link\">Grupos de middleware</span></h3>\n    <p>A veces, es posible que desee agrupar varios middleware en una sola clave para que sea más fácil asignarlos a las rutas. Puede lograr esto usando la <code>$middlewareGroups</code>propiedad de su kernel HTTP.</p>\n    <p>Fuera de la caja, viene con laravel <code>web</code>y <code>api</code>grupos de middleware que contienen middleware común es posible que desee aplicar a sus web y API rutas. Recuerde, el <code>App\\Providers\\RouteServiceProvider</code>proveedor de servicios de su aplicación aplica automáticamente estos grupos de middleware a las rutas dentro de sus archivos de ruta <code>web</code>y correspondientes <code>api</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The application's route middleware groups.\n *\n * @var array\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$middlewareGroups</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'web'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        \\<span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>EncryptCookies</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n        \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Cookie<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>AddQueuedCookiesToResponse</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n        \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Session<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>StartSession</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// \\Illuminate\\Session\\Middleware\\AuthenticateSession::class,</span>\n        \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>View<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>ShareErrorsFromSession</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n        \\<span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>VerifyCsrfToken</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n        \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Routing<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>SubstituteBindings</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token single-quoted-string string\">'api'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'throttle:api'</span><span class=\"token punctuation\">,</span>\n        \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Routing<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>SubstituteBindings</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Los grupos de middleware pueden asignarse a rutas y acciones de controlador utilizando la misma sintaxis que el middleware individual. Nuevamente, los grupos de middleware hacen que sea más conveniente asignar muchos middleware a una ruta a la vez:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'web'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'web'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Fuera de la caja, los grupos de middleware <code>web</code>y <code>api</code>se aplican automáticamente a los archivos <code>routes/web.php</code>y correspondientes de su aplicación <code>routes/api.php</code>por el <code>App\\Providers\\RouteServiceProvider</code>.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"sorting-middleware\"><span class=\"link\">Clasificación de middleware</span></h3>\n    <p>En raras ocasiones, es posible que necesite que su middleware se ejecute en un orden específico, pero no tenga control sobre su orden cuando se asignan a la ruta. En este caso, puede especificar su prioridad de middleware utilizando la <code>$middlewarePriority</code>propiedad de su <code>app/Http/Kernel.php</code>archivo. Es posible que esta propiedad no exista en su kernel HTTP de forma predeterminada. Si no existe, puede copiar su definición predeterminada a continuación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The priority-sorted list of middleware.\n *\n * This forces non-global middleware to always be in the given order.\n *\n * @var array\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$middlewarePriority</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Cookie<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>EncryptCookies</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Session<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>StartSession</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>View<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>ShareErrorsFromSession</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>AuthenticatesRequests</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Routing<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>ThrottleRequests</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Session<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>AuthenticateSession</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Routing<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>SubstituteBindings</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>Authorize</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"middleware-parameters\"><span class=\"link\">Parámetros de middleware</span></h2>\n    <p>El middleware también puede recibir parámetros adicionales. Por ejemplo, si su aplicación necesita verificar que el usuario autenticado tiene un \"rol\" determinado antes de realizar una acción determinada, puede crear un <code>EnsureUserHasRole</code>middleware que reciba un nombre de rol como argumento adicional.</p>\n    <p>Los parámetros de middleware adicionales se pasarán al middleware después del <code>$next</code>argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Closure</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">EnsureUserHasRole</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Handle the incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @param  string  $role\n     * @return mixed\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> Closure <span class=\"token variable\">$next</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$role</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasRole</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$role</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Redirect...</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Los parámetros del middleware se pueden especificar al definir la ruta separando el nombre y los parámetros del middleware con un <code>:</code>. Los parámetros múltiples deben estar delimitados por comas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/post/{id}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'role:editor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"terminable-middleware\"><span class=\"link\">Middleware terminable</span></h2>\n    <p>A veces, es posible que un middleware deba realizar algún trabajo después de que se haya enviado la respuesta HTTP al navegador. Si define un <code>terminate</code>método en su middleware y su servidor web está usando FastCGI, el <code>terminate</code>método se llamará automáticamente después de que se envíe la respuesta al navegador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Session<span class=\"token punctuation\">\\</span>Middleware</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Closure</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TerminatingMiddleware</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Handle an incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> Closure <span class=\"token variable\">$next</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Handle tasks after the response has been sent to the browser.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Illuminate\\Http\\Response  $response\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">terminate</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>El <code>terminate</code>método debe recibir tanto la solicitud como la respuesta. Una vez que haya definido un middleware terminable, debe agregarlo a la lista de rutas o middleware global en el <code>app/Http/Kernel.php</code>archivo.</p>\n    <p>Al llamar al <code>terminate</code>método en su middleware, Laravel resolverá una nueva instancia del middleware desde el <span class=\"link\">contenedor de servicios</span> . Si desea utilizar la misma instancia de middleware cuando se llaman los métodos <code>handle</code>y <code>terminate</code>, registre el middleware con el contenedor utilizando el <code>singleton</code>método del contenedor . Por lo general, esto debe hacerse en el <code>register</code>método de su <code>AppServiceProvider</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>TerminatingMiddleware</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Register any application services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">app</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">singleton</span><span class=\"token punctuation\">(</span>TerminatingMiddleware<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div>"
    },    
    {
        "title": "Protección CSRF",
        "subtitle": "CONCEPTOS BASICOS",
        "contenido": "<div>\n    <h1>Protección CSRF</h1>    \n    <h2 id=\"csrf-introduction\"><span class=\"link\">Introducción</span></h2>\n    <p>Las falsificaciones de solicitudes entre sitios son un tipo de exploit malicioso mediante el cual se ejecutan comandos no autorizados en nombre de un usuario autenticado. Afortunadamente, Laravel facilita la protección de su aplicación contra ataques de <span class=\"link\">falsificación de solicitudes entre sitios</span> (CSRF).</p>\n    \n    <h4 id=\"csrf-explanation\"><span class=\"link\">Una explicación de la vulnerabilidad</span></h4>\n    <p>En caso de que no esté familiarizado con las falsificaciones de solicitudes entre sitios, analicemos un ejemplo de cómo se puede aprovechar esta vulnerabilidad. Imagine que su aplicación tiene una <code>/user/email</code>ruta que acepta una <code>POST</code>solicitud para cambiar la dirección de correo electrónico del usuario autenticado. Lo más probable es que esta ruta espere que un <code>email</code>campo de entrada contenga la dirección de correo electrónico que el usuario desea comenzar a usar.</p>\n    <p>Sin la protección CSRF, un sitio web malintencionado podría crear un formulario HTML que apunte a la <code>/user/email</code>ruta de su aplicación y envíe la dirección de correo electrónico del usuario malintencionado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>form action<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"https://your-application.com/user/email\"</span> method<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"POST\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"email\"</span> value<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"malicious-email@example.com\"</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n    document<span class=\"token punctuation\">.</span>forms<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span></code></pre>\n    <p>Si el sitio web malicioso envía automáticamente el formulario cuando se carga la página, el usuario malicioso solo necesita atraer a un usuario desprevenido de su aplicación para que visite su sitio web y su dirección de correo electrónico se cambiará en su aplicación.</p>\n    <p>Para evitar esta vulnerabilidad, es necesario inspeccionar cada entrante <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, o <code>DELETE</code>solicitud de un valor sesión secreta que la aplicación maliciosa es incapaz de acceso.</p>\n    \n    <h2 id=\"preventing-csrf-requests\"><span class=\"link\">Prevención de solicitudes CSRF</span></h2>\n    <p>Laravel genera automáticamente un \"token\" CSRF para cada <span class=\"link\">sesión de usuario</span> activa administrada por la aplicación. Este token se utiliza para verificar que el usuario autenticado es la persona que realmente realiza las solicitudes a la aplicación. Dado que este token se almacena en la sesión del usuario y cambia cada vez que se regenera la sesión, una aplicación maliciosa no puede acceder a él.</p>\n    <p>Se puede acceder al token CSRF de la sesión actual a través de la sesión de la solicitud o mediante la <code>csrf_token</code>función auxiliar:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/token'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$token</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">token</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$token</span> <span class=\"token operator\">=</span> <span class=\"token function\">csrf_token</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Siempre que defina un formulario HTML \"POST\", \"PUT\", \"PATCH\" o \"DELETE\" en su aplicación, debe incluir un <code>_token</code>campo CSRF oculto en el formulario para que el middleware de protección CSRF pueda validar la solicitud. Para su comodidad, puede utilizar la <code>@csrf</code>directiva Blade para generar el campo de entrada del token oculto:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>form method<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"POST\"</span> action<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"/profile\"</span><span class=\"token operator\">&gt;</span>\n    @csrf\n\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> Equivalent to<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"hidden\"</span> name<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"_token\"</span> value<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"{{ csrf_token() }}\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">&gt;</span></code></pre>\n    <p>El <code>App\\Http\\Middleware\\VerifyCsrfToken</code> <span class=\"link\">middleware</span> , que se incluye en el <code>web</code>grupo de middleware de forma predeterminada, verificará automáticamente que el token en la entrada de la solicitud coincide con el token almacenado en la sesión. Cuando estos dos tokens coinciden, sabemos que el usuario autenticado es el que inicia la solicitud.</p>\n    \n    <h3 id=\"csrf-tokens-and-spas\"><span class=\"link\">Tokens CSRF y SPA</span></h3>\n    <p>Si está creando un SPA que utiliza Laravel como backend de API, debe consultar la <span class=\"link\">documentación</span> de <span class=\"link\">Laravel Sanctum</span> para obtener información sobre cómo autenticarse con su API y protegerse contra vulnerabilidades CSRF.</p>\n    \n    <h3 id=\"csrf-excluding-uris\"><span class=\"link\">Excluir URI de la protección CSRF</span></h3>\n    <p>A veces, es posible que desee excluir un conjunto de URI de la protección CSRF. Por ejemplo, si está utilizando <span class=\"link\">Stripe</span> para procesar pagos y está utilizando su sistema de webhook, deberá excluir la ruta del controlador de webhook de Stripe de la protección CSRF, ya que Stripe no sabrá qué token CSRF enviar a sus rutas.</p>\n    <p>Por lo general, debe colocar este tipo de rutas fuera del <code>web</code>grupo de middleware que se <code>App\\Providers\\RouteServiceProvider</code>aplica a todas las rutas del <code>routes/web.php</code>archivo. Sin embargo, también puede excluir las rutas agregando sus URI a la <code>$except</code>propiedad del <code>VerifyCsrfToken</code>middleware:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>VerifyCsrfToken</span> <span class=\"token keyword\">as</span> Middleware<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">VerifyCsrfToken</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Middleware</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The URIs that should be excluded from CSRF verification.\n     *\n     * @var array\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$except</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'stripe/*'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'http://example.com/foo/bar'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'http://example.com/foo/*'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Para mayor comodidad, el middleware CSRF se deshabilita automáticamente para todas las rutas cuando se <span class=\"link\">ejecutan pruebas</span> .</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"csrf-x-csrf-token\"><span class=\"link\">X-CSRF-TOKEN</span></h2>\n    <p>Además de comprobar el token CSRF como parámetro POST, el <code>App\\Http\\Middleware\\VerifyCsrfToken</code>middleware también comprobará el <code>X-CSRF-TOKEN</code>encabezado de la solicitud. Por ejemplo, podría almacenar el token en una <code>meta</code>etiqueta HTML :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"csrf-token\"</span> content<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"{{ csrf_token() }}\"</span><span class=\"token operator\">&gt;</span></code></pre>\n    <p>Luego, puede indicar a una biblioteca como jQuery que agregue automáticamente el token a todos los encabezados de solicitud. Esto proporciona una protección CSRF simple y conveniente para sus aplicaciones basadas en AJAX que utilizan tecnología JavaScript heredada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">$<span class=\"token punctuation\">.</span><span class=\"token function\">ajaxSetup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token single-quoted-string string\">'X-CSRF-TOKEN'</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'meta[name=\"csrf-token\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'content'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"csrf-x-xsrf-token\"><span class=\"link\">X-XSRF-TOKEN</span></h2>\n    <p>Laravel almacena el token CSRF actual en una <code>XSRF-TOKEN</code>cookie cifrada que se incluye con cada respuesta generada por el marco. Puede utilizar el valor de la cookie para configurar el <code>X-XSRF-TOKEN</code>encabezado de la solicitud.</p>\n    <p>Esta cookie se envía principalmente para la conveniencia del desarrollador, ya que algunos marcos y bibliotecas de JavaScript, como Angular y Axios, colocan automáticamente su valor en el <code>X-XSRF-TOKEN</code>encabezado de las solicitudes del mismo origen.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>De forma predeterminada, el <code>resources/js/bootstrap.js</code>archivo incluye la biblioteca HTTP de Axios que le enviará automáticamente el <code>X-XSRF-TOKEN</code>encabezado.</p></p></div>\n    </blockquote>\n</div>"
    },
    {
        "title": "Controladores",
        "subtitle": "CONCEPTOS BASICOS",
        "contenido": "<div>\n    <h1>Controladores</h1>    \n    <h2 id=\"introduction\"><span class=\"link\">Introducción</span></h2>\n    <p>En lugar de definir toda su lógica de manejo de solicitudes como cierres en sus archivos de ruta, es posible que desee organizar este comportamiento utilizando clases de \"controlador\". Los controladores pueden agrupar la lógica de manejo de solicitudes relacionadas en una sola clase. Por ejemplo, una <code>UserController</code>clase puede manejar todas las solicitudes entrantes relacionadas con los usuarios, lo que incluye mostrar, crear, actualizar y eliminar usuarios. De forma predeterminada, los controladores se almacenan en el <code>app/Http/Controllers</code>directorio.</p>\n    \n    <h2 id=\"writing-controllers\"><span class=\"link\">Controladores de escritura</span></h2>\n    \n    <h3 id=\"basic-controllers\"><span class=\"link\">Controladores básicos</span></h3>\n    <p>Echemos un vistazo a un ejemplo de un controlador básico. Tenga en cuenta que el controlador extiende la clase de controlador base incluida con Laravel <code>App\\Http\\Controllers\\Controller</code>::</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Show the profile for a given user.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\View\\View\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user.profile'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">findOrFail</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Puede definir una ruta a este método de controlador así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>UserController</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/{id}'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>UserController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'show'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Cuando una solicitud entrante coincide con el URI de ruta especificado, se invocará el <code>show</code>método de la <code>App\\Http\\Controllers\\UserController</code>clase y los parámetros de ruta se pasarán al método.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>No es <strong>necesario</strong> que los controladores amplíen una clase base. Sin embargo, no tendrá acceso a funciones convenientes como los métodos <code>middleware</code>y <code>authorize</code>.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"single-action-controllers\"><span class=\"link\">Controladores de acción simple</span></h3>\n    <p>Si una acción de controlador es particularmente compleja, puede que le resulte conveniente dedicar una clase de controlador completa a esa única acción. Para lograr esto, puede definir un solo <code>__invoke</code>método dentro del controlador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProvisionServer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Provision a new web server.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Al registrar rutas para controladores de acción única, no es necesario especificar un método de controlador. En su lugar, simplemente puede pasar el nombre del controlador al enrutador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>ProvisionServer</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/server'</span><span class=\"token punctuation\">,</span> ProvisionServer<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede generar un controlador invocable utilizando la <code>--invokable</code>opción del <code>make:controller</code>comando Artisan:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>controller ProvisionServer <span class=\"token operator\">--</span>invokable</code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Los stubs del controlador se pueden personalizar mediante la <span class=\"link\">publicación de stub</span> .</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"controller-middleware\"><span class=\"link\">Middleware del controlador</span></h2>\n    <p><span class=\"link\"></span>Se puede asignar <span class=\"link\">middleware</span> a las rutas del controlador en sus archivos de ruta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'profile'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>UserController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'show'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'auth'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>O puede que le resulte conveniente especificar middleware dentro del constructor de su controlador. Usando el <code>middleware</code>método dentro del constructor de su controlador, puede asignar middleware a las acciones del controlador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Instantiate a new controller instance.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'auth'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'log'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'subscribed'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">except</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'store'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Los controladores también le permiten registrar middleware mediante un cierre. Esto proporciona una forma conveniente de definir un middleware en línea para un solo controlador sin definir una clase de middleware completa:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"resource-controllers\"><span class=\"link\">Controladores de recursos</span></h2>\n    <p>Si piensa en cada modelo de Eloquent en su aplicación como un \"recurso\", es típico realizar los mismos conjuntos de acciones contra cada recurso en su aplicación. Por ejemplo, imagine que su aplicación contiene un <code>Photo</code>modelo y un <code>Movie</code>modelo. Es probable que los usuarios puedan crear, leer, actualizar o eliminar estos recursos.</p>\n    <p>Debido a este caso de uso común, el enrutamiento de recursos de Laravel asigna las rutas típicas de creación, lectura, actualización y eliminación (\"CRUD\") a un controlador con una sola línea de código. Para comenzar, podemos usar la opción <code>make:controller</code>del comando Artisan <code>--resource</code>para crear rápidamente un controlador para manejar estas acciones:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>controller PhotoController <span class=\"token operator\">--</span>resource</code></pre>\n    <p>Este comando generará un controlador en <code>app/Http/Controllers/PhotoController.php</code>. El controlador contendrá un método para cada una de las operaciones de recursos disponibles. A continuación, puede registrar una ruta de recursos que apunte al controlador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>PhotoController</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'photos'</span><span class=\"token punctuation\">,</span> PhotoController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Esta declaración de ruta única crea múltiples rutas para manejar una variedad de acciones en el recurso. El controlador generado ya tendrá métodos stubped para cada una de estas acciones. Recuerde, siempre puede obtener una descripción general rápida de las rutas de su aplicación ejecutando el <code>route:list</code>comando Artisan.</p>\n    <p>Incluso puede registrar muchos controladores de recursos a la vez pasando una matriz al <code>resources</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">resources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'photos'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> PhotoController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'posts'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> PostController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"actions-handled-by-resource-controller\"><span class=\"link\">Acciones manejadas por el controlador de recursos</span></h4>\n    <table>\n        <thead>\n        <tr>\n            <th>Verbo</th>\n            <th>URI</th>\n            <th>Acción</th>\n            <th>Nombre de ruta</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td>OBTENER</td>\n            <td><code>/photos</code></td>\n            <td>índice</td>\n            <td>photos.index</td>\n        </tr>\n        <tr>\n            <td>OBTENER</td>\n            <td><code>/photos/create</code></td>\n            <td>crear</td>\n            <td>fotos.crear</td>\n        </tr>\n        <tr>\n            <td>CORREO</td>\n            <td><code>/photos</code></td>\n            <td>Tienda</td>\n            <td>photos.store</td>\n        </tr>\n        <tr>\n            <td>OBTENER</td>\n            <td><code>/photos/{photo}</code></td>\n            <td>show</td>\n            <td>fotos.show</td>\n        </tr>\n        <tr>\n            <td>OBTENER</td>\n            <td><code>/photos/{photo}/edit</code></td>\n            <td>editar</td>\n            <td>fotos.editar</td>\n        </tr>\n        <tr>\n            <td>PONER / PARCHE</td>\n            <td><code>/photos/{photo}</code></td>\n            <td>actualizar</td>\n            <td>photos.update</td>\n        </tr>\n        <tr>\n            <td>ELIMINAR</td>\n            <td><code>/photos/{photo}</code></td>\n            <td>destruir</td>\n            <td>fotos.destruir</td>\n        </tr>\n        </tbody>\n    </table>\n    \n    <h4><span class=\"link\">Personalización del comportamiento del modelo faltante</span></h4>\n    <p>Normalmente, se generará una respuesta HTTP 404 si no se encuentra un modelo de recurso vinculado implícitamente. Sin embargo, puede personalizar este comportamiento llamando al <code>missing</code>método al definir su ruta de recursos. El <code>missing</code>método acepta un cierre que se invocará si no se puede encontrar un modelo enlazado implícitamente para ninguna de las rutas del recurso:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>PhotoController</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Redirect</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'photos'</span><span class=\"token punctuation\">,</span> PhotoController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">missing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Redirect<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'photos.index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"specifying-the-resource-model\"><span class=\"link\">Especificando el modelo de recursos</span></h4>\n    <p>Si está utilizando la <span class=\"link\">vinculación del modelo de ruta</span> y le gustaría que los métodos del controlador de recursos escribieran una sugerencia de una instancia de modelo, puede usar la <code>--model</code>opción al generar el controlador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>controller PhotoController <span class=\"token operator\">--</span>resource <span class=\"token operator\">--</span>model<span class=\"token operator\">=</span>Photo</code></pre>\n    \n    <h3 id=\"restful-partial-resource-routes\"><span class=\"link\">Rutas de recursos parciales</span></h3>\n    <p>Al declarar una ruta de recursos, puede especificar un subconjunto de acciones que el controlador debe manejar en lugar del conjunto completo de acciones predeterminadas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>PhotoController</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'photos'</span><span class=\"token punctuation\">,</span> PhotoController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'show'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'photos'</span><span class=\"token punctuation\">,</span> PhotoController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">except</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'create'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'store'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'update'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'destroy'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"api-resource-routes\"><span class=\"link\">Rutas de recursos de API</span></h4>\n    <p>Al declarar rutas de recursos que serán consumidas por las API, normalmente querrá excluir rutas que presenten plantillas HTML como <code>create</code>y <code>edit</code>. Por conveniencia, puede utilizar el <code>apiResource</code>método para excluir automáticamente estas dos rutas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>PhotoController</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">apiResource</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'photos'</span><span class=\"token punctuation\">,</span> PhotoController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede registrar muchos controladores de recursos de API a la vez pasando una matriz al <code>apiResources</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>PhotoController</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>PostController</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">apiResources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'photos'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> PhotoController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'posts'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> PostController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Para generar rápidamente un controlador de recursos de API que no incluya los métodos <code>create</code>o <code>edit</code>, use el <code>--api</code>conmutador al ejecutar el <code>make:controller</code>comando:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>controller PhotoController <span class=\"token operator\">--</span>api</code></pre>\n    \n    <h3 id=\"restful-nested-resources\"><span class=\"link\">Recursos anidados</span></h3>\n    <p>A veces, es posible que deba definir rutas a un recurso anidado. Por ejemplo, un recurso de fotografía puede tener varios comentarios que se pueden adjuntar a la fotografía. Para anidar los controladores de recursos, puede usar la notación \"punto\" en su declaración de ruta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>PhotoCommentController</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'photos.comments'</span><span class=\"token punctuation\">,</span> PhotoCommentController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Esta ruta registrará un recurso anidado al que se puede acceder con URI como los siguientes:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">/</span>photos<span class=\"token operator\">/</span><span class=\"token punctuation\">{</span>photo<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>comments<span class=\"token operator\">/</span><span class=\"token punctuation\">{</span>comment<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"scoping-nested-resources\"><span class=\"link\">Alcance de los recursos anidados</span></h4>\n    <p>La función de <span class=\"link\">enlace de modelo implícito</span> de Laravel puede abarcar automáticamente enlaces anidados de modo que se confirme que el modelo hijo resuelto pertenece al modelo padre. Al usar el <code>scoped</code>método al definir su recurso anidado, puede habilitar el alcance automático e indicar a Laravel qué campo debe recuperar el recurso secundario. Para obtener más información sobre cómo lograr esto, consulte la documentación sobre el <span class=\"link\">alcance de las rutas de recursos</span> .</p>\n    \n    <h4 id=\"shallow-nesting\"><span class=\"link\">Anidamiento poco profundo</span></h4>\n    <p>A menudo, no es del todo necesario tener los identificadores principal y secundario dentro de un URI, ya que el identificador secundario ya es un identificador único. Cuando utilice identificadores únicos, como claves primarias de incremento automático para identificar sus modelos en segmentos de URI, puede optar por utilizar \"anidación superficial\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>CommentController</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'photos.comments'</span><span class=\"token punctuation\">,</span> CommentController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">shallow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Esta definición de ruta definirá las siguientes rutas:</p>\n    <table>\n        <thead>\n        <tr>\n            <th>Verbo</th>\n            <th>URI</th>\n            <th>Acción</th>\n            <th>Nombre de ruta</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td>OBTENER</td>\n            <td><code>/photos/{photo}/comments</code></td>\n            <td>índice</td>\n            <td>photos.comments.index</td>\n        </tr>\n        <tr>\n            <td>OBTENER</td>\n            <td><code>/photos/{photo}/comments/create</code></td>\n            <td>crear</td>\n            <td>photos.comments.create</td>\n        </tr>\n        <tr>\n            <td>CORREO</td>\n            <td><code>/photos/{photo}/comments</code></td>\n            <td>Tienda</td>\n            <td>photos.comments.store</td>\n        </tr>\n        <tr>\n            <td>OBTENER</td>\n            <td><code>/comments/{comment}</code></td>\n            <td>show</td>\n            <td>comentarios mostrar</td>\n        </tr>\n        <tr>\n            <td>OBTENER</td>\n            <td><code>/comments/{comment}/edit</code></td>\n            <td>editar</td>\n            <td>comentarios.editar</td>\n        </tr>\n        <tr>\n            <td>PONER / PARCHE</td>\n            <td><code>/comments/{comment}</code></td>\n            <td>actualizar</td>\n            <td>comentarios.update</td>\n        </tr>\n        <tr>\n            <td>ELIMINAR</td>\n            <td><code>/comments/{comment}</code></td>\n            <td>destruir</td>\n            <td>comentarios.destruir</td>\n        </tr>\n        </tbody>\n    </table>\n    \n    <h3 id=\"restful-naming-resource-routes\"><span class=\"link\">Nombrar rutas de recursos</span></h3>\n    <p>De forma predeterminada, todas las acciones del controlador de recursos tienen un nombre de ruta; sin embargo, puede anular estos nombres pasando una <code>names</code>matriz con los nombres de ruta que desee:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>PhotoController</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'photos'</span><span class=\"token punctuation\">,</span> PhotoController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">names</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'create'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'photos.build'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"restful-naming-resource-route-parameters\"><span class=\"link\">Nombrar parámetros de ruta de recursos</span></h3>\n    <p>De forma predeterminada, <code>Route::resource</code>creará los parámetros de ruta para sus rutas de recursos según la versión \"singularizada\" del nombre del recurso. Puede anular esto fácilmente por recurso utilizando el <code>parameters</code>método. La matriz que se pasa al <code>parameters</code>método debe ser una matriz asociativa de nombres de recursos y nombres de parámetros:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>AdminUserController</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> AdminUserController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">parameters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'users'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'admin_user'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El ejemplo anterior genera el siguiente URI para la <code>show</code>ruta del recurso :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">/</span>users<span class=\"token operator\">/</span><span class=\"token punctuation\">{</span>admin_user<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"restful-scoping-resource-routes\"><span class=\"link\">Rutas de recursos de alcance</span></h3>\n    <p>La función de <span class=\"link\">enlace de modelo implícito con alcance</span> de Laravel puede <span class=\"link\">abarcar</span> automáticamente enlaces anidados de modo que se confirme que el modelo hijo resuelto pertenece al modelo padre. Al usar el <code>scoped</code>método al definir su recurso anidado, puede habilitar el alcance automático e indicar a Laravel qué campo debe recuperar el recurso secundario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>PhotoCommentController</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'photos.comments'</span><span class=\"token punctuation\">,</span> PhotoCommentController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">scoped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'comment'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'slug'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Esta ruta registrará un recurso anidado con ámbito al que se puede acceder con URI como los siguientes:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">/</span>photos<span class=\"token operator\">/</span><span class=\"token punctuation\">{</span>photo<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>comments<span class=\"token operator\">/</span><span class=\"token punctuation\">{</span>comment<span class=\"token punctuation\">:</span>slug<span class=\"token punctuation\">}</span></code></pre>\n    <p>Cuando se usa un enlace implícito con clave personalizada como un parámetro de ruta anidado, Laravel buscará automáticamente el alcance de la consulta para recuperar el modelo anidado por su padre usando convenciones para adivinar el nombre de la relación en el padre. En este caso, se asumirá que el <code>Photo</code>modelo tiene una relación denominada <code>comments</code>(el plural del nombre del parámetro de ruta) que se puede utilizar para recuperar el <code>Comment</code>modelo.</p>\n    \n    <h3 id=\"restful-localizing-resource-uris\"><span class=\"link\">Localización de URI de recursos</span></h3>\n    <p>De forma predeterminada, <code>Route::resource</code>creará URI de recursos utilizando verbos en inglés. Si necesita localizar los verbos de acción <code>create</code>y <code>edit</code>, puede usar el <code>Route::resourceVerbs</code>método. Esto se puede hacer al comienzo del <code>boot</code>método dentro de su aplicación <code>App\\Providers\\RouteServiceProvider</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Define your route model bindings, pattern filters, etc.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">resourceVerbs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'create'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'crear'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'edit'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'editar'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Una vez que se han personalizado los verbos, un registro de ruta de recursos como, por ejemplo <code>Route::resource('fotos', PhotoController::class)</code>, producirá los siguientes URI:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">/</span>fotos<span class=\"token operator\">/</span>crear\n\n<span class=\"token operator\">/</span>fotos<span class=\"token operator\">/</span><span class=\"token punctuation\">{</span>foto<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span>editar</code></pre>\n    \n    <h3 id=\"restful-supplementing-resource-controllers\"><span class=\"link\">Complementando controladores de recursos</span></h3>\n    <p>Si necesita agregar rutas adicionales a un controlador de recursos más allá del conjunto predeterminado de rutas de recursos, debe definir esas rutas antes de llamar al <code>Route::resource</code>método; de lo contrario, las rutas definidas por el <code>resource</code>método pueden tener precedencia involuntariamente sobre sus rutas complementarias:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controller<span class=\"token punctuation\">\\</span>PhotoController</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/photos/popular'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>PhotoController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'popular'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">resource</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'photos'</span><span class=\"token punctuation\">,</span> PhotoController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Recuerde mantener sus controladores enfocados. Si encuentra que necesita métodos de forma rutinaria fuera del conjunto típico de acciones de recursos, considere dividir su controlador en dos controladores más pequeños.</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"dependency-injection-and-controllers\"><span class=\"link\">Inyección de dependencia y controladores</span></h2>\n    \n    <h4 id=\"constructor-injection\"><span class=\"link\">Inyección de constructor</span></h4>\n    <p>El <span class=\"link\">contenedor de servicios de</span> Laravel se utiliza para resolver todos los controladores de Laravel. Como resultado, puede escribir sugerencias sobre cualquier dependencia que su controlador pueda necesitar en su constructor. Las dependencias declaradas se resolverán e inyectarán automáticamente en la instancia del controlador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Repositories<span class=\"token punctuation\">\\</span>UserRepository</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The user repository instance.\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$users</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Create a new controller instance.\n     *\n     * @param  \\App\\Repositories\\UserRepository  $users\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span>UserRepository <span class=\"token variable\">$users</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">users</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$users</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h4 id=\"method-injection\"><span class=\"link\">Método de inyección</span></h4>\n    <p>Además de la inyección del constructor, también puede escribir dependencias de sugerencia en los métodos de su controlador. Un caso de uso común para la inyección de métodos es inyectar la <code>Illuminate\\Http\\Request</code>instancia en los métodos de su controlador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Store a new user.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">store</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Si su método de controlador también espera la entrada de un parámetro de ruta, enumere sus argumentos de ruta después de sus otras dependencias. Por ejemplo, si su ruta se define así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>UserController</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/{id}'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>UserController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'update'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Aún puede escribir sugerencias <code>Illuminate\\Http\\Request</code>y acceder a su <code>id</code>parámetro definiendo su método de controlador de la siguiente manera:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Update the given user.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  string  $id\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n</div>"
    },
    {
        "title": "Peticiones",
        "subtitle": "CONCEPTOS BASICOS",
        "contenido": "<div>\n    <h1>Solicitudes HTTP</h1>    \n    <h2 id=\"introduction\"><span class=\"link\">Introducción</span></h2>\n    <p>La <code>Illuminate\\Http\\Request</code>clase de Laravel proporciona una forma orientada a objetos para interactuar con la solicitud HTTP actual que está manejando su aplicación, así como para recuperar la entrada, las cookies y los archivos que se enviaron con la solicitud.</p>\n    \n    <h2 id=\"interacting-with-the-request\"><span class=\"link\">Interactuar con la solicitud</span></h2>\n    \n    <h3 id=\"accessing-the-request\"><span class=\"link\">Accediendo a la solicitud</span></h3>\n    <p>Para obtener una instancia de la solicitud HTTP actual a través de la inyección de dependencia, debe escribir la <code>Illuminate\\Http\\Request</code>clase en el cierre de su ruta o método de controlador. La instancia de solicitud entrante será inyectada automáticamente por el <span class=\"link\">contenedor de servicios de</span> Laravel :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Store a new user.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">store</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Como se mencionó, también puede escribir sugerencias a la <code>Illuminate\\Http\\Request</code>clase en un cierre de ruta. El contenedor de servicios inyectará automáticamente la solicitud entrante en el cierre cuando se ejecute:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"dependency-injection-route-parameters\"><span class=\"link\">Inyección de dependencia y parámetros de ruta</span></h4>\n    <p>Si su método de controlador también espera la entrada de un parámetro de ruta, debe enumerar sus parámetros de ruta después de sus otras dependencias. Por ejemplo, si su ruta se define así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>UserController</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/{id}'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>UserController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'update'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Aún puede escribir-insinuar <code>Illuminate\\Http\\Request</code>y acceder a su <code>id</code>parámetro de ruta definiendo su método de controlador de la siguiente manera:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Update the specified user.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  string  $id\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h3 id=\"request-path-and-method\"><span class=\"link\">Ruta de solicitud y método</span></h3>\n    <p>La <code>Illuminate\\Http\\Request</code>instancia proporciona una variedad de métodos para examinar la solicitud HTTP entrante y extiende la <code>Symfony\\Component\\HttpFoundation\\Request</code>clase. Discutiremos algunos de los métodos más importantes a continuación.</p>\n    \n    <h4 id=\"retrieving-the-request-path\"><span class=\"link\">Recuperando la ruta de solicitud</span></h4>\n    <p>El <code>path</code>método devuelve la información de la ruta de la solicitud. Entonces, si la solicitud entrante está dirigida a <code>http://example.com/foo/bar</code>, el <code>path</code>método devolverá <code>foo/bar</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$uri</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"inspecting-the-request-path\"><span class=\"link\">Inspección de la ruta / ruta de solicitud</span></h4>\n    <p>El <code>is</code>método le permite verificar que la ruta de la solicitud entrante coincida con un patrón determinado. Puede utilizar el <code>*</code>carácter como comodín cuando utilice este método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'admin/*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Con el <code>routeIs</code>método, puede determinar si la solicitud entrante coincide con una <span class=\"link\">ruta con nombre</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">routeIs</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'admin.*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"retrieving-the-request-url\"><span class=\"link\">Recuperando la URL de la solicitud</span></h4>\n    <p>Para recuperar la URL completa de la solicitud entrante, puede utilizar los métodos <code>url</code>o <code>fullUrl</code>. El <code>url</code>método devolverá la URL sin la cadena de consulta, mientras que el <code>fullUrl</code>método incluye la cadena de consulta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$urlWithQueryString</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">fullUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea agregar datos de cadena de consulta a la URL actual, puede llamar al <code>fullUrlWithQuery</code>método. Este método fusiona la matriz dada de variables de cadena de consulta con la cadena de consulta actual:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">fullUrlWithQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'phone'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"retrieving-the-request-method\"><span class=\"link\">Recuperando el método de solicitud</span></h4>\n    <p>El <code>method</code>método devolverá el verbo HTTP para la solicitud. Puede utilizar el <code>isMethod</code>método para verificar que el verbo HTTP coincide con una cadena determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$method</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isMethod</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'post'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"request-headers\"><span class=\"link\">Solicitar encabezados</span></h3>\n    <p>Puede recuperar un encabezado de solicitud de la <code>Illuminate\\Http\\Request</code>instancia utilizando el <code>header</code>método. Si el encabezado no está presente en la solicitud, <code>null</code>se devolverá. Sin embargo, el <code>header</code>método acepta un segundo argumento opcional que se devolverá si el encabezado no está presente en la solicitud:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'X-Header-Name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'X-Header-Name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'default'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>hasHeader</code>método puede usarse para determinar si la solicitud contiene un encabezado determinado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasHeader</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'X-Header-Name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Por conveniencia, el <code>bearerToken</code>método puede usarse para recuperar un token de portador del <code>Authorization</code>encabezado. Si no hay tal encabezado, se devolverá una cadena vacía:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$token</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">bearerToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"request-ip-address\"><span class=\"link\">Solicitar dirección IP</span></h3>\n    <p>El <code>ip</code>método puede usarse para recuperar la dirección IP del cliente que realizó la solicitud a su aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$ipAddress</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"content-negotiation\"><span class=\"link\">Negociación de contenido</span></h3>\n    <p>Laravel proporciona varios métodos para inspeccionar los tipos de contenido solicitados de la solicitud entrante a través del <code>Accept</code>encabezado. Primero, el <code>getAcceptableContentTypes</code>método devolverá una matriz que contiene todos los tipos de contenido aceptados por la solicitud:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$contentTypes</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getAcceptableContentTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>accepts</code>método acepta una variedad de tipos de contenido y devuelve <code>true</code>si la solicitud acepta alguno de los tipos de contenido. De lo contrario, <code>false</code>se devolverá:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">accepts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'text/html'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'application/json'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Puede utilizar el <code>prefers</code>método para determinar qué tipo de contenido de una determinada matriz de tipos de contenido es el más preferido por la solicitud. Si la solicitud no acepta ninguno de los tipos de contenido proporcionados, <code>null</code>se devolverá:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$preferred</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">prefers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'text/html'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'application/json'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Dado que muchas aplicaciones solo sirven HTML o JSON, puede usar el <code>expectsJson</code>método para determinar rápidamente si la solicitud entrante espera una respuesta JSON:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">expectsJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"psr7-requests\"><span class=\"link\">Solicitudes PSR-7</span></h3>\n    <p>El <span class=\"link\">estándar PSR-7</span> especifica interfaces para mensajes HTTP, incluidas solicitudes y respuestas. Si desea obtener una instancia de una solicitud de PSR-7 en lugar de una solicitud de Laravel, primero deberá instalar algunas bibliotecas. Laravel usa el componente <em>Symfony HTTP Message Bridge</em> para convertir las solicitudes y respuestas típicas de Laravel en implementaciones compatibles con PSR-7:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">composer <span class=\"token keyword\">require</span> symfony<span class=\"token operator\">/</span>psr<span class=\"token operator\">-</span>http<span class=\"token operator\">-</span>message<span class=\"token operator\">-</span>bridge\ncomposer <span class=\"token keyword\">require</span> nyholm<span class=\"token operator\">/</span>psr7</code></pre>\n    <p>Una vez que haya instalado estas bibliotecas, puede obtener una solicitud PSR-7 al indicar el tipo de la interfaz de solicitud en el cierre de su ruta o método del controlador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Psr<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Message<span class=\"token punctuation\">\\</span>ServerRequestInterface</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>ServerRequestInterface <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p> Si devuelve una instancia de respuesta de PSR-7 desde una ruta o controlador, se convertirá automáticamente de nuevo a una instancia de respuesta de Laravel y será mostrada por el marco.</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"input\"><span class=\"link\">Aporte</span></h2>\n    \n    <h3 id=\"retrieving-input\"><span class=\"link\">Recuperando entrada</span></h3>\n    \n    <h4 id=\"retrieving-all-input-data\"><span class=\"link\">Recuperar todos los datos de entrada</span></h4>\n    <p>Puede recuperar todos los datos de entrada de la solicitud entrante <code>array</code>utilizando el <code>all</code>método. Este método puede usarse independientemente de si la solicitud entrante es de un formulario HTML o es una solicitud XHR:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$input</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"retrieving-an-input-value\"><span class=\"link\">Recuperar un valor de entrada</span></h4>\n    <p>Usando algunos métodos simples, puede acceder a toda la entrada del usuario desde su <code>Illuminate\\Http\\Request</code>instancia sin preocuparse por qué verbo HTTP se usó para la solicitud. Independientemente del verbo HTTP, el <code>input</code>método se puede utilizar para recuperar la entrada del usuario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede pasar un valor predeterminado como segundo argumento del <code>input</code>método. Este valor se devolverá si el valor de entrada solicitado no está presente en la solicitud:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Sally'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Cuando trabaje con formularios que contienen entradas de matriz, use la notación \"punto\" para acceder a las matrices:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'products.0.name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$names</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'products.*.name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede llamar al <code>input</code>método sin ningún argumento para recuperar todos los valores de entrada como una matriz asociativa:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$input</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"retrieving-input-from-the-query-string\"><span class=\"link\">Recuperando la entrada de la cadena de consulta</span></h4>\n    <p>Si bien el <code>input</code>método recupera valores de toda la carga útil de la solicitud (incluida la cadena de consulta), el <code>query</code>método solo recuperará valores de la cadena de consulta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si los datos del valor de la cadena de consulta solicitada no están presentes, se devolverá el segundo argumento de este método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Helen'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede llamar al <code>query</code>método sin ningún argumento para recuperar todos los valores de la cadena de consulta como una matriz asociativa:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$query</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"retrieving-json-input-values\"><span class=\"link\">Recuperar valores de entrada JSON</span></h4>\n    <p>Al enviar solicitudes JSON a su aplicación, puede acceder a los datos JSON a través del <code>input</code>método siempre que el <code>Content-Type</code>encabezado de la solicitud esté configurado correctamente en <code>application/json</code>. Incluso puede usar la sintaxis de \"puntos\" para recuperar valores que están anidados dentro de matrices JSON:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user.name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"retrieving-boolean-input-values\"><span class=\"link\">Recuperar valores de entrada booleanos</span></h4>\n    <p>Cuando se trata de elementos HTML como casillas de verificación, su aplicación puede recibir valores \"verdaderos\" que en realidad son cadenas. Por ejemplo, \"verdadero\" o \"activado\". Por conveniencia, puede usar el <code>boolean</code>método para recuperar estos valores como booleanos. El <code>boolean</code>método devuelve <code>true</code>1, \"1\", verdadero, \"verdadero\", \"encendido\" y \"sí\". Todos los demás valores devolverán <code>false</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$archived</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">boolean</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'archived'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"retrieving-input-via-dynamic-properties\"><span class=\"link\">Recuperación de entrada a través de propiedades dinámicas</span></h4>\n    <p>También puede acceder a la entrada del usuario utilizando propiedades dinámicas en la <code>Illuminate\\Http\\Request</code>instancia. Por ejemplo, si uno de los formularios de su aplicación contiene un <code>name</code>campo, puede acceder al valor del campo así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Al usar propiedades dinámicas, Laravel primero buscará el valor del parámetro en la carga útil de la solicitud. Si no está presente, Laravel buscará el campo en los parámetros de la ruta coincidente.</p>\n    \n    <h4 id=\"retrieving-a-portion-of-the-input-data\"><span class=\"link\">Recuperar una parte de los datos de entrada</span></h4>\n    <p>Si necesita recuperar un subconjunto de los datos de entrada, puede utilizar los métodos <code>only</code>y <code>except</code>. Ambos métodos aceptan una <code>array</code>lista de argumentos única o dinámica:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$input</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'username'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$input</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'username'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$input</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">except</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'credit_card'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$input</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">except</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'credit_card'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>El <code>only</code>método devuelve todos los pares clave / valor que solicitas; sin embargo, no devolverá pares clave / valor que no estén presentes en la solicitud.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"determining-if-input-is-present\"><span class=\"link\">Determinar si la entrada está presente</span></h3>\n    <p>Puede usar el <code>has</code>método para determinar si hay un valor presente en la solicitud. El <code>has</code>método devuelve <code>true</code>si el valor está presente en la solicitud:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Cuando se le da una matriz, el <code>has</code>método determinará si todos los valores especificados están presentes:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>El <code>whenHas</code>método ejecutará el cierre dado si hay un valor presente en la solicitud:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whenHas</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>hasAny</code>método devuelve <code>true</code>si alguno de los valores especificados está presente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasAny</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Si desea determinar si un valor está presente en la solicitud y no está vacío, puede usar el <code>filled</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">filled</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>El <code>whenFilled</code>método ejecutará el cierre dado si hay un valor presente en la solicitud y no está vacío:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whenFilled</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Para determinar si una clave determinada está ausente de la solicitud, puede utilizar el <code>missing</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">missing</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"old-input\"><span class=\"link\">Entrada antigua</span></h3>\n    <p>Laravel le permite mantener la entrada de una solicitud durante la siguiente solicitud. Esta función es particularmente útil para rellenar formularios después de detectar errores de validación. Sin embargo, si está utilizando las <span class=\"link\">funciones de validación</span> incluidas en Laravel , es posible que no necesite utilizar manualmente estos métodos de actualización de entrada de sesión directamente, ya que algunas de las funciones de validación integradas de Laravel los llamarán automáticamente.</p>\n    \n    <h4 id=\"flashing-input-to-the-session\"><span class=\"link\">Entrada intermitente a la sesión</span></h4>\n    <p>El <code>flash</code>método de la <code>Illuminate\\Http\\Request</code>clase mostrará la entrada actual a la <span class=\"link\">sesión</span> para que esté disponible durante la próxima solicitud del usuario a la aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">flash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede utilizar los métodos <code>flashOnly</code>y <code>flashExcept</code>para actualizar un subconjunto de los datos de la solicitud a la sesión. Estos métodos son útiles para mantener la información confidencial, como contraseñas, fuera de la sesión:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">flashOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'username'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">flashExcept</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"flashing-input-then-redirecting\"><span class=\"link\">Entrada intermitente y luego redireccionamiento</span></h4>\n    <p>Dado que a menudo querrá flashear la entrada a la sesión y luego redirigir a la página anterior, puede encadenar fácilmente el parpadeo de entrada en una redirección utilizando el <code>withInput</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'form'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user.create'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'form'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withInput</span><span class=\"token punctuation\">(</span>\n    <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">except</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'password'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"retrieving-old-input\"><span class=\"link\">Recuperando entrada antigua</span></h4>\n    <p>Para recuperar la entrada flasheada de la solicitud anterior, invoque el <code>old</code>método en una instancia de <code>Illuminate\\Http\\Request</code>. El <code>old</code>método extraerá los datos de entrada previamente mostrados de la <span class=\"link\">sesión</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">old</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Laravel también proporciona un <code>old</code>ayudante global . Si está mostrando una entrada antigua dentro de una <span class=\"link\">plantilla Blade</span> , es más conveniente usar el <code>old</code>asistente para volver a llenar el formulario. Si no existe una entrada anterior para el campo dado, <code>null</code>se devolverá:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"username\"</span> value<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"{{ old('username') }}\"</span><span class=\"token operator\">&gt;</span></code></pre>\n    \n    <h3 id=\"cookies\"><span class=\"link\">Galletas</span></h3>\n    \n    <h4 id=\"retrieving-cookies-from-requests\"><span class=\"link\">Recuperación de cookies de solicitudes</span></h4>\n    <p>Todas las cookies creadas por el marco de Laravel están encriptadas y firmadas con un código de autenticación, lo que significa que se considerarán inválidas si el cliente las ha cambiado. Para recuperar un valor de cookie de la solicitud, use el <code>cookie</code>método en una <code>Illuminate\\Http\\Request</code>instancia:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"input-trimming-and-normalization\"><span class=\"link\">Recorte y normalización de entrada</span></h2>\n    <p>De forma predeterminada, Laravel incluye el middleware <code>App\\Http\\Middleware\\TrimStrings</code>y <code>App\\Http\\Middleware\\ConvertEmptyStringsToNull</code>en la pila de middleware global de su aplicación. Estos middleware se enumeran en la pila de middleware global por <code>App\\Http\\Kernel</code>clase. Este middleware recortará automáticamente todos los campos de cadena entrantes en la solicitud, así como también convertirá cualquier campo de cadena vacío a <code>null</code>. Esto le permite no tener que preocuparse por estos problemas de normalización en sus rutas y controladores.</p>\n    <p>Si desea deshabilitar este comportamiento, puede eliminar los dos middleware de la pila de middleware de su aplicación eliminándolos de la <code>$middleware</code>propiedad de su <code>App\\Http\\Kernel</code>clase.</p>\n    \n    <h2 id=\"files\"><span class=\"link\">Archivos</span></h2>\n    \n    <h3 id=\"retrieving-uploaded-files\"><span class=\"link\">Recuperando archivos cargados</span></h3>\n    <p>Puede recuperar archivos cargados desde una <code>Illuminate\\Http\\Request</code>instancia usando el <code>file</code>método o usando propiedades dinámicas. El <code>file</code>método devuelve una instancia de la <code>Illuminate\\Http\\UploadedFile</code>clase, que extiende la <code>SplFileInfo</code>clase PHP y proporciona una variedad de métodos para interactuar con el archivo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'photo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">photo</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede determinar si un archivo está presente en la solicitud utilizando el <code>hasFile</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasFile</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'photo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"validating-successful-uploads\"><span class=\"link\">Validación de cargas exitosas</span></h4>\n    <p>Además de verificar si el archivo está presente, puede verificar que no hubo problemas para cargar el archivo a través del <code>isValid</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'photo'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"file-paths-extensions\"><span class=\"link\">Rutas de archivo y extensiones</span></h4>\n    <p>La <code>UploadedFile</code>clase también contiene métodos para acceder a la ruta completa del archivo y su extensión. El <code>extension</code>método intentará adivinar la extensión del archivo basándose en su contenido. Esta extensión puede ser diferente de la extensión proporcionada por el cliente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">photo</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$extension</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">photo</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">extension</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"other-file-methods\"><span class=\"link\">Otros métodos de archivo</span></h4>\n    <p>Hay una variedad de otros métodos disponibles en <code>UploadedFile</code>instancias. Consulte la <span class=\"link\">documentación de</span> la <span class=\"link\">API de la clase</span> para obtener más información sobre estos métodos.</p>\n    \n    <h3 id=\"storing-uploaded-files\"><span class=\"link\">Almacenamiento de archivos cargados</span></h3>\n    <p>Para almacenar un archivo cargado, normalmente utilizará uno de sus <span class=\"link\">sistemas de archivos</span> configurados . La <code>UploadedFile</code>clase tiene un <code>store</code>método que moverá un archivo cargado a uno de sus discos, que puede ser una ubicación en su sistema de archivos local o una ubicación de almacenamiento en la nube como Amazon S3.</p>\n    <p>El <code>store</code>método acepta la ruta donde se debe almacenar el archivo en relación con el directorio raíz configurado del sistema de archivos. Esta ruta no debe contener un nombre de archivo, ya que se generará automáticamente un ID único para que sirva como nombre de archivo.</p>\n    <p>El <code>store</code>método también acepta un segundo argumento opcional para el nombre del disco que debe usarse para almacenar el archivo. El método devolverá la ruta del archivo en relación con la raíz del disco:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">photo</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'images'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">photo</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'images'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'s3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si no desea que se genere un nombre de archivo automáticamente, puede usar el <code>storeAs</code>método, que acepta la ruta, el nombre del archivo y el nombre del disco como argumentos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">photo</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">storeAs</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'images'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'filename.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">photo</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">storeAs</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'images'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'filename.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'s3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Para obtener más información sobre el almacenamiento de archivos en Laravel, consulte la <span class=\"link\">documentación</span> completa de <span class=\"link\">almacenamiento de archivos</span> .</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"configuring-trusted-proxies\"><span class=\"link\">Configuración de servidores proxy de confianza</span></h2>\n    <p>Al ejecutar sus aplicaciones detrás de un equilibrador de carga que cancela los certificados TLS / SSL, es posible que observe que su aplicación a veces no genera enlaces HTTPS cuando usa el <code>url</code>asistente. Por lo general, esto se debe a que su aplicación está reenviando tráfico desde su balanceador de carga en el puerto 80 y no sabe que debe generar enlaces seguros.</p>\n    <p>Para resolver esto, puede usar el <code>App\\Http\\Middleware\\TrustProxies</code>middleware que se incluye en su aplicación Laravel, que le permite personalizar rápidamente los balanceadores de carga o proxies en los que su aplicación debería confiar. Sus proxies de confianza deben aparecer como una matriz en la <code>$proxies</code>propiedad de este middleware. Además de configurar los proxies confiables, puede configurar el proxy <code>$headers</code>que debería ser de confianza:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>TrustProxies</span> <span class=\"token keyword\">as</span> Middleware<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TrustProxies</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Middleware</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The trusted proxies for this application.\n     *\n     * @var string|array\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$proxies</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'192.168.1.1'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'192.168.1.2'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * The headers that should be used to detect proxies.\n     *\n     * @var int\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$headers</span> <span class=\"token operator\">=</span> Request<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">HEADER_X_FORWARDED_FOR</span> <span class=\"token operator\">|</span> Request<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">HEADER_X_FORWARDED_HOST</span> <span class=\"token operator\">|</span> Request<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">HEADER_X_FORWARDED_PORT</span> <span class=\"token operator\">|</span> Request<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">HEADER_X_FORWARDED_PROTO</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si utiliza AWS Elastic Load Balancing, su <code>$headers</code>valor debería ser <code>Request::HEADER_X_FORWARDED_AWS_ELB</code>. Para obtener más información sobre las constantes que se pueden usar en la <code>$headers</code>propiedad, consulte la documentación de Symfony sobre la <span class=\"link\">confianza en proxies</span> .</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"trusting-all-proxies\"><span class=\"link\">Confiar en todos los proxies</span></h4>\n    <p>Si está utilizando Amazon AWS u otro proveedor de equilibradores de carga \"en la nube\", es posible que no conozca las direcciones IP de sus equilibradores reales. En este caso, puede utilizar <code>*</code>para confiar en todos los proxies:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The trusted proxies for this application.\n *\n * @var string|array\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$proxies</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'*'</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"configuring-trusted-hosts\"><span class=\"link\">Configuración de hosts de confianza</span></h2>\n    <p>De forma predeterminada, Laravel responderá a todas las solicitudes que reciba independientemente del contenido del <code>Host</code>encabezado de la solicitud HTTP . Además, el <code>Host</code>valor del encabezado se utilizará al generar URL absolutas para su aplicación durante una solicitud web.</p>\n    <p>Por lo general, debe configurar su servidor web, como Nginx o Apache, para enviar solo solicitudes a su aplicación que coincidan con un nombre de host determinado. Sin embargo, si no tiene la capacidad de personalizar su servidor web directamente y necesita indicarle a Laravel que solo responda a ciertos nombres de host, puede hacerlo habilitando el <code>App\\Http\\Middleware\\TrustHosts</code>middleware para su aplicación.</p>\n    <p>El <code>TrustHosts</code>middleware ya está incluido en la <code>$middleware</code>pila de su aplicación; sin embargo, debe descomentarlo para que se active. Dentro del <code>hosts</code>método de este middleware , puede especificar los nombres de host a los que debe responder su aplicación. Las solicitudes entrantes con otros <code>Host</code>encabezados de valor serán rechazadas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the host patterns that should be trusted.\n *\n * @return array\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">hosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'laravel.test'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">allSubdomainsOfApplicationUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>El <code>allSubdomainsOfApplicationUrl</code>método auxiliar devolverá una expresión regular que coincida con todos los subdominios del <code>app.url</code>valor de configuración de su aplicación . Este método auxiliar proporciona una manera conveniente de permitir todos los subdominios de su aplicación al crear una aplicación que utiliza subdominios comodín.</p>\n</div>"
    },
    {
        "title": "Respuestas",
        "subtitle": "CONCEPTOS BASICOS",
        "contenido": "<div>\n    <h1>Respuestas HTTP</h1>    \n    <h2 id=\"creating-responses\"><span class=\"link\">Crear respuestas</span></h2>\n    \n    <h4 id=\"strings-arrays\"><span class=\"link\">Cadenas y matrices</span></h4>\n    <p>Todas las rutas y controladores deben devolver una respuesta para enviarla al navegador del usuario. Laravel proporciona varias formas diferentes de devolver respuestas. La respuesta más básica es devolver una cadena de una ruta o controlador. El marco convertirá automáticamente la cadena en una respuesta HTTP completa:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'Hello World'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Además de devolver cadenas de sus rutas y controladores, también puede devolver matrices. El marco convertirá automáticamente la matriz en una respuesta JSON:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>¿Sabías que también puedes devolver <span class=\"link\">colecciones de Eloquent</span> desde tus rutas o controladores? Se convertirán automáticamente a JSON. ¡Dale un tiro!</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"response-objects\"><span class=\"link\">Objetos de respuesta</span></h4>\n    <p>Por lo general, no solo devolverá cadenas o matrices simples de sus acciones de ruta. En su lugar, devolverá <code>Illuminate\\Http\\Response</code>instancias o <span class=\"link\">vistas completas</span> .</p>\n    <p>Devolver una <code>Response</code>instancia completa le permite personalizar el código de estado HTTP y los encabezados de la respuesta. Una <code>Response</code>instancia hereda de la <code>Symfony\\Component\\HttpFoundation\\Response</code>clase, que proporciona una variedad de métodos para crear respuestas HTTP:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/home'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Hello World'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'text/plain'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"eloquent-models-and-collections\"><span class=\"link\">Modelos y colecciones elocuentes</span></h4>\n    <p>También puede devolver modelos y colecciones de <span class=\"link\">Eloquent ORM</span> directamente desde sus rutas y controladores. Cuando lo haga, Laravel convertirá automáticamente los modelos y colecciones a respuestas JSON respetando los <span class=\"link\">atributos ocultos</span> del modelo :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/{user}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"attaching-headers-to-responses\"><span class=\"link\">Adjuntar encabezados a las respuestas</span></h3>\n    <p>Tenga en cuenta que la mayoría de los métodos de respuesta son encadenables, lo que permite la construcción fluida de instancias de respuesta. Por ejemplo, puede usar el <code>header</code>método para agregar una serie de encabezados a la respuesta antes de devolverla al usuario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$content</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'X-Header-One'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Header Value'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'X-Header-Two'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Header Value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>O puede usar el <code>withHeaders</code>método para especificar una matriz de encabezados que se agregarán a la respuesta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$content</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n                <span class=\"token single-quoted-string string\">'Content-Type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">,</span>\n                <span class=\"token single-quoted-string string\">'X-Header-One'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Header Value'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token single-quoted-string string\">'X-Header-Two'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Header Value'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"cache-control-middleware\"><span class=\"link\">Middleware de control de caché</span></h4>\n    <p>Laravel incluye un <code>cache.headers</code>middleware, que puede usarse para configurar rápidamente el <code>Cache-Control</code>encabezado de un grupo de rutas. Las directivas deben proporcionarse utilizando el equivalente en \"caso de serpiente\" de la directiva de control de caché correspondiente y deben estar separadas por un punto y coma. Si <code>etag</code>se especifica en la lista de directivas, un hash MD5 del contenido de la respuesta se establecerá automáticamente como el identificador ETag:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'cache.headers:public;max_age=2628000;etag'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/privacy'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/terms'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"attaching-cookies-to-responses\"><span class=\"link\">Adjuntar cookies a las respuestas</span></h3>\n    <p>Puede adjuntar una cookie a una <code>Illuminate\\Http\\Response</code>instancia saliente utilizando el <code>cookie</code>método. Debe pasar el nombre, el valor y la cantidad de minutos que la cookie debe considerarse válida para este método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Hello World'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$minutes</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>cookie</code>método también acepta algunos argumentos más que se utilizan con menos frecuencia. Generalmente, estos argumentos tienen el mismo propósito y significado que los argumentos que se le darían al método <span class=\"link\">setcookie</span> nativo de <span class=\"link\">PHP</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Hello World'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$minutes</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$path</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$domain</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$secure</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$httpOnly</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea asegurarse de que se envíe una cookie con la respuesta saliente pero aún no tiene una instancia de esa respuesta, puede usar la <code>Cookie</code>fachada para \"poner en cola\" las cookies para adjuntarlas a la respuesta cuando se envíe. El <code>queue</code>método acepta los argumentos necesarios para crear una instancia de cookie. Estas cookies se adjuntarán a la respuesta saliente antes de que se envíe al navegador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Cookie</span><span class=\"token punctuation\">;</span>\n\nCookie<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">queue</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$minutes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"generating-cookie-instances\"><span class=\"link\">Generación de instancias de cookies</span></h4>\n    <p>Si desea generar una <code>Symfony\\Component\\HttpFoundation\\Cookie</code>instancia que se pueda adjuntar a una instancia de respuesta en un momento posterior, puede usar el <code>cookie</code>asistente global . Esta cookie no se enviará de vuelta al cliente a menos que esté adjunta a una instancia de respuesta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$cookie</span> <span class=\"token operator\">=</span> <span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$minutes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Hello World'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$cookie</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"expiring-cookies-early\"><span class=\"link\">Caducar las cookies antes de tiempo</span></h4>\n    <p>Puede eliminar una cookie caducándola mediante el <code>withoutCookie</code>método de una respuesta saliente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Hello World'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withoutCookie</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si aún no tiene una instancia de la respuesta saliente, puede usar el método de la <code>Cookie</code>fachada <code>expire</code>para caducar una cookie:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Cookie<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">expire</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"cookies-and-encryption\"><span class=\"link\">Cookies y cifrado</span></h3>\n    <p>De forma predeterminada, todas las cookies generadas por Laravel están encriptadas y firmadas para que el cliente no pueda modificarlas ni leerlas. Si desea deshabilitar el cifrado para un subconjunto de cookies generadas por su aplicación, puede usar la <code>$except</code>propiedad del <code>App\\Http\\Middleware\\EncryptCookies</code>middleware, que se encuentra en el <code>app/Http/Middleware</code>directorio:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The names of the cookies that should not be encrypted.\n *\n * @var array\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$except</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'cookie_name'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"redirects\"><span class=\"link\">Redireccionamientos</span></h2>\n    <p>Las respuestas de redireccionamiento son instancias de la <code>Illuminate\\Http\\RedirectResponse</code>clase y contienen los encabezados adecuados necesarios para redirigir al usuario a otra URL. Hay varias formas de generar una <code>RedirectResponse</code>instancia. El método más simple es usar el <code>redirect</code>ayudante global :</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/dashboard'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'home/dashboard'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>A veces, es posible que desee redirigir al usuario a su ubicación anterior, como cuando un formulario enviado no es válido. Puede hacerlo utilizando la <code>back</code>función auxiliar global . Dado que esta función utiliza la <span class=\"link\">sesión</span> , asegúrese de que la ruta que llama a la <code>back</code>función esté utilizando el <code>web</code>grupo de middleware:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/profile'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Validate the request...</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"redirecting-named-routes\"><span class=\"link\">Redirigir a rutas con nombre</span></h3>\n    <p>Cuando llama al <code>redirect</code>asistente sin parámetros, <code>Illuminate\\Routing\\Redirector</code>se devuelve una instancia de , lo que le permite llamar a cualquier método de la <code>Redirector</code>instancia. Por ejemplo, para generar una <code>RedirectResponse</code>ruta con nombre, puede usar el <code>route</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si su ruta tiene parámetros, puede pasarlos como segundo argumento del <code>route</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// For a route with the following URI: /profile/{id}</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'profile'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"populating-parameters-via-eloquent-models\"><span class=\"link\">Rellenar parámetros a través de modelos elocuentes</span></h4>\n    <p>Si está redirigiendo a una ruta con un parámetro de \"ID\" que se está poblando desde un modelo Eloquent, puede pasar el modelo en sí. La identificación se extraerá automáticamente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// For a route with the following URI: /profile/{id}</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'profile'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea personalizar el valor que se coloca en el parámetro de ruta, puede especificar la columna en la definición del parámetro de ruta ( <code>/profile/{id:slug}</code>) o puede anular el <code>getRouteKey</code>método en su modelo Eloquent:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the value of the model's route key.\n *\n * @return mixed\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getRouteKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">slug</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"redirecting-controller-actions\"><span class=\"link\">Redirigir a acciones del controlador</span></h3>\n    <p>También puede generar redireccionamientos a <span class=\"link\">las acciones del controlador</span> . Para hacerlo, pase el controlador y el nombre de la acción al <code>action</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>UserController</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>UserController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'index'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si la ruta de su controlador requiere parámetros, puede pasarlos como el segundo argumento del <code>action</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">action</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span>UserController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'profile'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"redirecting-external-domains\"><span class=\"link\">Redirigir a dominios externos</span></h3>\n    <p>A veces, es posible que deba redirigir a un dominio fuera de su aplicación. Puede hacerlo llamando al <code>away</code>método, que crea un <code>RedirectResponse</code>sin ninguna codificación, validación o verificación de URL adicional:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">away</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'https://www.google.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"redirecting-with-flashed-session-data\"><span class=\"link\">Redirigir con datos de sesión flasheados</span></h3>\n    <p>La redirección a una nueva URL y la <span class=\"link\">actualización de datos a la sesión</span> generalmente se realizan al mismo tiempo. Por lo general, esto se hace después de realizar con éxito una acción cuando muestra un mensaje de éxito en la sesión. Para su comodidad, puede crear una <code>RedirectResponse</code>instancia y actualizar los datos a la sesión en una única cadena de métodos fluida:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/profile'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'dashboard'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'status'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Profile updated!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Una vez que se redirige al usuario, puede mostrar el mensaje parpadeante de la <span class=\"link\">sesión</span> . Por ejemplo, usando la <span class=\"link\">sintaxis Blade</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'status'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"alert alert-success\"</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'status'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n@<span class=\"token keyword\">endif</span></code></pre>\n    \n    <h4 id=\"redirecting-with-input\"><span class=\"link\">Redirigir con entrada</span></h4>\n    <p>Puede utilizar el <code>withInput</code>método proporcionado por la <code>RedirectResponse</code>instancia para actualizar los datos de entrada de la solicitud actual a la sesión antes de redirigir al usuario a una nueva ubicación. Por lo general, esto se hace si el usuario ha encontrado un error de validación. Una vez que la entrada se ha enviado a la sesión, puede <span class=\"link\">recuperarla</span> fácilmente durante la próxima solicitud para volver a completar el formulario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"other-response-types\"><span class=\"link\">Otros tipos de respuesta</span></h2>\n    <p>El <code>response</code>ayudante se puede utilizar para generar otros tipos de instancias de respuesta. Cuando <code>response</code>se llama al ayudante sin argumentos, se devuelve una implementación del <code>Illuminate\\Contracts\\Routing\\ResponseFactory</code> <span class=\"link\">contrato</span> . Este contrato proporciona varios métodos útiles para generar respuestas.</p>\n    \n    <h3 id=\"view-responses\"><span class=\"link\">Ver respuestas</span></h3>\n    <p>Si necesita controlar el estado y los encabezados de la respuesta, pero también necesita devolver una <span class=\"link\">vista</span> como contenido de la respuesta, debe usar el <code>view</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Por supuesto, si no necesita pasar un código de estado HTTP personalizado o encabezados personalizados, puede usar la <code>view</code>función de ayuda global .</p>\n    \n    <h3 id=\"json-responses\"><span class=\"link\">Respuestas JSON</span></h3>\n    <p>El <code>json</code>método establecerá automáticamente el <code>Content-Type</code>encabezado en <code>application/json</code>, así como también convertirá la matriz dada a JSON usando la <code>json_encode</code>función PHP:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Abigail'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'state'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'CA'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea crear una respuesta JSONP, puede usar el <code>json</code>método en combinación con el <code>withCallback</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Abigail'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'state'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'CA'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withCallback</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'callback'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"file-downloads\"><span class=\"link\">Descargas de archivos</span></h3>\n    <p>El <code>download</code>método puede usarse para generar una respuesta que obliga al navegador del usuario a descargar el archivo en la ruta dada. El <code>download</code>método acepta un nombre de archivo como segundo argumento del método, que determinará el nombre de archivo que verá el usuario que descarga el archivo. Finalmente, puede pasar una matriz de encabezados HTTP como tercer argumento del método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$pathToFile</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$pathToFile</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$headers</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p> Symfony HttpFoundation, que administra las descargas de archivos, requiere que el archivo que se descarga tenga un nombre de archivo ASCII.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"streamed-downloads\"><span class=\"link\">Descargas transmitidas</span></h4>\n    <p>A veces, es posible que desee convertir la respuesta de cadena de una operación determinada en una respuesta descargable sin tener que escribir el contenido de la operación en el disco. Puede utilizar el <code>streamDownload</code>método en este escenario. Este método acepta una devolución de llamada, un nombre de archivo y una matriz opcional de encabezados como argumentos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Services<span class=\"token punctuation\">\\</span>GitHub</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">streamDownload</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> GitHub<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">api</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'repo'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">contents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">readme</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'laravel'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'laravel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'contents'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'laravel-readme.md'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"file-responses\"><span class=\"link\">Respuestas de archivo</span></h3>\n    <p>El <code>file</code>método puede usarse para mostrar un archivo, como una imagen o PDF, directamente en el navegador del usuario en lugar de iniciar una descarga. Este método acepta la ruta al archivo como primer argumento y una matriz de encabezados como segundo argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$pathToFile</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">file</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$pathToFile</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$headers</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"response-macros\"><span class=\"link\">Macros de respuesta</span></h2>\n    <p>Si desea definir una respuesta personalizada que pueda reutilizar en una variedad de sus rutas y controladores, puede usar el <code>macro</code>método en la <code>Response</code>fachada. Por lo general, debe llamar a este método desde el <code>boot</code>método de uno de los <span class=\"link\">proveedores de servicios</span> de su aplicación , como el <code>App\\Providers\\AppServiceProvider</code>proveedor de servicios:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Response</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>ServiceProvider</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AppServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Response<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">macro</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'caps'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Response<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token function\">strtoupper</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>La <code>macro</code>función acepta un nombre como primer argumento y un cierre como segundo argumento. El cierre de la macro se ejecutará cuando se llame al nombre de la macro desde una <code>ResponseFactory</code>implementación o el <code>response</code>ayudante:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">caps</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div>"
    },
    {
        "title": "Vistas",
        "subtitle": "CONCEPTOS BASICOS",
        "contenido": "<div>\n    <h1>Puntos de vista</h1>    \n    <h2><span class=\"link\">Introducción</span></h2>\n    <p>Por supuesto, no es práctico devolver cadenas completas de documentos HTML directamente desde sus rutas y controladores. Afortunadamente, las vistas brindan una manera conveniente de colocar todo nuestro HTML en archivos separados. Las vistas separan la lógica de su controlador / aplicación de su lógica de presentación y se almacenan en el <code>resources/views</code>directorio. Una vista simple podría verse así:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token comment\">&lt;!-- View stored in resources/views/greeting.blade.php --&gt;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Hello, {{ $name }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    <p>Dado que esta vista está almacenada en <code>resources/views/greeting.blade.php</code>, podemos devolverla usando el <code>view</code>ayudante global de la siguiente manera:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'greeting'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'James'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>¿Busca más información sobre cómo escribir plantillas Blade? Consulte la <span class=\"link\">documentación</span> completa de <span class=\"link\">Blade</span> para comenzar.</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"creating-and-rendering-views\"><span class=\"link\">Crear y renderizar vistas</span></h2>\n    <p>Puede crear una vista colocando un archivo con la <code>.blade.php</code>extensión en el <code>resources/views</code>directorio de su aplicación . La <code>.blade.php</code>extensión informa al marco que el archivo contiene una <span class=\"link\">plantilla Blade</span> . Las plantillas Blade contienen HTML y directivas Blade que le permiten hacer eco fácilmente de valores, crear declaraciones \"if\", iterar sobre datos y más.</p>\n    <p>Una vez que haya creado una vista, puede devolverla desde una de las rutas o controladores de su aplicación usando el <code>view</code>ayudante global :</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'greeting'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'James'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Las vistas también se pueden devolver usando la <code>View</code>fachada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>View</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> View<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'greeting'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'James'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Como puede ver, el primer argumento pasado al <code>view</code>ayudante corresponde al nombre del archivo de vista en el <code>resources/views</code>directorio. El segundo argumento es una matriz de datos que deben estar disponibles para la vista. En este caso, estamos pasando la <code>name</code>variable, que se muestra en la vista utilizando la <span class=\"link\">sintaxis Blade</span> .</p>\n    \n    <h3 id=\"nested-view-directories\"><span class=\"link\">Directorios de vistas anidadas</span></h3>\n    <p>Las vistas también pueden estar anidadas dentro de subdirectorios del <code>resources/views</code>directorio. La notación de \"puntos\" se puede utilizar para hacer referencia a vistas anidadas. Por ejemplo, si su vista está almacenada en <code>resources/views/admin/profile.blade.php</code>, puede devolverla desde una de las rutas / controladores de su aplicación así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'admin.profile'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Los nombres de directorio de vista no deben contener el <code>.</code>carácter.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"creating-the-first-available-view\"><span class=\"link\">Creación de la primera vista disponible</span></h3>\n    <p>Usando el método de la <code>View</code>fachada <code>first</code>, puede crear la primera vista que existe en una matriz dada de vistas. Esto puede resultar útil si su aplicación o paquete permite personalizar o sobrescribir las vistas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>View</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> View<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'custom.admin'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'admin'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"determining-if-a-view-exists\"><span class=\"link\">Determinar si existe una vista</span></h3>\n    <p>Si necesita determinar si existe una vista, puede usar la <code>View</code>fachada. El <code>exists</code>método regresará <code>true</code>si la vista existe:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>View</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails.customer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h2 id=\"passing-data-to-views\"><span class=\"link\">Pasar datos a vistas</span></h2>\n    <p>Como vio en los ejemplos anteriores, puede pasar una matriz de datos a las vistas para que esos datos estén disponibles para la vista:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'greetings'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Victoria'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Al pasar información de esta manera, los datos deben ser una matriz con pares clave / valor. Después de proporcionar datos a una vista, puede acceder a cada valor dentro de su vista utilizando las claves de datos, como <code>&lt;?php echo $name; ?&gt;</code>.</p>\n    <p>Como alternativa a pasar una matriz completa de datos a la <code>view</code>función auxiliar, puede usar el <code>with</code>método para agregar datos individuales a la vista. El <code>with</code>método devuelve una instancia del objeto de vista para que pueda continuar encadenando métodos antes de devolver la vista:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'greeting'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Victoria'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'occupation'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Astronaut'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"sharing-data-with-all-views\"><span class=\"link\">Compartir datos con todas las vistas</span></h3>\n    <p>Ocasionalmente, es posible que deba compartir datos con todas las vistas que genera su aplicación. Puede hacerlo utilizando el método de la <code>View</code>fachada <code>share</code>. Normalmente, debe realizar llamadas al <code>share</code>método dentro del método de un proveedor de servicios <code>boot</code>. Puede agregarlos a la <code>App\\Providers\\AppServiceProvider</code>clase o generar un proveedor de servicios separado para alojarlos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>View</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AppServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Register any application services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        View<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">share</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h2 id=\"view-composers\"><span class=\"link\">Ver compositores</span></h2>\n    <p>Los compositores de vistas son devoluciones de llamada o métodos de clase a los que se llama cuando se representa una vista. Si tiene datos que desea vincular a una vista cada vez que se renderiza esa vista, un compositor de vistas puede ayudarlo a organizar esa lógica en una sola ubicación. Los compositores de vistas pueden resultar particularmente útiles si la misma vista es devuelta por múltiples rutas o controladores dentro de su aplicación y siempre necesita un dato particular.</p>\n    <p>Normalmente, los compositores de vistas se registrarán en uno de los <span class=\"link\">proveedores de servicios</span> de su aplicación . En este ejemplo, asumiremos que hemos creado una nueva <code>App\\Providers\\ViewServiceProvider</code>para albergar esta lógica.</p>\n    <p>Usaremos <code>View</code>el <code>composer</code>método de la fachada para registrar el compositor de vistas. Laravel no incluye un directorio predeterminado para los compositores de vistas basados \u200B\u200Ben clases, por lo que puede organizarlos como desee. Por ejemplo, puede crear un <code>app/View/Composers</code>directorio para albergar todos los compositores de vistas de su aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>View<span class=\"token punctuation\">\\</span>Composers<span class=\"token punctuation\">\\</span>ProfileComposer</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>View</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>ServiceProvider</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ViewServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Register any application services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Using class based composers...</span>\n        View<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">composer</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'profile'</span><span class=\"token punctuation\">,</span> ProfileComposer<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Using closure based composers...</span>\n        View<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">composer</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'dashboard'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$view</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Recuerde, si crea un nuevo proveedor de servicios para contener sus registros de compositor de vistas, deberá agregar el proveedor de servicios a la <code>providers</code>matriz en el <code>config/app.php</code>archivo de configuración.</p></p></div>\n    </blockquote>\n    <p>Ahora que hemos registrado el compositor, el <code>compose</code>método de la <code>App\\View\\Composers\\ProfileComposer</code>clase se ejecutará cada vez que se <code>profile</code>renderice la vista. Echemos un vistazo a un ejemplo de la clase de compositor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>View<span class=\"token punctuation\">\\</span>Composers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Repositories<span class=\"token punctuation\">\\</span>UserRepository</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>View<span class=\"token punctuation\">\\</span>View</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfileComposer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The user repository implementation.\n     *\n     * @var \\App\\Repositories\\UserRepository\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$users</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Create a new profile composer.\n     *\n     * @param  \\App\\Repositories\\UserRepository  $users\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span>UserRepository <span class=\"token variable\">$users</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Dependencies are automatically resolved by the service container...</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">users</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$users</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Bind data to the view.\n     *\n     * @param  \\Illuminate\\View\\View  $view\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>View <span class=\"token variable\">$view</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$view</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'count'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Como puede ver, todos los compositores de vistas se resuelven a través del <span class=\"link\">contenedor de servicios</span> , por lo que puede indicar cualquier dependencia que necesite dentro del constructor de un compositor.</p>\n    \n    <h4 id=\"attaching-a-composer-to-multiple-views\"><span class=\"link\">Adjuntar un compositor a varias vistas</span></h4>\n    <p>Puede adjuntar un compositor de vistas a varias vistas a la vez pasando una matriz de vistas como primer argumento del <code>composer</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Views<span class=\"token punctuation\">\\</span>Composers<span class=\"token punctuation\">\\</span>MultiComposer</span><span class=\"token punctuation\">;</span>\n\nView<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">composer</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'profile'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'dashboard'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    MultiComposer<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>composer</code>método también acepta el <code>*</code>carácter como comodín, lo que le permite adjuntar un compositor a todas las vistas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">View<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">composer</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$view</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"view-creators\"><span class=\"link\">Ver creadores</span></h3>\n    <p>Los \"creadores\" de vistas son muy similares a los compositores de vistas; sin embargo, se ejecutan inmediatamente después de crear una instancia de la vista en lugar de esperar hasta que la vista esté a punto de renderizarse. Para registrar un creador de vistas, use el <code>creator</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>View<span class=\"token punctuation\">\\</span>Creators<span class=\"token punctuation\">\\</span>ProfileCreator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>View</span><span class=\"token punctuation\">;</span>\n\nView<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">creator</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'profile'</span><span class=\"token punctuation\">,</span> ProfileCreator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"optimizing-views\"><span class=\"link\">Optimización de vistas</span></h2>\n    <p>De forma predeterminada, las vistas de plantilla Blade se compilan a pedido. Cuando se ejecuta una solicitud que muestra una vista, Laravel determinará si existe una versión compilada de la vista. Si el archivo existe, Laravel determinará si la vista no compilada se ha modificado más recientemente que la vista compilada. Si la vista compilada no existe, o la vista no compilada ha sido modificada, Laravel recompilará la vista.</p>\n    <p>La compilación de vistas durante la solicitud puede tener un pequeño impacto negativo en el rendimiento, por lo que Laravel proporciona el <code>view:cache</code>comando Artisan para precompilar todas las vistas utilizadas por su aplicación. Para un mayor rendimiento, es posible que desee ejecutar este comando como parte de su proceso de implementación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan view<span class=\"token punctuation\">:</span>cache</code></pre>\n    <p>Puede usar el <code>view:clear</code>comando para borrar el caché de la vista:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan view<span class=\"token punctuation\">:</span>clear</code></pre>\n</div>"
    },
    {
        "title": "Plantillas Blade",
        "subtitle": "CONCEPTOS BASICOS",
        "contenido": "<div>\n    <h1>Plantillas Blade</h1>    \n    <h2><span class=\"link\">Introducción</span></h2>\n    <p>Blade es el motor de plantillas simple pero poderoso que se incluye con Laravel. A diferencia de algunos motores de plantillas PHP, Blade no le impide usar código PHP simple en sus plantillas. De hecho, todas las plantillas de Blade se compilan en código PHP simple y se almacenan en caché hasta que se modifican, lo que significa que Blade agrega esencialmente cero gastos generales a su aplicación. Los archivos de plantilla Blade usan la <code>.blade.php</code>extensión de archivo y generalmente se almacenan en el <code>resources/views</code>directorio.</p>\n    <p>Las vistas de la hoja se pueden devolver desde las rutas o el controlador utilizando el <code>view</code>ayudante global . Por supuesto, como se menciona en la documentación sobre <span class=\"link\">vistas</span> , los datos se pueden pasar a la vista Blade usando el <code>view</code>segundo argumento del ayudante:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'greeting'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Finn'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Antes de profundizar en Blade, asegúrese de leer la <span class=\"link\">documentación de la vista de</span> Laravel .</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"displaying-data\"><span class=\"link\">Visualización de datos</span></h2>\n    <p>Puede mostrar los datos que se pasan a sus vistas de Blade envolviendo la variable entre llaves. Por ejemplo, dada la siguiente ruta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'welcome'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Samantha'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede mostrar el contenido de la <code>name</code>variable así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Hello<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$name</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Las <code>{{ }}</code>declaraciones de eco de Blade se envían automáticamente a través de la <code>htmlspecialchars</code>función de PHP para evitar ataques XSS.</p></p></div>\n    </blockquote>\n    <p>No está limitado a mostrar el contenido de las variables pasadas a la vista. También puede hacer eco de los resultados de cualquier función de PHP. De hecho, puede poner cualquier código PHP que desee dentro de una declaración de eco de Blade:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">The current <span class=\"token constant\">UNIX</span> timestamp is <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span></code></pre>\n    \n    <h4 id=\"rendering-json\"><span class=\"link\">Representación de JSON</span></h4>\n    <p>A veces, puede pasar una matriz a su vista con la intención de representarla como JSON para inicializar una variable de JavaScript. Por ejemplo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword\">echo</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token delimiter important\">?&gt;</span></span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    <p>Sin embargo, en lugar de llamar manualmente <code>json_encode</code>, puede utilizar la <code>@json</code>directiva Blade. La <code>@json</code>directiva acepta los mismos argumentos que la <code>json_encode</code>función de PHP . Por defecto, la <code>@json</code>directiva llama a la <code>json_encode</code>función con los <code>JSON_HEX_TAG</code>, <code>JSON_HEX_APOS</code>, <code>JSON_HEX_AMP</code>, y <code>JSON_HEX_QUOT</code>banderas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n    <span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> @<span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> @<span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON_PRETTY_PRINT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Solo debe usar la <code>@json</code>directiva para representar las variables existentes como JSON. La plantilla Blade se basa en expresiones regulares y los intentos de pasar una expresión compleja a la directiva pueden provocar fallos inesperados.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"html-entity-encoding\"><span class=\"link\">Codificación de entidad HTML</span></h3>\n    <p>De forma predeterminada, Blade (y el <code>e</code>asistente de Laravel ) codificarán dos veces las entidades HTML. Si desea deshabilitar la codificación doble, llame al <code>Blade::withoutDoubleEncoding</code>método desde el <code>boot</code>método de su <code>AppServiceProvider</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Blade</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>ServiceProvider</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AppServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Blade<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withoutDoubleEncoding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h4 id=\"displaying-unescaped-data\"><span class=\"link\">Visualización de datos sin escape</span></h4>\n    <p>De forma predeterminada, las <code>{{ }}</code>declaraciones de Blade se envían automáticamente a través de la <code>htmlspecialchars</code>función de PHP para evitar ataques XSS. Si no desea que se escapen sus datos, puede utilizar la siguiente sintaxis:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Hello<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span> <span class=\"token variable\">$name</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Tenga mucho cuidado al hacer eco de contenido proporcionado por los usuarios de su aplicación. Por lo general, debe usar la sintaxis de doble llave de escape para evitar ataques XSS cuando se muestran los datos proporcionados por el usuario.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"blade-and-javascript-frameworks\"><span class=\"link\">Frameworks Blade y JavaScript</span></h3>\n    <p>Dado que muchos marcos de JavaScript también usan llaves \"rizadas\" para indicar que una expresión determinada debe mostrarse en el navegador, puede usar el <code>@</code>símbolo para informar al motor de renderizado Blade que una expresión debe permanecer intacta. Por ejemplo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">&gt;</span>Laravel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n\nHello<span class=\"token punctuation\">,</span> @<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span></code></pre>\n    <p>En este ejemplo, <code>@</code>Blade eliminará el símbolo; sin embargo, la <code>{{ name }}</code>expresión permanecerá intacta por el motor Blade, lo que permitirá que sea renderizada por su marco JavaScript.</p>\n    <p>El <code>@</code>símbolo también se puede usar para escapar de las directivas Blade:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">--</span> Blade template <span class=\"token operator\">--</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n@@<span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token constant\">HTML</span> output <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n@<span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n    \n    <h4 id=\"the-at-verbatim-directive\"><span class=\"link\">La <code>@verbatim</code>directiva</span></h4>\n    <p>Si está mostrando variables de JavaScript en una gran parte de su plantilla, puede envolver el HTML en la <code>@verbatim</code>directiva para no tener que anteponer cada declaración de eco de Blade con un <code>@</code>símbolo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@verbatim\n    <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"container\"</span><span class=\"token operator\">&gt;</span>\n        Hello<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n@endverbatim</code></pre>\n    \n    <h2 id=\"blade-directives\"><span class=\"link\">Directivas Blade</span></h2>\n    <p>Además de la herencia de plantillas y la visualización de datos, Blade también proporciona accesos directos convenientes para estructuras de control PHP comunes, como declaraciones condicionales y bucles. Estos atajos proporcionan una forma muy clara y concisa de trabajar con las estructuras de control de PHP y, al mismo tiempo, siguen siendo familiares para sus contrapartes de PHP.</p>\n    \n    <h3 id=\"if-statements\"><span class=\"link\">Si declaraciones</span></h3>\n    <p>Es posible construir <code>if</code>declaraciones utilizando los <code>@if</code>, <code>@elseif</code>, <code>@else</code>, y <code>@endif</code>directivas. Estas directivas funcionan de manera idéntica a sus contrapartes de PHP:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$records</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token constant\">I</span> have one record<span class=\"token operator\">!</span>\n@<span class=\"token keyword\">elseif</span> <span class=\"token punctuation\">(</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$records</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token constant\">I</span> have multiple records<span class=\"token operator\">!</span>\n@<span class=\"token keyword\">else</span>\n    <span class=\"token constant\">I</span> don't have any records<span class=\"token operator\">!</span>\n@<span class=\"token keyword\">endif</span></code></pre>\n    <p>Para mayor comodidad, Blade también proporciona una <code>@unless</code>directiva:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@unless <span class=\"token punctuation\">(</span>Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    You are not signed in<span class=\"token punctuation\">.</span>\n@endunless</code></pre>\n    <p>Además de las directivas condicionales ya discutidas, las directivas <code>@isset</code>y <code>@empty</code>pueden usarse como atajos convenientes para sus respectivas funciones PHP:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$records</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// $records is defined and is not null...</span>\n@endisset\n\n@<span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$records</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// $records is \"empty\"...</span>\n@endempty</code></pre>\n    \n    <h4 id=\"authentication-directives\"><span class=\"link\">Directivas de autenticación</span></h4>\n    <p>Las directivas <code>@auth</code>y <code>@guest</code>se pueden usar para determinar rápidamente si el usuario actual está <span class=\"link\">autenticado</span> o es un invitado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@auth\n    <span class=\"token comment\">// The user is authenticated...</span>\n@endauth\n\n@guest\n    <span class=\"token comment\">// The user is not authenticated...</span>\n@endguest</code></pre>\n    <p>Si es necesario, puede especificar la protección de autenticación que se debe verificar al usar las directivas <code>@auth</code>y <code>@guest</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'admin'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// The user is authenticated...</span>\n@endauth\n\n@<span class=\"token function\">guest</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'admin'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// The user is not authenticated...</span>\n@endguest</code></pre>\n    \n    <h4 id=\"environment-directives\"><span class=\"link\">Directivas medioambientales</span></h4>\n    <p>Puede verificar si la aplicación se está ejecutando en el entorno de producción usando la <code>@production</code>directiva:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@production\n    <span class=\"token comment\">// Production specific content...</span>\n@endproduction</code></pre>\n    <p>O puede determinar si la aplicación se está ejecutando en un entorno específico usando la <code>@env</code>directiva:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'staging'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// The application is running in \"staging\"...</span>\n@endenv\n\n@<span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'staging'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'production'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// The application is running in \"staging\" or \"production\"...</span>\n@endenv</code></pre>\n    \n    <h4 id=\"section-directives\"><span class=\"link\">Directivas de sección</span></h4>\n    <p>Puede determinar si una sección de herencia de plantilla tiene contenido usando la <code>@hasSection</code>directiva:</p>\n    <pre class=\" language-html\"><code class=\" language-html\">@hasSection('navigation')\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pull-right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        @yield('navigation')\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clearfix<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n@endif</code></pre>\n    <p>Puede utilizar la <code>sectionMissing</code>directiva para determinar si una sección no tiene contenido:</p>\n    <pre class=\" language-html\"><code class=\" language-html\">@sectionMissing('navigation')\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pull-right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        @include('default-navigation')\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n@endif</code></pre>\n    \n    <h3 id=\"switch-statements\"><span class=\"link\">Cambiar declaraciones</span></h3>\n    <p>Sentencias switch se pueden construir usando los <code>@switch</code>, <code>@case</code>, <code>@break</code>, <code>@default</code>y <code>@endswitch</code>directivas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">)</span>\n    @<span class=\"token keyword\">case</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        First <span class=\"token keyword\">case</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        @<span class=\"token keyword\">break</span>\n\n    @<span class=\"token keyword\">case</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        Second <span class=\"token keyword\">case</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        @<span class=\"token keyword\">break</span>\n\n    @<span class=\"token keyword\">default</span>\n        <span class=\"token keyword\">Default</span> <span class=\"token keyword\">case</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n@<span class=\"token keyword\">endswitch</span></code></pre>\n    \n    <h3 id=\"loops\"><span class=\"link\">Bucles</span></h3>\n    <p>Además de las declaraciones condicionales, Blade proporciona directivas simples para trabajar con estructuras de bucle de PHP. Nuevamente, cada una de estas directivas funciona de manera idéntica a sus contrapartes de PHP:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    The current value is <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$i</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n@<span class=\"token keyword\">endfor</span>\n\n@<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>This is user <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n@<span class=\"token keyword\">endforeach</span>\n\n@forelse <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n@<span class=\"token keyword\">empty</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>No users<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n@endforelse\n\n@<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span><span class=\"token constant\">I</span>'m looping forever<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n@<span class=\"token keyword\">endwhile</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Al realizar un bucle, puede utilizar la <span class=\"link\">variable de bucle</span> para obtener información valiosa sobre el bucle, como si se encuentra en la primera o la última iteración a través del bucle.</p></p></div>\n    </blockquote>\n    <p>Al usar bucles, también puede finalizar el bucle u omitir la iteración actual usando las directivas <code>@continue</code>y <code>@break</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span>\n    @<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">type</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        @<span class=\"token keyword\">continue</span>\n    @<span class=\"token keyword\">endif</span>\n\n    <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n\n    @<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">number</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n        @<span class=\"token keyword\">break</span>\n    @<span class=\"token keyword\">endif</span>\n@<span class=\"token keyword\">endforeach</span></code></pre>\n    <p>También puede incluir la condición de continuación o interrupción dentro de la declaración directiva:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span>\n    @<span class=\"token keyword\">continue</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">type</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">&gt;</span>\n\n    @<span class=\"token keyword\">break</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">number</span> <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n@<span class=\"token keyword\">endforeach</span></code></pre>\n    \n    <h3 id=\"the-loop-variable\"><span class=\"link\">La variable de bucle</span></h3>\n    <p>Al hacer un bucle, <code>$loop</code>habrá una variable disponible dentro de su bucle. Esta variable proporciona acceso a algunos bits de información útiles, como el índice del bucle actual y si esta es la primera o la última iteración a través del bucle:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span>\n    @<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$loop</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">first</span><span class=\"token punctuation\">)</span>\n        This is the first iteration<span class=\"token punctuation\">.</span>\n    @<span class=\"token keyword\">endif</span>\n\n    @<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$loop</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">last</span><span class=\"token punctuation\">)</span>\n        This is the last iteration<span class=\"token punctuation\">.</span>\n    @<span class=\"token keyword\">endif</span>\n\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">&gt;</span>This is user <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">&gt;</span>\n@<span class=\"token keyword\">endforeach</span></code></pre>\n    <p>Si está en un bucle anidado, puede acceder a la <code>$loop</code>variable del bucle principal a través de la <code>parent</code>propiedad:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span>\n    @<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">posts</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span>\n        @<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$loop</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">parent</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">first</span><span class=\"token punctuation\">)</span>\n            This is the first iteration of the <span class=\"token keyword\">parent</span> loop<span class=\"token punctuation\">.</span>\n        @<span class=\"token keyword\">endif</span>\n    @<span class=\"token keyword\">endforeach</span>\n@<span class=\"token keyword\">endforeach</span></code></pre>\n    <p>La <code>$loop</code>variable también contiene una variedad de otras propiedades útiles:</p>\n    <table>\n        <thead>\n        <tr>\n            <th>Propiedad</th>\n            <th>Descripción</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>$loop-&gt;index</code></td>\n            <td>El índice de la iteración del ciclo actual (comienza en 0).</td>\n        </tr>\n        <tr>\n            <td><code>$loop-&gt;iteration</code></td>\n            <td>La iteración del ciclo actual (comienza en 1).</td>\n        </tr>\n        <tr>\n            <td><code>$loop-&gt;remaining</code></td>\n            <td>Las iteraciones que quedan en el ciclo.</td>\n        </tr>\n        <tr>\n            <td><code>$loop-&gt;count</code></td>\n            <td>El número total de elementos de la matriz que se iteran.</td>\n        </tr>\n        <tr>\n            <td><code>$loop-&gt;first</code></td>\n            <td>Si esta es la primera iteración a través del ciclo.</td>\n        </tr>\n        <tr>\n            <td><code>$loop-&gt;last</code></td>\n            <td>Si esta es la última iteración del ciclo.</td>\n        </tr>\n        <tr>\n            <td><code>$loop-&gt;even</code></td>\n            <td>Si se trata de una iteración uniforme a través del ciclo.</td>\n        </tr>\n        <tr>\n            <td><code>$loop-&gt;odd</code></td>\n            <td>Si se trata de una iteración extraña a través del ciclo.</td>\n        </tr>\n        <tr>\n            <td><code>$loop-&gt;depth</code></td>\n            <td>El nivel de anidamiento del bucle actual.</td>\n        </tr>\n        <tr>\n            <td><code>$loop-&gt;parent</code></td>\n            <td>Cuando está en un bucle anidado, la variable del bucle principal.</td>\n        </tr>\n        </tbody>\n    </table>\n    \n    <h3 id=\"conditional-classes\"><span class=\"link\">Clases condicionales</span></h3>\n    <p>La <code>@class</code>directiva compila condicionalmente una cadena de clase CSS. La directiva acepta una matriz de clases donde la clave de la matriz contiene la clase o clases que desea agregar, mientras que el valor es una expresión booleana. Si el elemento de la matriz tiene una clave numérica, siempre se incluirá en la lista de clases renderizada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@php\n    <span class=\"token variable\">$isActive</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$hasError</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">;</span>\n@endphp\n\n<span class=\"token operator\">&lt;</span>span @<span class=\"token keyword\">class</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'p-4'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'font-bold'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$isActive</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'text-gray-500'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">!</span> <span class=\"token variable\">$isActive</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'bg-red'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$hasError</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>span <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"p-4 text-gray-500 bg-red\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">&gt;</span></code></pre>\n    \n    <h3 id=\"including-subviews\"><span class=\"link\">Incluyendo subvistas</span></h3>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Aunque puede usar la <code>@include</code>directiva, los <span class=\"link\">componentes</span> Blade brindan una funcionalidad similar y ofrecen varios beneficios sobre la <code>@include</code>directiva, como el enlace de datos y atributos.</p></p></div>\n    </blockquote>\n    <p>La <code>@include</code>directiva de Blade le permite incluir una vista de Blade desde dentro de otra vista. Todas las variables que están disponibles para la vista principal estarán disponibles para la vista incluida:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    @include('shared.errors')\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token comment\">&lt;!-- Form Contents --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    <p>Aunque la vista incluida heredará todos los datos disponibles en la vista principal, también puede pasar una matriz de datos adicionales que deberían estar disponibles para la vista incluida:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'view.name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'status'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'complete'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n    <p>Si intenta <code>@include</code>una vista que no existe, Laravel arrojará un error. Si desea incluir una vista que puede estar presente o no, debe usar la <code>@includeIf</code>directiva:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token function\">includeIf</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'view.name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'status'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'complete'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n    <p>Si desea <code>@include</code>ver si una expresión booleana dada se evalúa como <code>true</code>o <code>false</code>, puede usar las directivas <code>@includeWhen</code>y <code>@includeUnless</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token function\">includeWhen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$boolean</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'view.name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'status'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'complete'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n@<span class=\"token function\">includeUnless</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$boolean</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'view.name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'status'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'complete'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n    <p>Para incluir la primera vista que existe de una determinada matriz de vistas, puede usar la <code>includeFirst</code>directiva:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token function\">includeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'custom.admin'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'admin'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'status'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'complete'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Debe evitar usar las constantes <code>__DIR__</code>y <code>__FILE__</code>en sus vistas Blade, ya que se referirán a la ubicación de la vista compilada en caché.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"rendering-views-for-collections\"><span class=\"link\">Representación de vistas para colecciones</span></h4>\n    <p>Puede combinar bucles e incluir en una línea con la <code>@each</code>directiva de Blade :</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'view.name'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$jobs</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'job'</span><span class=\"token punctuation\">)</span></code></pre>\n    <p>El <code>@each</code>primer argumento de la directiva es la vista a representar para cada elemento en la matriz o colección. El segundo argumento es la matriz o colección sobre la que desea iterar, mientras que el tercer argumento es el nombre de la variable que se asignará a la iteración actual dentro de la vista. Entonces, por ejemplo, si está iterando sobre una matriz de <code>jobs</code>, normalmente querrá acceder a cada trabajo como una <code>job</code>variable dentro de la vista. La clave de matriz para la iteración actual estará disponible como <code>key</code>variable dentro de la vista.</p>\n    <p>También puede pasar un cuarto argumento a la <code>@each</code>directiva. Este argumento determina la vista que se renderizará si la matriz dada está vacía.</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'view.name'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$jobs</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'job'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'view.empty'</span><span class=\"token punctuation\">)</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Las vistas representadas mediante <code>@each</code>no heredan las variables de la vista principal. Si la vista secundaria requiere estas variables, debe usar las directivas <code>@foreach</code>y en su <code>@include</code>lugar.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"the-once-directive\"><span class=\"link\">La <code>@once</code>directiva</span></h3>\n    <p>La <code>@once</code>directiva le permite definir una parte de la plantilla que solo se evaluará una vez por ciclo de renderizado. Esto puede ser útil para insertar una determinada parte de JavaScript en el encabezado de la página utilizando <span class=\"link\">pilas</span> . Por ejemplo, si está renderizando un <span class=\"link\">componente</span> dado dentro de un bucle, es posible que solo desee enviar JavaScript al encabezado la primera vez que se renderiza el componente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@once\n    @<span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'scripts'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">&gt;</span>\n            <span class=\"token comment\">// Your custom JavaScript...</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n    @endpush\n@endonce</code></pre>\n    \n    <h3 id=\"raw-php\"><span class=\"link\">PHP sin procesar</span></h3>\n    <p>En algunas situaciones, es útil incrustar código PHP en sus vistas. Puede usar la <code>@php</code>directiva Blade para ejecutar un bloque de PHP simple dentro de su plantilla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@php\n    <span class=\"token variable\">$counter</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n@endphp</code></pre>\n    \n    <h3 id=\"comments\"><span class=\"link\">Comentarios</span></h3>\n    <p>Blade también le permite definir comentarios en sus vistas. Sin embargo, a diferencia de los comentarios HTML, los comentarios Blade no se incluyen en el HTML devuelto por su aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">--</span> This comment will not be present in the rendered <span class=\"token constant\">HTML</span> <span class=\"token operator\">--</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n    \n    <h2 id=\"components\"><span class=\"link\">Componentes</span></h2>\n    <p>Los componentes y las ranuras brindan beneficios similares a las secciones, diseños e inclusiones; sin embargo, algunos pueden encontrar el modelo mental de componentes y ranuras más fácil de entender. Hay dos enfoques para escribir componentes: componentes basados \u200B\u200Ben clases y componentes anónimos.</p>\n    <p>Para crear un componente basado en clases, puede usar el <code>make:component</code>comando Artisan. Para ilustrar cómo usar los componentes, crearemos un <code>Alert</code>componente simple . El <code>make:component</code>comando colocará el componente en el <code>App\\View\\Components</code>directorio:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>component Alert</code></pre>\n    <p>El <code>make:component</code>comando también creará una plantilla de vista para el componente. La vista se colocará en el <code>resources/views/components</code>directorio. Al escribir componentes para su propia aplicación, los componentes se descubren automáticamente dentro del <code>app/View/Components</code>directorio y el <code>resources/views/components</code>directorio, por lo que normalmente no se requiere ningún otro registro de componentes.</p>\n    <p>También puede crear componentes dentro de subdirectorios:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>component Forms<span class=\"token operator\">/</span>Input</code></pre>\n    <p>El comando anterior creará un <code>Input</code>componente en el <code>App\\View\\Components\\Forms</code>directorio y la vista se colocará en el <code>resources/views/components/forms</code>directorio.</p>\n    \n    <h4 id=\"manually-registering-package-components\"><span class=\"link\">Registro manual de componentes del paquete</span></h4>\n    <p>Al escribir componentes para su propia aplicación, los componentes se descubren automáticamente dentro del <code>app/View/Components</code>directorio y el <code>resources/views/components</code>directorio.</p>\n    <p>Sin embargo, si está creando un paquete que utiliza componentes Blade, deberá registrar manualmente su clase de componente y su alias de etiqueta HTML. Por lo general, debe registrar sus componentes en el <code>boot</code>método del proveedor de servicios de su paquete:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Blade</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Bootstrap your package's services.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Blade<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'package-alert'</span><span class=\"token punctuation\">,</span> Alert<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Una vez que su componente ha sido registrado, puede ser renderizado usando su alias de etiqueta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>package<span class=\"token operator\">-</span>alert<span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span></code></pre>\n    <p>Alternativamente, puede usar el <code>componentNamespace</code>método para autocargar clases de componentes por convención. Por ejemplo, un <code>Nightshade</code>paquete puede tener <code>Calendar</code>y <code>ColorPicker</code>componentes que residen dentro del <code>Package\\Views\\Components</code>espacio de nombres:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Blade</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Bootstrap your package's services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Blade<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">componentNamespace</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Nightshade\\\\Views\\\\Components'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'nightshade'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Esto permitirá el uso de los componentes del paquete por el espacio de nombres de su proveedor utilizando la <code>package-name::</code>sintaxis:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>nightshade<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>calendar <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>nightshade<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>color<span class=\"token operator\">-</span>picker <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span></code></pre>\n    <p>Blade detectará automáticamente la clase que está vinculada a este componente colocando en mayúsculas y minúsculas el nombre del componente. Los subdirectorios también son compatibles con la notación de \"puntos\".</p>\n    \n    <h3 id=\"rendering-components\"><span class=\"link\">Componentes de renderizado</span></h3>\n    <p>Para mostrar un componente, puede utilizar una etiqueta de componente Blade dentro de una de sus plantillas Blade. Las etiquetas de los componentes Blade comienzan con la cadena <code>x-</code>seguida del nombre del caso de kebab de la clase de componente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>alert<span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>user<span class=\"token operator\">-</span>profile<span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span></code></pre>\n    <p>Si la clase de componente está anidada más profundamente dentro del <code>App\\View\\Components</code>directorio, puede usar el <code>.</code>carácter para indicar el anidamiento del directorio. Por ejemplo, si asumimos que un componente está ubicado en <code>App\\View\\Components\\Inputs\\Button.php</code>, podemos representarlo así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>inputs<span class=\"token punctuation\">.</span>button<span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span></code></pre>\n    \n    <h3 id=\"passing-data-to-components\"><span class=\"link\">Pasar datos a componentes</span></h3>\n    <p>Puede pasar datos a los componentes Blade utilizando atributos HTML. Los valores primitivos codificados de forma rígida se pueden pasar al componente utilizando cadenas de atributos HTML simples. Las expresiones y variables de PHP deben pasarse al componente a través de atributos que usan el <code>:</code>carácter como prefijo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>alert type<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"error\"</span> <span class=\"token punctuation\">:</span>message<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"<span class=\"token interpolation\"><span class=\"token variable\">$message</span></span>\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span></code></pre>\n    <p>Debe definir los datos requeridos del componente en su constructor de clases. Todas las propiedades públicas de un componente se pondrán automáticamente a disposición de la vista del componente. No es necesario pasar los datos a la vista desde el <code>render</code>método del componente :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>View<span class=\"token punctuation\">\\</span>Components</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>View<span class=\"token punctuation\">\\</span>Component</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Alert</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The alert type.\n     *\n     * @var string\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * The alert message.\n     *\n     * @var string\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$message</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Create the component instance.\n     *\n     * @param  string  $type\n     * @param  string  $message\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$type</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$message</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">type</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">message</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$message</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Get the view / contents that represent the component.\n     *\n     * @return \\Illuminate\\View\\View|\\Closure|string\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'components.alert'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Cuando se procesa su componente, puede mostrar el contenido de las variables públicas de su componente haciendo eco de las variables por nombre:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alert alert-{{ $type }}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    {{ $message }}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    \n    <h4 id=\"casing\"><span class=\"link\">Caja</span></h4>\n    <p>Los argumentos del constructor de componentes deben especificarse usando <code>camelCase</code>, mientras que <code>kebab-case</code>deben usarse al hacer referencia a los nombres de los argumentos en sus atributos HTML. Por ejemplo, dado el siguiente constructor de componentes:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Create the component instance.\n *\n * @param  string  $alertType\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$alertType</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">alertType</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$alertType</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>El <code>$alertType</code>argumento se puede proporcionar al componente de la siguiente manera:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>alert alert<span class=\"token operator\">-</span>type<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"danger\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span></code></pre>\n    \n    <h4 id=\"escaping-attribute-rendering\"><span class=\"link\">Escapar de la representación de atributos</span></h4>\n    <p>Dado que algunos marcos de JavaScript como Alpine.js también usan atributos con dos puntos prefijados, puede usar un <code>::</code>prefijo de dos puntos ( ) para informar a Blade que el atributo no es una expresión PHP. Por ejemplo, dado el siguiente componente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>button <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"{ danger: isDeleting }\"</span><span class=\"token operator\">&gt;</span>\n    Submit\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>x<span class=\"token operator\">-</span>button<span class=\"token operator\">&gt;</span></code></pre>\n    <p>Blade renderizará el siguiente HTML:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>button <span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"{ danger: isDeleting }\"</span><span class=\"token operator\">&gt;</span>\n    Submit\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span></code></pre>\n    \n    <h4 id=\"component-methods\"><span class=\"link\">Métodos de componentes</span></h4>\n    <p>Además de que las variables públicas estén disponibles para la plantilla de su componente, se puede invocar cualquier método público en el componente. Por ejemplo, imagina un componente que tiene un <code>isSelected</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Determine if the given option is the currently selected option.\n *\n * @param  string  $option\n * @return bool\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isSelected</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$option</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$option</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">selected</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Puede ejecutar este método desde la plantilla de su componente invocando la variable que coincida con el nombre del método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>option <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$isSelected</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token single-quoted-string string\">'selected=\"selected\"'</span> <span class=\"token punctuation\">:</span> <span class=\"token single-quoted-string string\">''</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> value<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"{{ <span class=\"token interpolation\"><span class=\"token variable\">$value</span></span> }}\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$label</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>option<span class=\"token operator\">&gt;</span></code></pre>\n    \n    <h4 id=\"using-attributes-slots-within-component-class\"><span class=\"link\">Acceso a atributos y ranuras dentro de clases de componentes</span></h4>\n    <p>Los componentes Blade también le permiten acceder al nombre del componente, los atributos y la ranura dentro del método de renderizado de la clase. Sin embargo, para acceder a estos datos, debe devolver un cierre del <code>render</code>método de su componente . El cierre recibirá una <code>$data</code>matriz como único argumento. Esta matriz contendrá varios elementos que brindan información sobre el componente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the view / contents that represent the component.\n *\n * @return \\Illuminate\\View\\View|\\Closure|string\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// $data['componentName'];</span>\n        <span class=\"token comment\">// $data['attributes'];</span>\n        <span class=\"token comment\">// $data['slot'];</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'&lt;div&gt;Components content&lt;/div&gt;'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>El <code>componentName</code>es igual al nombre usado en la etiqueta HTML después del <code>x-</code>prefijo. Así <code>&lt;x-alert /&gt;</code>'s <code>componentName</code>serán <code>alert</code>. El <code>attributes</code>elemento contendrá todos los atributos que estaban presentes en la etiqueta HTML. El <code>slot</code>elemento es una <code>Illuminate\\Support\\HtmlString</code>instancia con el contenido de la ranura del componente.</p>\n    <p>El cierre debe devolver una cadena. Si la cadena devuelta corresponde a una vista existente, esa vista se renderizará; de lo contrario, la cadena devuelta se evaluará como una vista Blade en línea.</p>\n    \n    <h4 id=\"additional-dependencies\"><span class=\"link\">dependencias adicionales</span></h4>\n    <p>Si su componente requiere dependencias del <span class=\"link\">contenedor de servicios</span> de Laravel , puede enumerarlas antes de cualquiera de los atributos de datos del componente y el contenedor las inyectará automáticamente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Services<span class=\"token punctuation\">\\</span>AlertCreator</span>\n\n<span class=\"token comment\">/**\n * Create the component instance.\n *\n * @param  \\App\\Services\\AlertCreator  $creator\n * @param  string  $type\n * @param  string  $message\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span>AlertCreator <span class=\"token variable\">$creator</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$message</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">creator</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$creator</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">type</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">message</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$message</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"hiding-attributes-and-methods\"><span class=\"link\">Ocultar atributos / métodos</span></h4>\n    <p>Si desea evitar que algunos métodos o propiedades públicos se expongan como variables a la plantilla de su componente, puede agregarlos a una <code>$except</code>propiedad de matriz en su componente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>View<span class=\"token punctuation\">\\</span>Components</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>View<span class=\"token punctuation\">\\</span>Component</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Alert</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The alert type.\n     *\n     * @var string\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * The properties / methods that should not be exposed to the component template.\n     *\n     * @var array\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$except</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'type'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h3 id=\"component-attributes\"><span class=\"link\">Atributos de componentes</span></h3>\n    <p>Ya hemos examinado cómo pasar atributos de datos a un componente; sin embargo, a veces es posible que deba especificar atributos HTML adicionales, por ejemplo <code>class</code>, que no forman parte de los datos necesarios para que funcione un componente. Normalmente, desea pasar estos atributos adicionales al elemento raíz de la plantilla de componente. Por ejemplo, imagina que queremos renderizar un <code>alert</code>componente así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>alert type<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"error\"</span> <span class=\"token punctuation\">:</span>message<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"<span class=\"token interpolation\"><span class=\"token variable\">$message</span></span>\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"mt-4\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span></code></pre>\n    <p>Todos los atributos que no forman parte del constructor del componente se agregarán automáticamente a la \"bolsa de atributos\" del componente. Esta bolsa de atributos se pone automáticamente a disposición del componente a través de la <code>$attributes</code>variable. Todos los atributos se pueden representar dentro del componente repitiendo esta variable:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$attributes</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> Component content <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p><code>@env</code>En este momento, no se admite el uso de directivas como dentro de las etiquetas de componentes. Por ejemplo, <code>&lt;x-alert :live=\"@env('production')\"/&gt;</code>no se compilará.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"default-merged-attributes\"><span class=\"link\">Atributos predeterminados / fusionados</span></h4>\n    <p>A veces, es posible que deba especificar valores predeterminados para los atributos o fusionar valores adicionales en algunos de los atributos del componente. Para lograr esto, puede usar el <code>merge</code>método de la bolsa de atributos . Este método es particularmente útil para definir un conjunto de clases CSS predeterminadas que siempre deben aplicarse a un componente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$attributes</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'class'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'alert alert-'</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$type</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$message</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span></code></pre>\n    <p>Si asumimos que este componente se utiliza así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>alert type<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"error\"</span> <span class=\"token punctuation\">:</span>message<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"<span class=\"token interpolation\"><span class=\"token variable\">$message</span></span>\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"mb-4\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span></code></pre>\n    <p>El HTML renderizado final del componente tendrá el siguiente aspecto:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alert alert-error mb-4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Contents of the $message variable --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    \n    <h4 id=\"conditionally-merge-classes\"><span class=\"link\">Combinar clases condicionalmente</span></h4>\n    <p>A veces, es posible que desee fusionar clases si una condición determinada es <code>true</code>. Puede lograr esto a través del <code>class</code>método, que acepta una matriz de clases donde la clave de la matriz contiene la clase o clases que desea agregar, mientras que el valor es una expresión booleana. Si el elemento de la matriz tiene una clave numérica, siempre se incluirá en la lista de clases renderizada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$attributes</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'p-4'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'bg-red'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$hasError</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$message</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span></code></pre>\n    <p>Si necesita fusionar otros atributos en su componente, puede encadenar el <code>merge</code>método al <code>class</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>button <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$attributes</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'p-4'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'button'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$slot</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si necesita compilar clases condicionalmente en otros elementos HTML que no deberían recibir atributos combinados, puede usar la <span class=\"link\"><code>@class</code>directiva</span> .</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"non-class-attribute-merging\"><span class=\"link\">Fusión de atributos que no pertenecen a clases</span></h4>\n    <p>Al fusionar atributos que no son <code>class</code>atributos, los valores proporcionados al <code>merge</code>método se considerarán los valores \"predeterminados\" del atributo. Sin embargo, a diferencia del <code>class</code>atributo, estos atributos no se fusionarán con los valores de atributo inyectados. En cambio, se sobrescribirán. Por ejemplo, <code>button</code>la implementación de un componente puede tener el siguiente aspecto:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>button <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$attributes</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'button'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$slot</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span></code></pre>\n    <p>Para renderizar el componente de botón con un personalizado <code>type</code>, se puede especificar al consumir el componente. Si no se especifica ningún tipo, <code>button</code>se utilizará el tipo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>button type<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"submit\"</span><span class=\"token operator\">&gt;</span>\n    Submit\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>x<span class=\"token operator\">-</span>button<span class=\"token operator\">&gt;</span></code></pre>\n    <p>El HTML renderizado del <code>button</code>componente en este ejemplo sería:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"submit\"</span><span class=\"token operator\">&gt;</span>\n    Submit\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">&gt;</span></code></pre>\n    <p>Si desea un atributo que no sea <code>class</code>tener su valor predeterminado y los valores inyectados unidos, puede usar el <code>prepends</code>método. En este ejemplo, el <code>data-controller</code>atributo siempre comenzará con <code>profile-controller</code>y cualquier <code>data-controller</code>valor inyectado adicional se colocará después de este valor predeterminado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$attributes</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'data-controller'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$attributes</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">prepends</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'profile-controller'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$slot</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span></code></pre>\n    \n    <h4 id=\"filtering-attributes\"><span class=\"link\">Recuperar y filtrar atributos</span></h4>\n    <p>Puede filtrar atributos usando el <code>filter</code>método. Este método acepta un cierre que debería regresar <code>true</code>si desea retener el atributo en la bolsa de atributos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$attributes</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>fn <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$key</span> <span class=\"token operator\">==</span> <span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n    <p>Por conveniencia, puede usar el <code>whereStartsWith</code>método para recuperar todos los atributos cuyas claves comienzan con una cadena determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$attributes</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereStartsWith</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'wire:model'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n    <p>Por el contrario, el <code>whereDoesntStartWith</code>método se puede utilizar para excluir todos los atributos cuyas claves comiencen con una cadena determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$attributes</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereDoesntStartWith</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'wire:model'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n    <p>Con el <code>first</code>método, puede representar el primer atributo en una bolsa de atributos determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$attributes</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereStartsWith</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'wire:model'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n    <p>Si desea verificar si un atributo está presente en el componente, puede usar el <code>has</code>método. Este método acepta el nombre del atributo como su único argumento y devuelve un booleano que indica si el atributo está presente o no:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$attributes</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'class'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">&gt;</span><span class=\"token keyword\">Class</span> attribute is present<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n@<span class=\"token keyword\">endif</span></code></pre>\n    <p>Puede recuperar el valor de un atributo específico usando el <code>get</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$attributes</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'class'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"reserved-keywords\"><span class=\"link\">Palabras clave reservadas</span></h3>\n    <p>De forma predeterminada, algunas palabras clave están reservadas para uso interno de Blade con el fin de representar componentes. Las siguientes palabras clave no se pueden definir como propiedades públicas o nombres de métodos dentro de sus componentes:</p>\n    <div class=\"content-list\">\n        <ul>\n            <li><code>data</code></li>\n            <li><code>render</code></li>\n            <li><code>resolveView</code></li>\n            <li><code>shouldRender</code></li>\n            <li><code>view</code></li>\n            <li><code>withAttributes</code></li>\n            <li><code>withName</code></li>\n        </ul>\n    </div>\n    \n    <h3 id=\"slots\"><span class=\"link\">Ranuras</span></h3>\n    <p>A menudo, necesitará pasar contenido adicional a su componente a través de \"ranuras\". Las ranuras de componentes se representan repitiendo la <code>$slot</code>variable. Para explorar este concepto, imaginemos que un <code>alert</code>componente tiene el siguiente marcado:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token comment\">&lt;!-- /resources/views/components/alert.blade.php --&gt;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alert alert-danger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    {{ $slot }}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    <p>Podemos pasar contenido al <code>slot</code>inyectando contenido en el componente:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-alert</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">&gt;</span></span>Whoops!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">&gt;</span></span> Something went wrong!\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-alert</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    <p>A veces, un componente puede necesitar renderizar múltiples ranuras diferentes en diferentes ubicaciones dentro del componente. Modifiquemos nuestro componente de alerta para permitir la inyección de un espacio de \"título\":</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token comment\">&lt;!-- /resources/views/components/alert.blade.php --&gt;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alert-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>{{ $title }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alert alert-danger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    {{ $slot }}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    <p>Puede definir el contenido de la ranura nombrada usando la <code>x-slot</code>etiqueta. Cualquier contenido que no esté dentro de una <code>x-slot</code>etiqueta explícita se pasará al componente en la <code>$slot</code>variable:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-alert</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        Server Error\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-slot</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">&gt;</span></span>Whoops!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">&gt;</span></span> Something went wrong!\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-alert</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    \n    <h4 id=\"scoped-slots\"><span class=\"link\">Ranuras con ámbito</span></h4>\n    <p>Si ha utilizado un marco de JavaScript como Vue, es posible que esté familiarizado con las \"ranuras con alcance\", que le permiten acceder a datos o métodos desde el componente dentro de su ranura. Puede lograr un comportamiento similar en Laravel definiendo métodos públicos o propiedades en su componente y accediendo al componente dentro de su ranura a través de la <code>$component</code>variable. En este ejemplo, asumiremos que el <code>x-alert</code>componente tiene un <code>formatAlert</code>método público definido en su clase de componente:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-alert</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        {{ $component-&gt;formatAlert('Server Error') }}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-slot</span><span class=\"token punctuation\">&gt;</span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">&gt;</span></span>Whoops!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">&gt;</span></span> Something went wrong!\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-alert</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    \n    <h4 id=\"slot-attributes\"><span class=\"link\">Atributos de la ranura</span></h4>\n    <p>Al igual que los componentes Blade, puede asignar <span class=\"link\">atributos</span> adicionales a las ranuras, como los nombres de las clases CSS:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-card</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shadow-sm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>heading<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>font-bold<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        Heading\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-slot</span><span class=\"token punctuation\">&gt;</span></span>\n\n    Content\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text-sm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        Footer\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-slot</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-card</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    <p>Para interactuar con los atributos de la ranura, puede acceder a la <code>attributes</code>propiedad de la variable de la ranura. Para obtener más información sobre cómo interactuar con los atributos, consulte la documentación sobre los <span class=\"link\">atributos de los componentes</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token function\">props</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'heading'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'footer'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$attributes</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'border'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token operator\">&lt;</span>h1 <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$heading</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">attributes</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'text-lg'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$heading</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">&gt;</span>\n\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$slot</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token operator\">&lt;</span>footer <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$footer</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">attributes</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'text-gray-700'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$footer</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>footer<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span></code></pre>\n    \n    <h3 id=\"inline-component-views\"><span class=\"link\">Vistas de componentes en línea</span></h3>\n    <p>Para componentes muy pequeños, puede resultar engorroso administrar tanto la clase de componente como la plantilla de vista del componente. Por este motivo, puede devolver el marcado del componente directamente desde el <code>render</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the view / contents that represent the component.\n *\n * @return \\Illuminate\\View\\View|\\Closure|string\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span><span class=\"token single-quoted-string string\">'blade'</span>\n        <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"alert alert-danger\"</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$slot</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n    blade<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"generating-inline-view-components\"><span class=\"link\">Generación de componentes de vista en línea</span></h4>\n    <p>Para crear un componente que represente una vista en línea, puede usar la <code>inline</code>opción al ejecutar el <code>make:component</code>comando:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>component Alert <span class=\"token operator\">--</span>inline</code></pre>\n    \n    <h3 id=\"anonymous-components\"><span class=\"link\">Componentes anónimos</span></h3>\n    <p>Al igual que los componentes en línea, los componentes anónimos proporcionan un mecanismo para administrar un componente a través de un solo archivo. Sin embargo, los componentes anónimos utilizan un archivo de vista única y no tienen una clase asociada. Para definir un componente anónimo, solo necesita colocar una plantilla Blade dentro de su <code>resources/views/components</code>directorio. Por ejemplo, asumiendo que ha definido un componente en <code>resources/views/components/alert.blade.php</code>, puede simplemente renderizarlo así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>alert<span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span></code></pre>\n    <p>Puede usar el <code>.</code>carácter para indicar si un componente está anidado más profundamente dentro del <code>components</code>directorio. Por ejemplo, suponiendo que el componente está definido en <code>resources/views/components/inputs/button.blade.php</code>, puede representarlo así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>inputs<span class=\"token punctuation\">.</span>button<span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span></code></pre>\n    \n    <h4 id=\"data-properties-attributes\"><span class=\"link\">Propiedades / atributos de datos</span></h4>\n    <p>Dado que los componentes anónimos no tienen ninguna clase asociada, es posible que se pregunte cómo puede diferenciar qué datos deben pasarse al componente como variables y qué atributos deben colocarse en la <span class=\"link\">bolsa de atributos</span> del componente .</p>\n    <p>Puede especificar qué atributos deben considerarse variables de datos utilizando la <code>@props</code>directiva en la parte superior de la plantilla Blade de su componente. Todos los demás atributos del componente estarán disponibles a través de la bolsa de atributos del componente. Si desea dar un valor predeterminado a una variable de datos, puede especificar el nombre de la variable como clave de matriz y el valor predeterminado como valor de matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token operator\">/</span>resources<span class=\"token operator\">/</span>views<span class=\"token operator\">/</span>components<span class=\"token operator\">/</span>alert<span class=\"token punctuation\">.</span>blade<span class=\"token punctuation\">.</span>php <span class=\"token operator\">--</span><span class=\"token operator\">&gt;</span>\n\n@<span class=\"token function\">props</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'info'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'message'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">&lt;</span>div <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$attributes</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'class'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'alert alert-'</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$type</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$message</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span></code></pre>\n    <p>Dada la definición del componente anterior, podemos renderizar el componente así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>alert type<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"error\"</span> <span class=\"token punctuation\">:</span>message<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"<span class=\"token interpolation\"><span class=\"token variable\">$message</span></span>\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"mb-4\"</span><span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span></code></pre>\n    \n    <h3 id=\"dynamic-components\"><span class=\"link\">Componentes dinámicos</span></h3>\n    <p>A veces, es posible que necesite renderizar un componente pero no saber qué componente debe renderizarse hasta el tiempo de ejecución. En esta situación, puede utilizar el <code>dynamic-component</code>componente integrado de Laravel para representar el componente en función de un valor de tiempo de ejecución o una variable:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>dynamic<span class=\"token operator\">-</span>component <span class=\"token punctuation\">:</span>component<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"<span class=\"token interpolation\"><span class=\"token variable\">$componentName</span></span>\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"mt-4\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span></code></pre>\n    \n    <h3 id=\"manually-registering-components\"><span class=\"link\">Registro manual de componentes</span></h3>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>La siguiente documentación sobre el registro manual de componentes se aplica principalmente a aquellos que escriben paquetes de Laravel que incluyen componentes de vista. Si no está escribiendo un paquete, esta parte de la documentación del componente puede no ser relevante para usted.</p></p></div>\n    </blockquote>\n    <p>Al escribir componentes para su propia aplicación, los componentes se descubren automáticamente dentro del <code>app/View/Components</code>directorio y el <code>resources/views/components</code>directorio.</p>\n    <p>Sin embargo, si está creando un paquete que utiliza componentes Blade o colocando componentes en directorios no convencionales, deberá registrar manualmente su clase de componente y su alias de etiqueta HTML para que Laravel sepa dónde encontrar el componente. Por lo general, debe registrar sus componentes en el <code>boot</code>método del proveedor de servicios de su paquete:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Blade</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">VendorPackage<span class=\"token punctuation\">\\</span>View<span class=\"token punctuation\">\\</span>Components<span class=\"token punctuation\">\\</span>AlertComponent</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Bootstrap your package's services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Blade<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'package-alert'</span><span class=\"token punctuation\">,</span> AlertComponent<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Una vez que su componente ha sido registrado, puede ser renderizado usando su alias de etiqueta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>package<span class=\"token operator\">-</span>alert<span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span></code></pre>\n    <h4>Componentes del paquete de carga automática</h4>\n    <p>Alternativamente, puede usar el <code>componentNamespace</code>método para autocargar clases de componentes por convención. Por ejemplo, un <code>Nightshade</code>paquete puede tener <code>Calendar</code>y <code>ColorPicker</code>componentes que residen dentro del <code>Package\\Views\\Components</code>espacio de nombres:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Blade</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Bootstrap your package's services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Blade<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">componentNamespace</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Nightshade\\\\Views\\\\Components'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'nightshade'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Esto permitirá el uso de los componentes del paquete por el espacio de nombres de su proveedor utilizando la <code>package-name::</code>sintaxis:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>nightshade<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>calendar <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>nightshade<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>color<span class=\"token operator\">-</span>picker <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span></code></pre>\n    <p>Blade detectará automáticamente la clase que está vinculada a este componente colocando en mayúsculas y minúsculas el nombre del componente. Los subdirectorios también son compatibles con la notación de \"puntos\".</p>\n    \n    <h2 id=\"building-layouts\"><span class=\"link\">Diseños de edificios</span></h2>\n    \n    <h3 id=\"layouts-using-components\"><span class=\"link\">Diseños que utilizan componentes</span></h3>\n    <p>La mayoría de las aplicaciones web mantienen el mismo diseño general en varias páginas. Sería increíblemente engorroso y difícil mantener nuestra aplicación si tuviéramos que repetir todo el diseño HTML en cada vista que creamos. Afortunadamente, es conveniente definir este diseño como un solo <span class=\"link\">componente Blade</span> y luego usarlo en toda nuestra aplicación.</p>\n    \n    <h4 id=\"defining-the-layout-component\"><span class=\"link\">Definición del componente de diseño</span></h4>\n    <p>Por ejemplo, imagine que estamos creando una aplicación de lista de \"tareas pendientes\". Podríamos definir un <code>layout</code>componente que se parece a lo siguiente:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token comment\">&lt;!-- resources/views/components/layout.blade.php --&gt;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>{{ $title ?? 'Todo Manager' }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Todos<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">/&gt;</span></span>\n        {{ $slot }}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    \n    <h4 id=\"applying-the-layout-component\"><span class=\"link\">Aplicar el componente de diseño</span></h4>\n    <p>Una vez <code>layout</code>que se ha definido el componente, podemos crear una vista Blade que utilice el componente. En este ejemplo, definiremos una vista simple que muestra nuestra lista de tareas:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token comment\">&lt;!-- resources/views/tasks.blade.php --&gt;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-layout</span><span class=\"token punctuation\">&gt;</span></span>\n    @foreach ($tasks as $task)\n        {{ $task }}\n    @endforeach\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-layout</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    <p>Recuerde, el contenido que se inyecta en un componente se proporcionará a la <code>$slot</code>variable predeterminada dentro de nuestro <code>layout</code>componente. Como habrás notado, <code>layout</code>también respetamos un <code>$title</code>espacio si se proporciona uno; de lo contrario, se muestra un título predeterminado. Podemos inyectar un título personalizado desde nuestra vista de lista de tareas usando la sintaxis estándar de ranuras discutida en la <span class=\"link\">documentación del componente</span> :</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token comment\">&lt;!-- resources/views/tasks.blade.php --&gt;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-layout</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>x-slot</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        Custom Title\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-slot</span><span class=\"token punctuation\">&gt;</span></span>\n\n    @foreach ($tasks as $task)\n        {{ $task }}\n    @endforeach\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>x-layout</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    <p>Ahora que hemos definido nuestro diseño y vistas de lista de tareas, solo necesitamos devolver la <code>task</code>vista desde una ruta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Task</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/tasks'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'tasks'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'tasks'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Task<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"layouts-using-template-inheritance\"><span class=\"link\">Diseños que utilizan herencia de plantilla</span></h3>\n    \n    <h4 id=\"defining-a-layout\"><span class=\"link\">Definición de un diseño</span></h4>\n    <p>Los diseños también se pueden crear mediante \"herencia de plantillas\". Esta fue la forma principal de crear aplicaciones antes de la introducción de <span class=\"link\">componentes</span> .</p>\n    <p>Para empezar, echemos un vistazo a un ejemplo sencillo. Primero, examinaremos un diseño de página. Dado que la mayoría de las aplicaciones web mantienen el mismo diseño general en varias páginas, es conveniente definir este diseño como una sola vista Blade:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token comment\">&lt;!-- resources/views/layouts/app.blade.php --&gt;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>App Name - @yield('title')<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n        @section('sidebar')\n            This is the master sidebar.\n        @show\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n            @yield('content')\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    <p>Como puede ver, este archivo contiene un marcado HTML típico. Sin embargo, tenga en cuenta las directivas <code>@section</code>y <code>@yield</code>. La <code>@section</code>directiva, como su nombre lo indica, define una sección de contenido, mientras que la <code>@yield</code>directiva se usa para mostrar el contenido de una sección determinada.</p>\n    <p>Ahora que hemos definido un diseño para nuestra aplicación, definamos una página secundaria que herede el diseño.</p>\n    \n    <h4 id=\"extending-a-layout\"><span class=\"link\">Ampliación de un diseño</span></h4>\n    <p>Al definir una vista secundaria, utilice la <code>@extends</code>directiva Blade para especificar qué diseño debe \"heredar\" la vista secundaria. Las vistas que extienden un diseño Blade pueden inyectar contenido en las secciones del diseño mediante <code>@section</code>directivas. Recuerde, como se ve en el ejemplo anterior, el contenido de estas secciones se mostrará en el diseño usando <code>@yield</code>:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token comment\">&lt;!-- resources/views/child.blade.php --&gt;</span>\n\n@extends('layouts.app')\n\n@section('title', 'Page Title')\n\n@section('sidebar')\n    @parent\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>This is appended to the master sidebar.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n@endsection\n\n@section('content')\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>This is my body content.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n@endsection</code></pre>\n    <p>En este ejemplo, la <code>sidebar</code>sección utiliza la <code>@parent</code>directiva para agregar (en lugar de sobrescribir) contenido a la barra lateral del diseño. La <code>@parent</code>directiva será reemplazada por el contenido del diseño cuando se renderice la vista.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>A diferencia del ejemplo anterior, esta <code>sidebar</code>sección termina con en <code>@endsection</code>lugar de <code>@show</code>. La <code>@endsection</code>directiva solo definirá una sección mientras <code>@show</code>que definirá e <strong>inmediatamente cederá</strong> la sección.</p></p></div>\n    </blockquote>\n    <p>La <code>@yield</code>directiva también acepta un valor predeterminado como segundo parámetro. Este valor se representará si la sección que se obtiene no está definida:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'content'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Default content'</span><span class=\"token punctuation\">)</span></code></pre>\n    \n    <h2 id=\"forms\"><span class=\"link\">Formularios</span></h2>\n    \n    <h3 id=\"csrf-field\"><span class=\"link\">Campo CSRF</span></h3>\n    <p>Siempre que defina un formulario HTML en su aplicación, debe incluir un campo de token CSRF oculto en el formulario para que <span class=\"link\">el</span> middleware de <span class=\"link\">protección CSRF</span> pueda validar la solicitud. Puede usar la <code>@csrf</code>directiva Blade para generar el campo token:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POST<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/profile<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    @csrf\n\n    ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    \n    <h3 id=\"method-field\"><span class=\"link\">Campo de método</span></h3>\n    <p>Dado que los formularios HTML no pueden hacer <code>PUT</code>, <code>PATCH</code>, o <code>DELETE</code>peticiones, tendrá que añadir un escondido <code>_method</code>campo para suplantar estos verbos HTTP. La <code>@method</code>directiva Blade puede crear este campo por usted:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/foo/bar<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POST<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    @method('PUT')\n\n    ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    \n    <h3 id=\"validation-errors\"><span class=\"link\">Errores de validación</span></h3>\n    <p>La <code>@error</code>directiva puede usarse para verificar rápidamente si existen <span class=\"link\">mensajes de error de validación</span> para un atributo dado. Dentro de una <code>@error</code>directiva, puede hacer eco de la <code>$message</code>variable para mostrar el mensaje de error:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token comment\">&lt;!-- /resources/views/post/create.blade.php --&gt;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Post Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@error(<span class=\"token punctuation\">'</span>title<span class=\"token punctuation\">'</span>) is-invalid @enderror<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n@error('title')\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alert alert-danger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>{{ $message }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n@enderror</code></pre>\n    <p>Dado que la <code>@error</code>directiva se compila en una declaración \"if\", puede usar la <code>@else</code>directiva para representar contenido cuando no hay un error para un atributo:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token comment\">&lt;!-- /resources/views/auth.blade.php --&gt;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Email address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@error(<span class=\"token punctuation\">'</span>email<span class=\"token punctuation\">'</span>) is-invalid @else is-valid @enderror<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    <p>Puede pasar <span class=\"link\">el nombre de una bolsa de error específica</span> como segundo parámetro a la <code>@error</code>directiva para recuperar mensajes de error de validación en páginas que contienen múltiples formularios:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token comment\">&lt;!-- /resources/views/auth.blade.php --&gt;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Email address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@error(<span class=\"token punctuation\">'</span>email<span class=\"token punctuation\">'</span>, <span class=\"token punctuation\">'</span>login<span class=\"token punctuation\">'</span>) is-invalid @enderror<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n@error('email', 'login')\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alert alert-danger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>{{ $message }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n@enderror</code></pre>\n    \n    <h2 id=\"stacks\"><span class=\"link\">Pilas</span></h2>\n    <p>Blade le permite empujar a pilas con nombre que se pueden renderizar en otro lugar en otra vista o diseño. Esto puede ser particularmente útil para especificar cualquier biblioteca de JavaScript requerida por sus vistas secundarias:</p>\n    <pre class=\" language-html\"><code class=\" language-html\">@push('scripts')\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/example.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n@endpush</code></pre>\n    <p>Puede empujar a una pila tantas veces como sea necesario. Para representar el contenido completo de la pila, pase el nombre de la pila a la <code>@stack</code>directiva:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Head Contents --&gt;</span>\n\n    @stack('scripts')\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    <p>Si desea anteponer el contenido al comienzo de una pila, debe usar la <code>@prepend</code>directiva:</p>\n    <pre class=\" language-html\"><code class=\" language-html\">@push('scripts')\n    This will be second...\n@endpush\n\n// Later...\n\n@prepend('scripts')\n    This will be first...\n@endprepend</code></pre>\n    \n    <h2 id=\"service-injection\"><span class=\"link\">Inyección de servicio</span></h2>\n    <p>La <code>@inject</code>directiva puede usarse para recuperar un servicio del <span class=\"link\">contenedor de servicios de</span> Laravel . El primer argumento que se pasa <code>@inject</code>es el nombre de la variable en la que se colocará el servicio, mientras que el segundo argumento es el nombre de la clase o interfaz del servicio que desea resolver:</p>\n    <pre class=\" language-html\"><code class=\" language-html\">@inject('metrics', 'App\\Services\\MetricsService')\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n    Monthly Revenue: {{ $metrics-&gt;monthlyRevenue() }}.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    \n    <h2 id=\"extending-blade\"><span class=\"link\">Hoja extensible</span></h2>\n    <p>Blade le permite definir sus propias directivas personalizadas utilizando el <code>directive</code>método. Cuando el compilador Blade encuentra la directiva personalizada, llamará a la devolución de llamada proporcionada con la expresión que contiene la directiva.</p>\n    <p>El siguiente ejemplo crea una <code>@datetime($var)</code>directiva que formatea un determinado <code>$var</code>, que debería ser una instancia de <code>DateTime</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Blade</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>ServiceProvider</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AppServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Register any application services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Blade<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">directive</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'datetime'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$expression</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token double-quoted-string string\">\"&lt;?php echo (<span class=\"token interpolation\"><span class=\"token variable\">$expression</span></span>)-&gt;format('m/d/Y H:i'); ?&gt;\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Como puede ver, encadenaremos el <code>format</code>método a cualquier expresión que se pase a la directiva. Entonces, en este ejemplo, el PHP final generado por esta directiva será:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword\">echo</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$var</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'m/d/Y H:i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token delimiter important\">?&gt;</span></span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Después de actualizar la lógica de una directiva Blade, deberá eliminar todas las vistas Blade almacenadas en caché. Las vistas de Blade almacenadas en caché se pueden eliminar mediante el <code>view:clear</code>comando Artisan.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"custom-echo-handlers\"><span class=\"link\">Controladores de eco personalizados</span></h3>\n    <p>Si intentas \"hacer eco\" de un objeto usando Blade, <code>__toString</code>se invocará el método del objeto . El <span class=\"link\"><code>__toString</code></span>método es uno de los \"métodos mágicos\" incorporados en PHP. Sin embargo, a veces es posible que no tenga control sobre el <code>__toString</code>método de una clase determinada, como cuando la clase con la que está interactuando pertenece a una biblioteca de terceros.</p>\n    <p>En estos casos, Blade le permite registrar un controlador de eco personalizado para ese tipo de objeto en particular. Para lograr esto, debe invocar el <code>stringable</code>método de Blade . El <code>stringable</code>método acepta un cierre. Este cierre debe indicar el tipo de objeto que es responsable de representar. Por lo general, el <code>stringable</code>método debe invocarse dentro del <code>boot</code>método de la <code>AppServiceProvider</code>clase de su aplicación :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Blade</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Money<span class=\"token punctuation\">\\</span>Money</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Bootstrap any application services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Blade<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">stringable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Money <span class=\"token variable\">$money</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$money</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">formatTo</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'en_GB'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Una vez que se ha definido su controlador de eco personalizado, puede simplemente hacer eco del objeto en su plantilla Blade:</p>\n    <pre class=\" language-html\"><code class=\" language-html\">Cost: {{ $money }}</code></pre>\n    \n    <h3 id=\"custom-if-statements\"><span class=\"link\">Declaraciones If personalizadas</span></h3>\n    <p>La programación de una directiva personalizada es a veces más compleja de lo necesario al definir declaraciones condicionales personalizadas simples. Por esa razón, Blade proporciona un <code>Blade::if</code>método que le permite definir rápidamente directivas condicionales personalizadas mediante cierres. Por ejemplo, definamos un condicional personalizado que verifique el \"disco\" predeterminado configurado para la aplicación. Podemos hacer esto en el <code>boot</code>método de nuestro <code>AppServiceProvider</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Blade</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Bootstrap any application services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Blade<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'disk'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'filesystems.default'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Una vez que se ha definido el condicional personalizado, puede usarlo dentro de sus plantillas:</p>\n    <pre class=\" language-html\"><code class=\" language-html\">@disk('local')\n    <span class=\"token comment\">&lt;!-- The application is using the local disk... --&gt;</span>\n@elsedisk('s3')\n    <span class=\"token comment\">&lt;!-- The application is using the s3 disk... --&gt;</span>\n@else\n    <span class=\"token comment\">&lt;!-- The application is using some other disk... --&gt;</span>\n@enddisk\n\n@unlessdisk('local')\n    <span class=\"token comment\">&lt;!-- The application is not using the local disk... --&gt;</span>\n@enddisk</code></pre>\n</div>"
    },
    {
        "title": "Generación de URL",
        "subtitle": "CONCEPTOS BASICOS",
        "contenido": "<div>\n    <h1>Generación de URL</h1>    \n    <h2><span class=\"link\">Introducción</span></h2>\n    <p>Laravel proporciona varios ayudantes para ayudarlo a generar URL para su aplicación. Estos ayudantes son útiles principalmente al crear enlaces en sus plantillas y respuestas de API, o al generar respuestas de redireccionamiento a otra parte de su aplicación.</p>\n    \n    <h2 id=\"the-basics\"><span class=\"link\">Los basicos</span></h2>\n    \n    <h3 id=\"generating-urls\"><span class=\"link\">Generando URL</span></h3>\n    <p>El <code>url</code>ayudante se puede utilizar para generar URL arbitrarias para su aplicación. La URL generada utilizará automáticamente el esquema (HTTP o HTTPS) y el host de la solicitud actual que está manejando la aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$post</span> <span class=\"token operator\">=</span> App\\<span class=\"token package\">Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"/posts/<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// http://example.com/posts/1</span></code></pre>\n    \n    <h3 id=\"accessing-the-current-url\"><span class=\"link\">Accediendo a la URL actual</span></h3>\n    <p>Si no se proporciona una ruta al <code>url</code>asistente, <code>Illuminate\\Routing\\UrlGenerator</code>se devuelve una instancia, lo que le permite acceder a información sobre la URL actual:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Get the current URL without the query string...</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Get the current URL including the query string...</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">full</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Get the full URL for the previous request...</span>\n<span class=\"token keyword\">echo</span> <span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">previous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También se puede acceder a cada uno de estos métodos a través de la <code>URL</code> <span class=\"link\">fachada</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>URL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"urls-for-named-routes\"><span class=\"link\">URL para rutas con nombre</span></h2>\n    <p>El <code>route</code>ayudante se puede utilizar para generar URL a <span class=\"link\">rutas</span> con <span class=\"link\">nombre</span> . Las rutas con nombre le permiten generar URL sin estar acopladas a la URL real definida en la ruta. Por lo tanto, si la URL de la ruta cambia, no es necesario realizar cambios en sus llamadas a la <code>route</code>función. Por ejemplo, imagina que tu aplicación contiene una ruta definida como la siguiente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/post/{post}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Post <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'post.show'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Para generar una URL a esta ruta, puede usar el <code>route</code>ayudante así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">echo</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'post.show'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'post'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// http://example.com/post/1</span></code></pre>\n    <p>Por supuesto, el <code>route</code>ayudante también se puede usar para generar URL para rutas con múltiples parámetros:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/post/{post}/comment/{comment}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Post <span class=\"token variable\">$post</span><span class=\"token punctuation\">,</span> Comment <span class=\"token variable\">$comment</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comment.show'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comment.show'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'post'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'comment'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// http://example.com/post/1/comment/3</span></code></pre>\n    <p>Cualquier elemento de matriz adicional que no se corresponda con los parámetros de definición de la ruta se agregará a la cadena de consulta de la URL:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">echo</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'post.show'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'post'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'search'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'rocket'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// http://example.com/post/1?search=rocket</span></code></pre>\n    \n    <h4 id=\"eloquent-models\"><span class=\"link\">Modelos elocuentes</span></h4>\n    <p>A menudo, generará URL utilizando la clave de ruta (generalmente la clave principal) de los <span class=\"link\">modelos Eloquent</span> . Por esta razón, puede pasar modelos de Eloquent como valores de parámetro. El <code>route</code>ayudante extraerá automáticamente la clave de ruta del modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">echo</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'post.show'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'post'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"signed-urls\"><span class=\"link\">URL firmadas</span></h3>\n    <p>Laravel te permite crear fácilmente URL \"firmadas\" para rutas con nombre. Estas URL tienen un hash de \"firma\" adjunto a la cadena de consulta que permite a Laravel verificar que la URL no ha sido modificada desde que fue creada. Las URL firmadas son especialmente útiles para las rutas que son de acceso público pero que necesitan una capa de protección contra la manipulación de URL.</p>\n    <p>Por ejemplo, puede utilizar URL firmadas para implementar un enlace público de \"cancelación de suscripción\" que se envía por correo electrónico a sus clientes. Para crear una URL firmada a una ruta con nombre, use el <code>signedRoute</code>método de la <code>URL</code>fachada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>URL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">signedRoute</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'unsubscribe'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea generar una URL de ruta firmada temporal que caduque después de un período de tiempo específico, puede utilizar el <code>temporarySignedRoute</code>método. Cuando Laravel valida una URL de ruta firmada temporal, se asegurará de que la marca de tiempo de vencimiento que está codificada en la URL firmada no haya transcurrido:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>URL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">temporarySignedRoute</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'unsubscribe'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">addMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"validating-signed-route-requests\"><span class=\"link\">Validación de solicitudes de ruta firmadas</span></h4>\n    <p>Para verificar que una solicitud entrante tiene una firma válida, debe llamar al <code>hasValidSignature</code>método en la entrante <code>Request</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/unsubscribe/{user}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasValidSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'unsubscribe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Alternativamente, puede asignar el <code>Illuminate\\Routing\\Middleware\\ValidateSignature</code> <span class=\"link\">middleware</span> a la ruta. Si aún no está presente, debe asignar a este middleware una clave en la <code>routeMiddleware</code>matriz de su kernel HTTP :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The application's route middleware.\n *\n * These middleware may be assigned to groups or used individually.\n *\n * @var array\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$routeMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'signed'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Routing<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>ValidateSignature</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Una vez que haya registrado el middleware en su kernel, puede adjuntarlo a una ruta. Si la solicitud entrante no tiene una firma válida, el middleware devolverá automáticamente una <code>403</code>respuesta HTTP:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/unsubscribe/{user}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'unsubscribe'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'signed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"responding-to-invalid-signed-routes\"><span class=\"link\">Responder a rutas firmadas no válidas</span></h4>\n    <p>Cuando alguien visita una URL firmada que ha expirado, recibirá una página de error genérica para el <code>403</code>código de estado HTTP. Sin embargo, puede personalizar este comportamiento definiendo un cierre \"renderizable\" personalizado para la <code>InvalidSignatureException</code>excepción en su controlador de excepciones. Este cierre debería devolver una respuesta HTTP:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Routing<span class=\"token punctuation\">\\</span>Exceptions<span class=\"token punctuation\">\\</span>InvalidSignatureException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Register the exception handling callbacks for the application.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">renderable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>InvalidSignatureException <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'error.link-expired'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">403</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h2 id=\"urls-for-controller-actions\"><span class=\"link\">URL para acciones del controlador</span></h2>\n    <p>La <code>action</code>función genera una URL para la acción del controlador dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>HomeController</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>HomeController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'index'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si el método del controlador acepta parámetros de ruta, puede pasar una matriz asociativa de parámetros de ruta como segundo argumento de la función:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>UserController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'profile'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"default-values\"><span class=\"link\">Valores predeterminados</span></h2>\n    <p>Para algunas aplicaciones, es posible que desee especificar valores predeterminados para toda la solicitud para ciertos parámetros de URL. Por ejemplo, imagina que muchas de tus rutas definen un <code>{locale}</code>parámetro:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/{locale}/posts'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'post.index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Es engorroso pasar siempre <code>locale</code>cada vez que llama al <code>route</code>ayudante. Por lo tanto, puede usar el <code>URL::defaults</code>método para definir un valor predeterminado para este parámetro que siempre se aplicará durante la solicitud actual. Es posible que desee llamar a este método desde un <span class=\"link\">middleware de ruta</span> para tener acceso a la solicitud actual:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Closure</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>URL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SetDefaultLocaleForUrls</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Handle the incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> Closure <span class=\"token variable\">$next</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token constant\">URL</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">defaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'locale'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">locale</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Una vez que se ha establecido el valor predeterminado para el <code>locale</code>parámetro, ya no es necesario que pase su valor al generar URL a través del <code>route</code>asistente.</p>\n    \n    <h4 id=\"url-defaults-middleware-priority\"><span class=\"link\">Valores predeterminados de URL y prioridad de middleware</span></h4>\n    <p>Establecer valores predeterminados de URL puede interferir con el manejo de Laravel de los enlaces de modelos implícitos. Por lo tanto, debe <span class=\"link\">priorizar su middleware</span> que establece los valores predeterminados de URL para que se ejecuten antes que el propio <code>SubstituteBindings</code>middleware de Laravel . Puede lograr esto asegurándose de que su middleware se produzca antes que el <code>SubstituteBindings</code>middleware dentro de la <code>$middlewarePriority</code>propiedad del kernel HTTP de su aplicación.</p>\n    <p>La <code>$middlewarePriority</code>propiedad está definida en la <code>Illuminate\\Foundation\\Http\\Kernel</code>clase base . Puede copiar su definición de esa clase y sobrescribirla en el kernel HTTP de su aplicación para modificarla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The priority-sorted list of middleware.\n *\n * This forces non-global middleware to always be in the given order.\n *\n * @var array\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$middlewarePriority</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// ...</span>\n     \\<span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>SetDefaultLocaleForUrls</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n     \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Routing<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>SubstituteBindings</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n     <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n</div>"
    },
    {
        "title": "Sesión",
        "subtitle": "CONCEPTOS BASICOS",
        "contenido": "<div>\n    <h1>Sesión HTTP</h1>    \n    <h2><span class=\"link\">Introducción</span></h2>\n    <p>Dado que las aplicaciones controladas por HTTP no tienen estado, las sesiones proporcionan una forma de almacenar información sobre el usuario a través de múltiples solicitudes. Esa información del usuario generalmente se coloca en un almacén / backend persistente al que se puede acceder desde solicitudes posteriores.</p>\n    <p>Laravel se envía con una variedad de backends de sesión a los que se accede a través de una API unificada y expresiva. Se incluye soporte para backends populares como <span class=\"link\">Memcached</span> , <span class=\"link\">Redis</span> y bases de datos.</p>\n    \n    <h3><span class=\"link\">Configuración</span></h3>\n    <p>El archivo de configuración de sesión de su aplicación se almacena en <code>config/session.php</code>. Asegúrese de revisar las opciones disponibles para usted en este archivo. De forma predeterminada, Laravel está configurado para usar el <code>file</code>controlador de sesión, que funcionará bien para muchas aplicaciones. Si la carga de su aplicación se equilibrará en varios servidores web, debe elegir una tienda centralizada a la que puedan acceder todos los servidores, como Redis o una base de datos.</p>\n    <p>La <code>driver</code>opción de configuración de la sesión define dónde se almacenarán los datos de la sesión para cada solicitud. Laravel se envía con varios controladores geniales listos para usar:</p>\n    <div class=\"content-list\">\n        <ul>\n            <li><code>file</code>- las sesiones se almacenan en formato <code>storage/framework/sessions</code>.</li>\n            <li><code>cookie</code> - las sesiones se almacenan en cookies seguras y cifradas.</li>\n            <li><code>database</code> - las sesiones se almacenan en una base de datos relacional.</li>\n            <li><code>memcached</code>/ <code>redis</code>- las sesiones se almacenan en uno de estos almacenes rápidos basados \u200B\u200Ben caché.</li>\n            <li><code>dynamodb</code> - las sesiones se almacenan en AWS DynamoDB.</li>\n            <li><code>array</code> - las sesiones se almacenan en una matriz PHP y no se conservarán.</li>\n        </ul>\n    </div>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>El controlador de matriz se utiliza principalmente durante las <span class=\"link\">pruebas</span> y evita que los datos almacenados en la sesión se conserven.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"driver-prerequisites\"><span class=\"link\">Requisitos previos del controlador</span></h3>\n    \n    <h4 id=\"database\"><span class=\"link\">Base de datos</span></h4>\n    <p>Cuando utilice el <code>database</code>controlador de sesión, deberá crear una tabla que contenga los registros de la sesión. A <code>Schema</code>continuación, se puede encontrar un ejemplo de declaración para la tabla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'sessions'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">primary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">foreignId</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user_id'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">nullable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'ip_address'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">nullable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user_agent'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">nullable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'payload'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">integer</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'last_activity'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede utilizar el <code>session:table</code>comando Artisan para generar esta migración. Para obtener más información sobre las migraciones de bases de datos, puede consultar la <span class=\"link\">documentación de migración</span> completa :</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan session<span class=\"token punctuation\">:</span>table\n\nphp artisan migrate</code></pre>\n    \n    <h4 id=\"redis\"><span class=\"link\">Redis</span></h4>\n    <p>Antes de usar las sesiones de Redis con Laravel, deberá instalar la extensión PHP PhpRedis a través de PECL o instalar el <code>predis/predis</code>paquete (~ 1.0) a través de Composer. Para obtener más información sobre la configuración de Redis, consulte la <span class=\"link\">documentación de Redis</span> de Laravel .</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>En el <code>session</code>archivo de configuración, la <code>connection</code>opción se puede usar para especificar qué conexión de Redis usa la sesión.</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"interacting-with-the-session\"><span class=\"link\">Interactuar con la sesión</span></h2>\n    \n    <h3 id=\"retrieving-data\"><span class=\"link\">Recuperando datos</span></h3>\n    <p>Hay dos formas principales de trabajar con datos de sesión en Laravel: el <code>session</code>asistente global y a través de una <code>Request</code>instancia. Primero, veamos cómo acceder a la sesión a través de una <code>Request</code>instancia, que se puede insinuar en un método de cierre de ruta o controlador. Recuerde, las dependencias del método del controlador se inyectan automáticamente a través del <span class=\"link\">contenedor de servicios de</span> Laravel :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Show the profile for the given user.\n     *\n     * @param  Request  $request\n     * @param  int  $id\n     * @return Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Cuando recupera un elemento de la sesión, también puede pasar un valor predeterminado como segundo argumento del <code>get</code>método. Este valor predeterminado se devolverá si la clave especificada no existe en la sesión. Si pasa un cierre como valor predeterminado al <code>get</code>método y la clave solicitada no existe, el cierre se ejecutará y se devolverá su resultado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'default'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'default'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"the-global-session-helper\"><span class=\"link\">El asistente de sesión global</span></h4>\n    <p>También puede utilizar la <code>session</code>función PHP global para recuperar y almacenar datos en la sesión. Cuando <code>session</code>se llama al ayudante con un solo argumento de cadena, devolverá el valor de esa clave de sesión. Cuando se llama al asistente con una matriz de pares clave / valor, esos valores se almacenarán en la sesión:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/home'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Retrieve a piece of data from the session...</span>\n    <span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Specifying a default value...</span>\n    <span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'default'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Store a piece of data in the session...</span>\n    <span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'key'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Hay poca diferencia práctica entre usar la sesión a través de una instancia de solicitud HTTP y usar el <code>session</code>ayudante global . Ambos métodos se pueden <span class=\"link\">probar a</span> través del <code>assertSessionHas</code>método que está disponible en todos sus casos de prueba.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"retrieving-all-session-data\"><span class=\"link\">Recuperar todos los datos de la sesión</span></h4>\n    <p>Si desea recuperar todos los datos de la sesión, puede utilizar el <code>all</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"determining-if-an-item-exists-in-the-session\"><span class=\"link\">Determinar si existe un elemento en la sesión</span></h4>\n    <p>Para determinar si un elemento está presente en la sesión, puede utilizar el <code>has</code>método. El <code>has</code>método regresa <code>true</code>si el artículo está presente y no <code>null</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Para determinar si un elemento está presente en la sesión, incluso si su valor lo es <code>null</code>, puede usar el <code>exists</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Para determinar si un elemento no está presente en la sesión, puede utilizar el <code>missing</code>método. El <code>missing</code>método devuelve <code>true</code>si el artículo está <code>null</code>o si el artículo no está presente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">missing</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"storing-data\"><span class=\"link\">Almacenamiento de datos</span></h3>\n    <p>Para almacenar datos en la sesión, normalmente utilizará el <code>put</code>método de la instancia de solicitud o el <code>session</code>asistente global :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Via a request instance...</span>\n<span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Via the global \"session\" helper...</span>\n<span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'key'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"pushing-to-array-session-values\"><span class=\"link\">Empujar a matriz de valores de sesión</span></h4>\n    <p>El <code>push</code>método puede usarse para insertar un nuevo valor en un valor de sesión que es una matriz. Por ejemplo, si la <code>user.teams</code>clave contiene una matriz de nombres de equipos, puede insertar un nuevo valor en la matriz de la siguiente manera:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user.teams'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'developers'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"retrieving-deleting-an-item\"><span class=\"link\">Recuperar y eliminar un elemento</span></h4>\n    <p>El <code>pull</code>método recuperará y eliminará un elemento de la sesión en una sola declaración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pull</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'default'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"#incrementing-and-decrementing-session-values\"><span class=\"link\">Incrementar y decrementar los valores de la sesión</span></h4>\n    <p>Si los datos de su sesión contienen un número entero que desea incrementar o disminuir, puede usar los métodos <code>increment</code>y <code>decrement</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'count'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'count'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$incrementBy</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'count'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'count'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$decrementBy</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"flash-data\"><span class=\"link\">Datos flash</span></h3>\n    <p>A veces, es posible que desee almacenar elementos en la sesión para la próxima solicitud. Puede hacerlo utilizando el <code>flash</code>método. Los datos almacenados en la sesión que utiliza este método estarán disponibles inmediatamente y durante la siguiente solicitud HTTP. Después de la siguiente solicitud HTTP, se eliminarán los datos actualizados. Los datos flash son útiles principalmente para mensajes de estado de corta duración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">flash</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'status'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Task was successful!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si necesita conservar sus datos flash para varias solicitudes, puede utilizar el <code>reflash</code>método, que conservará todos los datos flash para una solicitud adicional. Si solo necesita mantener datos flash específicos, puede usar el <code>keep</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">reflash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">keep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'username'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Para conservar sus datos flash solo para la solicitud actual, puede usar el <code>now</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'status'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Task was successful!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"deleting-data\"><span class=\"link\">Eliminar datos</span></h3>\n    <p>El <code>forget</code>método eliminará una parte de los datos de la sesión. Si desea eliminar todos los datos de la sesión, puede utilizar el <code>flush</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Forget a single key...</span>\n<span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">forget</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Forget multiple keys...</span>\n<span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">forget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'status'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"regenerating-the-session-id\"><span class=\"link\">Regenerando el ID de sesión</span></h3>\n    <p>La regeneración del ID de sesión se realiza a menudo para evitar que usuarios malintencionados aprovechen un ataque de <span class=\"link\">fijación de sesión</span> en su aplicación.</p>\n    <p>Laravel regenera automáticamente la ID de sesión durante la autenticación si está utilizando uno de los <span class=\"link\">kits de inicio</span> de la <span class=\"link\">aplicación </span><span class=\"link\">Laravel</span> o <span class=\"link\">Laravel Fortify</span> ; sin embargo, si necesita regenerar manualmente el ID de sesión, puede usar el <code>regenerate</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">regenerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si necesita volver a generar el ID de sesión y eliminar todos los datos de la sesión en una sola declaración, puede usar el <code>invalidate</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">invalidate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"session-blocking\"><span class=\"link\">Bloqueo de sesiones</span></h2>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Para utilizar el bloqueo de sesión, su aplicación debe utilizar un controlador de caché que admita <span class=\"link\">bloqueos atómicos</span> . Actualmente, los conductores de caché incluyen las <code>memcached</code>, <code>dynamodb</code>, <code>redis</code>, y <code>database</code>los conductores. Además, no puede utilizar el <code>cookie</code>controlador de sesión.</p></p></div>\n    </blockquote>\n    <p>De forma predeterminada, Laravel permite que las solicitudes que usan la misma sesión se ejecuten simultáneamente. Entonces, por ejemplo, si usa una biblioteca HTTP de JavaScript para realizar dos solicitudes HTTP a su aplicación, ambas se ejecutarán al mismo tiempo. Para muchas aplicaciones, esto no es un problema; sin embargo, la pérdida de datos de la sesión puede ocurrir en un pequeño subconjunto de aplicaciones que realizan solicitudes simultáneas a dos puntos finales de aplicaciones diferentes que escriben datos en la sesión.</p>\n    <p>Para mitigar esto, Laravel proporciona una funcionalidad que le permite limitar las solicitudes simultáneas para una sesión determinada. Para comenzar, simplemente puede encadenar el <code>block</code>método a la definición de su ruta. En este ejemplo, una solicitud entrante al <code>/profile</code>punto final adquiriría un bloqueo de sesión. Mientras se mantiene este bloqueo, cualquier solicitud entrante a los puntos finales <code>/profile</code>o <code>/order</code>que comparten el mismo ID de sesión esperará a que la primera solicitud termine de ejecutarse antes de continuar con su ejecución:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/profile'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$lockSeconds</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$waitSeconds</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/order'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$lockSeconds</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$waitSeconds</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></code></pre>\n    <p>El <code>block</code>método acepta dos argumentos opcionales. El primer argumento aceptado por el <code>block</code>método es el número máximo de segundos que debe mantenerse el bloqueo de la sesión antes de que se libere. Por supuesto, si la solicitud termina de ejecutarse antes de este tiempo, el bloqueo se liberará antes.</p>\n    <p>El segundo argumento aceptado por el <code>block</code>método es la cantidad de segundos que debe esperar una solicitud mientras intenta obtener un bloqueo de sesión. Se <code>Illuminate\\Contracts\\Cache\\LockTimeoutException</code>lanzará un si la solicitud no puede obtener un bloqueo de sesión dentro del número dado de segundos.</p>\n    <p>Si no se pasa ninguno de estos argumentos, el bloqueo se obtendrá durante un máximo de 10 segundos y las solicitudes esperarán un máximo de 10 segundos mientras intentan obtener un bloqueo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/profile'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n    \n    <h2 id=\"adding-custom-session-drivers\"><span class=\"link\">Agregar controladores de sesión personalizados</span></h2>\n    \n    <h4 id=\"implementing-the-driver\"><span class=\"link\">Implementando el controlador</span></h4>\n    <p>Si ninguno de los controladores de sesión existentes se ajusta a las necesidades de su aplicación, Laravel hace posible escribir su propio controlador de sesión. Su controlador de sesión personalizado debe implementar PHP incorporado <code>SessionHandlerInterface</code>. Esta interfaz contiene solo algunos métodos simples. Una implementación de MongoDB con código auxiliar tiene el siguiente aspecto:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Extensions</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MongoSessionHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token punctuation\">\\</span>SessionHandlerInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$savePath</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$sessionName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sessionId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sessionId</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sessionId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$lifetime</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Laravel no se envía con un directorio que contenga sus extensiones. Puede colocarlos en cualquier lugar que desee. En este ejemplo, hemos creado un <code>Extensions</code>directorio para albergar el <code>MongoSessionHandler</code>.</p></p></div>\n    </blockquote>\n    <p>Dado que el propósito de estos métodos no es fácilmente comprensible, cubramos rápidamente lo que hace cada uno de los métodos:</p>\n    <div class=\"content-list\">\n        <ul>\n            <li>El <code>open</code>método se utilizaría normalmente en sistemas de almacenamiento de sesiones basados \u200B\u200Ben archivos. Dado que Laravel se envía con un <code>file</code>controlador de sesión, rara vez necesitará poner nada en este método. Simplemente puede dejar este método vacío.</li>\n            <li>El <code>close</code>método, al igual que el <code>open</code>método, generalmente también puede ignorarse. Para la mayoría de los conductores, no es necesario.</li>\n            <li>El <code>read</code>método debe devolver la versión de cadena de los datos de sesión asociados con el dado <code>$sessionId</code>. No es necesario realizar ninguna serialización u otra codificación al recuperar o almacenar datos de sesión en su controlador, ya que Laravel realizará la serialización por usted.</li>\n            <li>El <code>write</code>método debe escribir la <code>$data</code>cadena dada asociada con el <code>$sessionId</code>en algún sistema de almacenamiento persistente, como MongoDB u otro sistema de almacenamiento de su elección. Nuevamente, no debe realizar ninguna serialización: Laravel ya lo habrá manejado por usted.</li>\n            <li>El <code>destroy</code>método debe eliminar los datos asociados con el <code>$sessionId</code>del almacenamiento persistente.</li>\n            <li>El <code>gc</code>método debe destruir todos los datos de la sesión que sean más antiguos que los indicados <code>$lifetime</code>, que es una marca de tiempo de UNIX. Para sistemas que caducan automáticamente como Memcached y Redis, este método puede dejarse vacío.</li>\n        </ul>\n    </div>\n    \n    <h4 id=\"registering-the-driver\"><span class=\"link\">Registro del conductor</span></h4>\n    <p>Una vez que se haya implementado su controlador, estará listo para registrarlo con Laravel. Para agregar controladores adicionales al backend de la sesión de Laravel, puede usar el <code>extend</code>método proporcionado por la <code>Session</code> <span class=\"link\">fachada</span> . Debe llamar al <code>extend</code>método desde el <code>boot</code>método de un <span class=\"link\">proveedor de servicios</span> . Puede hacer esto desde el <code>App\\Providers\\AppServiceProvider</code>proveedor existente o crear un proveedor completamente nuevo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Extensions<span class=\"token punctuation\">\\</span>MongoSessionHandler</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Session</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>ServiceProvider</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SessionServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Register any application services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Session<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'mongo'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$app</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Return an implementation of SessionHandlerInterface...</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MongoSessionHandler</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Una vez que se haya registrado el controlador de sesión, puede utilizar el <code>mongo</code>controlador en su <code>config/session.php</code>archivo de configuración.</p>\n</div>"
    },
    {
        "title": "Validación",
        "subtitle": "CONCEPTOS BASICOS",
        "contenido": "<div>\n    <h1>Validación</h1>\n    <h2><span class=\"link\">Introducción</span></h2>\n    <p>Laravel proporciona varios enfoques diferentes para validar los datos entrantes de su aplicación. Es más común utilizar el <code>validate</code>método disponible en todas las solicitudes HTTP entrantes. Sin embargo, también discutiremos otros enfoques para la validación.</p>\n    <p>Laravel incluye una amplia variedad de reglas de validación convenientes que puede aplicar a los datos, incluso brindando la capacidad de validar si los valores son únicos en una tabla de base de datos determinada. Cubriremos cada una de estas reglas de validación en detalle para que esté familiarizado con todas las funciones de validación de Laravel.</p>\n    \n    <h2 id=\"validation-quickstart\"><span class=\"link\">Inicio rápido de validación</span></h2>\n    <p>Para conocer las potentes funciones de validación de Laravel, veamos un ejemplo completo de cómo validar un formulario y mostrar los mensajes de error al usuario. Al leer esta descripción general de alto nivel, podrá obtener una buena comprensión general de cómo validar los datos de las solicitudes entrantes utilizando Laravel:</p>\n    \n    <h3 id=\"quick-defining-the-routes\"><span class=\"link\">Definiendo las rutas</span></h3>\n    <p>Primero, supongamos que tenemos las siguientes rutas definidas en nuestro <code>routes/web.php</code>archivo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>PostController</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/post/create'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>PostController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'create'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/post'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>PostController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'store'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>La <code>GET</code>ruta mostrará un formulario para que el usuario cree una nueva publicación de blog, mientras que la <code>POST</code>ruta almacenará la nueva publicación de blog en la base de datos.</p>\n    \n    <h3 id=\"quick-creating-the-controller\"><span class=\"link\">Creando el controlador</span></h3>\n    <p>A continuación, echemos un vistazo a un controlador simple que maneja las solicitudes entrantes a estas rutas. Dejaremos el <code>store</code>método vacío por ahora:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PostController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Show the form to create a new blog post.\n     *\n     * @return \\Illuminate\\View\\View\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'post.create'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Store a new blog post.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">store</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Validate and store the blog post...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h3 id=\"quick-writing-the-validation-logic\"><span class=\"link\">Escribir la lógica de validación</span></h3>\n    <p>Ahora estamos listos para completar nuestro <code>store</code>método con la lógica para validar la nueva publicación del blog. Para hacer esto, usaremos el <code>validate</code>método provisto por el <code>Illuminate\\Http\\Request</code>objeto. Si pasan las reglas de validación, su código seguirá ejecutándose normalmente; sin embargo, si la validación falla, se lanzará una excepción y la respuesta de error adecuada se enviará automáticamente al usuario.</p>\n    <p>Si la validación falla durante una solicitud HTTP tradicional, se generará una respuesta de redireccionamiento a la URL anterior. Si la solicitud entrante es una solicitud XHR, se devolverá una respuesta JSON que contiene los mensajes de error de validación.</p>\n    <p>Para comprender mejor el <code>validate</code>método, regresemos al <code>store</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Store a new blog post.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return \\Illuminate\\Http\\Response\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">store</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$validated</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required|unique:posts|max:255'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'body'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// The blog post is valid...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Como puede ver, las reglas de validación se pasan al <code>validate</code>método. No se preocupe, todas las reglas de validación disponibles están <span class=\"link\">documentadas</span> . Nuevamente, si la validación falla, se generará automáticamente la respuesta adecuada. Si la validación pasa, nuestro controlador continuará ejecutándose normalmente.</p>\n    <p>Alternativamente, las reglas de validación se pueden especificar como matrices de reglas en lugar de una sola <code>|</code>cadena delimitada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$validatedData</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'unique:posts'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'max:255'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'body'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Además, puede utilizar el <code>validateWithBag</code>método para validar una solicitud y almacenar cualquier mensaje de error dentro de una <span class=\"link\">bolsa de error con nombre</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$validatedData</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">validateWithBag</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'post'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'unique:posts'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'max:255'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'body'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"stopping-on-first-validation-failure\"><span class=\"link\">Detención ante la primera falla de validación</span></h4>\n    <p>A veces, es posible que desee dejar de ejecutar reglas de validación en un atributo después del primer error de validación. Para hacerlo, asigne la <code>bail</code>regla al atributo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'bail|required|unique:posts|max:255'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'body'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>En este ejemplo, si la <code>unique</code>regla del <code>title</code>atributo falla, <code>max</code>no se verificará la regla. Las reglas se validarán en el orden en que se asignan.</p>\n    \n    <h4 id=\"a-note-on-nested-attributes\"><span class=\"link\">Una nota sobre los atributos anidados</span></h4>\n    <p>Si la solicitud HTTP entrante contiene datos de campo \"anidados\", puede especificar estos campos en sus reglas de validación utilizando la sintaxis de \"punto\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required|unique:posts|max:255'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'author.name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'author.description'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Por otro lado, si el nombre de su campo contiene un período literal, puede evitar explícitamente que esto se interprete como sintaxis de \"punto\" escapando del período con una barra invertida:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required|unique:posts|max:255'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'v1\\.0'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"quick-displaying-the-validation-errors\"><span class=\"link\">Visualización de los errores de validación</span></h3>\n    <p>Entonces, ¿qué pasa si los campos de solicitud entrante no pasan las reglas de validación dadas? Como se mencionó anteriormente, Laravel redirigirá automáticamente al usuario a su ubicación anterior. Además, todos los errores de validación y la <span class=\"link\">solicitud de entrada se</span> mostrarán automáticamente <span class=\"link\">a la sesión</span> .</p>\n    <p>El middleware, que es proporcionado por el grupo de middleware, <code>$errors</code>comparte una variable con todas las vistas de su aplicación . Cuando se aplica este middleware , siempre habrá una variable disponible en sus vistas, lo que le permitirá asumir convenientemente que la variable siempre está definida y se puede utilizar de forma segura. La variable será una instancia de . Para obtener más información sobre <span class=\"link\">cómo</span> trabajar con este objeto, <span class=\"link\">consulte su documentación</span> .<code>Illuminate\\View\\Middleware\\ShareErrorsFromSession</code><code>web</code><code>$errors</code><code>$errors</code><code>$errors</code><code>Illuminate\\Support\\MessageBag</code><span class=\"link\"></span></p>\n    <p>Entonces, en nuestro ejemplo, el usuario será redirigido al <code>create</code>método de nuestro controlador cuando falla la validación, lo que nos permite mostrar los mensajes de error en la vista:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token comment\">&lt;!-- /resources/views/post/create.blade.php --&gt;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>Create Post<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n\n@if ($errors-&gt;any())\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alert alert-danger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n            @foreach ($errors-&gt;all() as $error)\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>{{ $error }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n            @endforeach\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n@endif\n\n<span class=\"token comment\">&lt;!-- Create Post Form --&gt;</span></code></pre>\n    \n    <h4 id=\"quick-customizing-the-error-messages\"><span class=\"link\">Personalización de los mensajes de error</span></h4>\n    <p>Cada una de las reglas de validación integradas de Laravel tiene un mensaje de error que se encuentra en el <code>resources/lang/en/validation.php</code>archivo de su aplicación . Dentro de este archivo, encontrará una entrada de traducción para cada regla de validación. Puede cambiar o modificar estos mensajes según las necesidades de su aplicación.</p>\n    <p>Además, puede copiar este archivo a otro directorio de idioma de traducción para traducir los mensajes al idioma de su aplicación. Para obtener más información sobre la localización de Laravel, consulte la <span class=\"link\">documentación de localización</span> completa .</p>\n    \n    <h4 id=\"quick-xhr-requests-and-validation\"><span class=\"link\">Solicitudes y validación de XHR</span></h4>\n    <p>En este ejemplo, usamos un formulario tradicional para enviar datos a la aplicación. Sin embargo, muchas aplicaciones reciben solicitudes XHR desde una interfaz con JavaScript. Cuando se usa el <code>validate</code>método durante una solicitud XHR, Laravel no generará una respuesta de redireccionamiento. En cambio, Laravel genera una respuesta JSON que contiene todos los errores de validación. Esta respuesta JSON se enviará con un código de estado HTTP 422.</p>\n    \n    <h4 id=\"the-at-error-directive\"><span class=\"link\">La <code>@error</code>directiva</span></h4>\n    <p>Puede utilizar la directiva <code>@error</code> <span class=\"link\">Blade</span> para determinar rápidamente si existen mensajes de error de validación para un atributo determinado. Dentro de una <code>@error</code>directiva, puede hacer eco de la <code>$message</code>variable para mostrar el mensaje de error:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token comment\">&lt;!-- /resources/views/post/create.blade.php --&gt;</span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>Post Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@error(<span class=\"token punctuation\">'</span>title<span class=\"token punctuation\">'</span>) is-invalid @enderror<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n@error('title')\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>alert alert-danger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>{{ $message }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n@enderror</code></pre>\n    <p>Si está utilizando <span class=\"link\">bolsas de error</span> con <span class=\"link\">nombre</span> , puede pasar el nombre de la bolsa de error como segundo argumento de la <code>@error</code>directiva:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">...</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@error(<span class=\"token punctuation\">'</span>title<span class=\"token punctuation\">'</span>, <span class=\"token punctuation\">'</span>post<span class=\"token punctuation\">'</span>) is-invalid @enderror<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    \n    <h3 id=\"repopulating-forms\"><span class=\"link\">Formularios de repoblación</span></h3>\n    <p>Cuando Laravel genera una respuesta de redireccionamiento debido a un error de validación, el marco mostrará automáticamente <span class=\"link\">todas las entradas de la solicitud a la sesión</span> . Esto se hace para que pueda acceder cómodamente a la entrada durante la próxima solicitud y volver a completar el formulario que el usuario intentó enviar.</p>\n    <p>Para recuperar la entrada flasheada de la solicitud anterior, invoque el <code>old</code>método en una instancia de <code>Illuminate\\Http\\Request</code>. El <code>old</code>método extraerá los datos de entrada previamente mostrados de la <span class=\"link\">sesión</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$title</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">old</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Laravel también proporciona un <code>old</code>ayudante global . Si está mostrando una entrada antigua dentro de una <span class=\"link\">plantilla Blade</span> , es más conveniente usar el <code>old</code>asistente para volver a llenar el formulario. Si no existe una entrada anterior para el campo dado, <code>null</code>se devolverá:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"title\"</span> value<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"{{ old('title') }}\"</span><span class=\"token operator\">&gt;</span></code></pre>\n    \n    <h3 id=\"a-note-on-optional-fields\"><span class=\"link\">Una nota sobre los campos opcionales</span></h3>\n    <p>De forma predeterminada, Laravel incluye el middleware <code>TrimStrings</code>y <code>ConvertEmptyStringsToNull</code>en la pila de middleware global de su aplicación. Estos middleware se enumeran en la pila por <code>App\\Http\\Kernel</code>clase. Debido a esto, a menudo necesitará marcar sus campos de solicitud \"opcionales\" como <code>nullable</code>si no quisiera que el validador considere los <code>null</code>valores como no válidos. Por ejemplo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required|unique:posts|max:255'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'body'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'publish_at'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'nullable|date'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>En este ejemplo, estamos especificando que el <code>publish_at</code>campo puede ser <code>null</code>o una representación de fecha válida. Si el <code>nullable</code>modificador no se agrega a la definición de la regla, el validador consideraría <code>null</code>una fecha no válida.</p>\n    \n    <h2 id=\"form-request-validation\"><span class=\"link\">Validación de solicitud de formulario</span></h2>\n    \n    <h3 id=\"creating-form-requests\"><span class=\"link\">Crear solicitudes de formulario</span></h3>\n    <p>Para escenarios de validación más complejos, es posible que desee crear una \"solicitud de formulario\". Las solicitudes de formulario son clases de solicitud personalizadas que encapsulan su propia lógica de validación y autorización. Para crear una clase de solicitud de formulario, puede utilizar el <code>make:request</code>comando de la CLI de Artisan:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>request StorePostRequest</code></pre>\n    <p>La clase de solicitud de formulario generada se colocará en el <code>app/Http/Requests</code>directorio. Si este directorio no existe, se creará cuando ejecute el <code>make:request</code>comando. Cada solicitud de formulario generada por Laravel tiene dos métodos: <code>authorize</code>y <code>rules</code>.</p>\n    <p>Como habrás adivinado, el <code>authorize</code>método es responsable de determinar si el usuario actualmente autenticado puede realizar la acción representada por la solicitud, mientras que el <code>rules</code>método devuelve las reglas de validación que deben aplicarse a los datos de la solicitud:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the validation rules that apply to the request.\n *\n * @return array\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">rules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required|unique:posts|max:255'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'body'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Puede escribir sugerencias sobre las dependencias que necesite dentro de la <code>rules</code>firma del método. Se resolverán automáticamente a través del <span class=\"link\">contenedor de servicios de</span> Laravel .</p></p></div>\n    </blockquote>\n    <p>Entonces, ¿cómo se evalúan las reglas de validación? Todo lo que necesita hacer es escribir la solicitud en el método de su controlador. La solicitud de formulario entrante se valida antes de que se llame al método del controlador, lo que significa que no necesita saturar su controlador con ninguna lógica de validación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Store a new blog post.\n *\n * @param  \\App\\Http\\Requests\\StorePostRequest  $request\n * @return Illuminate\\Http\\Response\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">store</span><span class=\"token punctuation\">(</span>StorePostRequest <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The incoming request is valid...</span>\n\n    <span class=\"token comment\">// Retrieve the validated input data...</span>\n    <span class=\"token variable\">$validated</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">validated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Retrieve a portion of the validated input data...</span>\n    <span class=\"token variable\">$validated</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$validated</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">except</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Si la validación falla, se generará una respuesta de redireccionamiento para enviar al usuario a su ubicación anterior. Los errores también se mostrarán en la sesión para que estén disponibles para su visualización. Si la solicitud fue una solicitud XHR, se devolverá al usuario una respuesta HTTP con un código de estado 422, incluida una representación JSON de los errores de validación.</p>\n    \n    <h4 id=\"adding-after-hooks-to-form-requests\"><span class=\"link\">Agregar ganchos posteriores a solicitudes de formulario</span></h4>\n    <p>Si desea agregar un gancho de validación \"después\" a una solicitud de formulario, puede usar el <code>withValidator</code>método. Este método recibe el validador completamente construido, lo que le permite llamar a cualquiera de sus métodos antes de que se evalúen las reglas de validación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Configure the validator instance.\n *\n * @param  \\Illuminate\\Validation\\Validator  $validator\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">withValidator</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$validator</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$validator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$validator</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">somethingElseIsInvalid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$validator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">errors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'field'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Something is wrong with this field!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"request-stopping-on-first-validation-rule-failure\"><span class=\"link\">Detención en el atributo de falla de la primera validación</span></h4>\n    <p>Al agregar una <code>stopOnFirstFailure</code>propiedad a su clase de solicitud, puede informar al validador que debe dejar de validar todos los atributos una vez que se haya producido un solo error de validación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Indicates if the validator should stop on the first rule failure.\n *\n * @var bool\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$stopOnFirstFailure</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"customizing-the-redirect-location\"><span class=\"link\">Personalización de la ubicación de redireccionamiento</span></h4>\n    <p>Como se mencionó anteriormente, se generará una respuesta de redireccionamiento para enviar al usuario de regreso a su ubicación anterior cuando falle la validación de la solicitud del formulario. Sin embargo, puede personalizar este comportamiento. Para hacerlo, defina una <code>$redirect</code>propiedad en su solicitud de formulario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The URI that users should be redirected to if validation fails.\n *\n * @var string\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$redirect</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'/dashboard'</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>O, si desea redirigir a los usuarios a una ruta con nombre, puede definir una <code>$redirectRoute</code>propiedad en su lugar:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The route that users should be redirected to if validation fails.\n *\n * @var string\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$redirectRoute</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'dashboard'</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"authorizing-form-requests\"><span class=\"link\">Autorización de solicitudes de formulario</span></h3>\n    <p>La clase de solicitud de formulario también contiene un <code>authorize</code>método. Dentro de este método, puede determinar si el usuario autenticado realmente tiene la autoridad para actualizar un recurso determinado. Por ejemplo, puede determinar si un usuario es propietario de un comentario de blog que está intentando actualizar. Lo más probable es que interactúe con sus <span class=\"link\">puertas de autorización y políticas</span> dentro de este método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Comment</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Determine if the user is authorized to make this request.\n *\n * @return bool\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">authorize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$comment</span> <span class=\"token operator\">=</span> Comment<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comment'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$comment</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">can</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'update'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$comment</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Dado que todas las solicitudes de formulario extienden la clase de solicitud base de Laravel, podemos usar el <code>user</code>método para acceder al usuario actualmente autenticado. Además, tenga en cuenta la llamada al <code>route</code>método en el ejemplo anterior. Este método le otorga acceso a los parámetros de URI definidos en la ruta que se llama, como el <code>{comment}</code>parámetro en el ejemplo siguiente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/comment/{comment}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Por lo tanto, si su aplicación está aprovechando el <span class=\"link\">enlace del modelo</span> de <span class=\"link\">ruta</span> , su código puede hacerse aún más conciso al acceder al modelo resuelto como una propiedad de la solicitud:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">can</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'update'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">comment</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si el <code>authorize</code>método regresa <code>false</code>, se devolverá automáticamente una respuesta HTTP con un código de estado 403 y su método de controlador no se ejecutará.</p>\n    <p>Si planea manejar la lógica de autorización para la solicitud en otra parte de su aplicación, simplemente puede regresar <code>true</code>del <code>authorize</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Determine if the user is authorized to make this request.\n *\n * @return bool\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">authorize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Puede escribir sugerencias sobre las dependencias que necesite dentro de la <code>authorize</code>firma del método. Se resolverán automáticamente a través del <span class=\"link\">contenedor de servicios de</span> Laravel .</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"customizing-the-error-messages\"><span class=\"link\">Personalización de los mensajes de error</span></h3>\n    <p>Puede personalizar los mensajes de error utilizados por la solicitud de formulario anulando el <code>messages</code>método. Este método debe devolver una matriz de pares de atributos / reglas y sus mensajes de error correspondientes:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the error messages for the defined validation rules.\n *\n * @return array\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">messages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'title.required'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'A title is required'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'body.required'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'A message is required'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"customizing-the-validation-attributes\"><span class=\"link\">Personalización de los atributos de validación</span></h4>\n    <p>Muchos de los mensajes de error de la regla de validación incorporada de Laravel contienen un <code>:attribute</code>marcador de posición. Si desea que el <code>:attribute</code>marcador de posición de su mensaje de validación sea reemplazado por un nombre de atributo personalizado, puede especificar los nombres personalizados anulando el <code>attributes</code>método. Este método debería devolver una matriz de pares de atributo / nombre:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get custom attributes for validator errors.\n *\n * @return array\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">attributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'email address'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"preparing-input-for-validation\"><span class=\"link\">Preparación de la entrada para la validación</span></h3>\n    <p>Si necesita preparar o desinfectar cualquier dato de la solicitud antes de aplicar sus reglas de validación, puede usar el <code>prepareForValidation</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Prepare the data for validation.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">prepareForValidation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'slug'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">slug</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">slug</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h2 id=\"manually-creating-validators\"><span class=\"link\">Creación manual de validadores</span></h2>\n    <p>Si no desea utilizar el <code>validate</code>método en la solicitud, puede crear una instancia de validación manualmente utilizando la <code>Validator</code> <span class=\"link\">fachada</span> . El <code>make</code>método en la fachada genera una nueva instancia de validación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Validator</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PostController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Store a new blog post.\n     *\n     * @param  Request  $request\n     * @return Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">store</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$validator</span> <span class=\"token operator\">=</span> Validator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required|unique:posts|max:255'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'body'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$validator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">fails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'post/create'</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withErrors</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$validator</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Retrieve the validated input...</span>\n        <span class=\"token variable\">$validated</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$validator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">validated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Retrieve a portion of the validated input...</span>\n        <span class=\"token variable\">$validated</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$validator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$validated</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$validator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">except</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Store the blog post...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>El primer argumento que se pasa al <code>make</code>método son los datos bajo validación. El segundo argumento es una matriz de reglas de validación que deben aplicarse a los datos.</p>\n    <p>Después de determinar si la validación de la solicitud falló, puede usar el <code>withErrors</code>método para mostrar los mensajes de error a la sesión. Al utilizar este método, la <code>$errors</code>variable se compartirá automáticamente con sus vistas después de la redirección, lo que le permitirá mostrarlas fácilmente al usuario. El <code>withErrors</code>método acepta un validador, a <code>MessageBag</code>o PHP <code>array</code>.</p>\n    <h4>Detención ante la primera falla de validación</h4>\n    <p>El <code>stopOnFirstFailure</code>método informará al validador que debe dejar de validar todos los atributos una vez que haya ocurrido un solo error de validación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$validator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">stopOnFirstFailure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">fails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"automatic-redirection\"><span class=\"link\">Redirección automática</span></h3>\n    <p>Si desea crear una instancia de validador manualmente pero aún así aprovechar la redirección automática que ofrece el <code>validate</code>método de la solicitud HTTP , puede llamar al <code>validate</code>método en una instancia de validador existente. Si la validación falla, el usuario será redirigido automáticamente o, en el caso de una solicitud XHR, se devolverá una respuesta JSON:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Validator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required|unique:posts|max:255'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'body'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede usar el <code>validateWithBag</code>método para almacenar los mensajes de error en una <span class=\"link\">bolsa de error con nombre</span> si falla la validación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Validator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required|unique:posts|max:255'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'body'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">validateWithBag</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'post'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"named-error-bags\"><span class=\"link\">Bolsas de error con nombre</span></h3>\n    <p>Si tiene varios formularios en una sola página, es posible que desee nombrar el que <code>MessageBag</code>contiene los errores de validación, lo que le permite recuperar los mensajes de error para un formulario específico. Para lograr esto, pase un nombre como segundo argumento a <code>withErrors</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'register'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withErrors</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$validator</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Luego puede acceder a la <code>MessageBag</code>instancia nombrada desde la <code>$errors</code>variable:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$errors</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">login</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"manual-customizing-the-error-messages\"><span class=\"link\">Personalización de los mensajes de error</span></h3>\n    <p>Si es necesario, puede proporcionar mensajes de error personalizados que una instancia de validador debería usar en lugar de los mensajes de error predeterminados proporcionados por Laravel. Hay varias formas de especificar mensajes personalizados. Primero, puede pasar los mensajes personalizados como tercer argumento del <code>Validator::make</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$validator</span> <span class=\"token operator\">=</span> Validator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$input</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$rules</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$messages</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'required'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'The :attribute field is required.'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>En este ejemplo, el <code>:attribute</code>marcador de posición será reemplazado por el nombre real del campo bajo validación. También puede utilizar otros marcadores de posición en los mensajes de validación. Por ejemplo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$messages</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'same'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'The :attribute and :other must match.'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'size'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'The :attribute must be exactly :size.'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'between'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'The :attribute value :input is not between :min - :max.'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'in'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'The :attribute must be one of the following types: :values'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"specifying-a-custom-message-for-a-given-attribute\"><span class=\"link\">Especificar un mensaje personalizado para un atributo dado</span></h4>\n    <p>A veces, es posible que desee especificar un mensaje de error personalizado solo para un atributo específico. Puede hacerlo utilizando la notación de \"puntos\". Especifique primero el nombre del atributo, seguido de la regla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$messages</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'email.required'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'We need to know your email address!'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"specifying-custom-attribute-values\"><span class=\"link\">Especificar valores de atributos personalizados</span></h4>\n    <p>Muchos de los mensajes de error incorporados de Laravel incluyen un <code>:attribute</code>marcador de posición que se reemplaza con el nombre del campo o atributo bajo validación. Para personalizar los valores utilizados para reemplazar estos marcadores de posición para campos específicos, puede pasar una matriz de atributos personalizados como el cuarto argumento del <code>Validator::make</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$validator</span> <span class=\"token operator\">=</span> Validator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$input</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$rules</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$messages</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'email address'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"after-validation-hook\"><span class=\"link\">Después del gancho de validación</span></h3>\n    <p>También puede adjuntar devoluciones de llamada para que se ejecuten después de que se complete la validación. Esto le permite realizar fácilmente más validaciones e incluso agregar más mensajes de error a la colección de mensajes. Para comenzar, llame al <code>after</code>método en una instancia de validador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$validator</span> <span class=\"token operator\">=</span> Validator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$validator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$validator</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">somethingElseIsInvalid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$validator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">errors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n            <span class=\"token single-quoted-string string\">'field'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Something is wrong with this field!'</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$validator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">fails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h2 id=\"working-with-validated-input\"><span class=\"link\">Trabajar con entrada validada</span></h2>\n    <p>Después de validar los datos de la solicitud entrante mediante una solicitud de formulario o una instancia de validación creada manualmente, es posible que desee recuperar los datos de la solicitud entrante que realmente se sometieron a la validación. Esto puede ser realizado de varias maneras. Primero, puede llamar al <code>validated</code>método en una solicitud de formulario o instancia de validación. Este método devuelve una matriz de los datos validados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$validated</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">validated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$validated</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$validator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">validated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Alternativamente, puede llamar al <code>safe</code>método en una solicitud de formulario o instancia de validación. Este método devuelve una instancia de <code>Illuminate\\Support\\ValidatedInput</code>. Este objeto expone <code>only</code>, <code>except</code>y <code>all</code>métodos para recuperar un subconjunto de los datos validados o la matriz completa de datos validados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$validated</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$validated</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">except</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$validated</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Además, la <code>Illuminate\\Support\\ValidatedInput</code>instancia se puede iterar y acceder como una matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Validated data may be iterated...</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Validated data may be accessed as an array...</span>\n<span class=\"token variable\">$validated</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$email</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$validated</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea agregar campos adicionales a los datos validados, puede llamar al <code>merge</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$validated</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor Otwell'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea recuperar los datos validados como una instancia de <span class=\"link\">recopilación</span> , puede llamar al <code>collect</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"working-with-error-messages\"><span class=\"link\">Trabajar con mensajes de error</span></h2>\n    <p>Después de llamar al <code>errors</code>método en una <code>Validator</code>instancia, recibirá una <code>Illuminate\\Support\\MessageBag</code>instancia, que tiene una variedad de métodos convenientes para trabajar con mensajes de error. La <code>$errors</code>variable que se pone automáticamente a disposición de todas las vistas también es una instancia de la <code>MessageBag</code>clase.</p>\n    \n    <h4 id=\"retrieving-the-first-error-message-for-a-field\"><span class=\"link\">Recuperando el primer mensaje de error para un campo</span></h4>\n    <p>Para recuperar el primer mensaje de error de un campo determinado, utilice el <code>first</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$errors</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$validator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">errors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$errors</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"retrieving-all-error-messages-for-a-field\"><span class=\"link\">Recuperar todos los mensajes de error de un campo</span></h4>\n    <p>Si necesita recuperar una matriz de todos los mensajes para un campo determinado, use el <code>get</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$errors</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Si está validando un campo de formulario de matriz, puede recuperar todos los mensajes para cada uno de los elementos de matriz utilizando el <code>*</code>carácter:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$errors</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'attachments.*'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"retrieving-all-error-messages-for-all-fields\"><span class=\"link\">Recuperación de todos los mensajes de error para todos los campos</span></h4>\n    <p>Para recuperar una matriz de todos los mensajes para todos los campos, use el <code>all</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$errors</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"determining-if-messages-exist-for-a-field\"><span class=\"link\">Determinar si existen mensajes para un campo</span></h4>\n    <p>El <code>has</code>método se puede utilizar para determinar si existe algún mensaje de error para un campo determinado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$errors</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"specifying-custom-messages-in-language-files\"><span class=\"link\">Especificación de mensajes personalizados en archivos de idioma</span></h3>\n    <p>Cada una de las reglas de validación integradas de Laravel tiene un mensaje de error que se encuentra en el <code>resources/lang/en/validation.php</code>archivo de su aplicación . Dentro de este archivo, encontrará una entrada de traducción para cada regla de validación. Puede cambiar o modificar estos mensajes según las necesidades de su aplicación.</p>\n    <p>Además, puede copiar este archivo a otro directorio de idioma de traducción para traducir los mensajes al idioma de su aplicación. Para obtener más información sobre la localización de Laravel, consulte la <span class=\"link\">documentación de localización</span> completa .</p>\n    \n    <h4 id=\"custom-messages-for-specific-attributes\"><span class=\"link\">Mensajes personalizados para atributos específicos</span></h4>\n    <p>Puede personalizar los mensajes de error utilizados para combinaciones de reglas y atributos especificados dentro de los archivos de idioma de validación de su aplicación. Para hacerlo, agregue sus personalizaciones de mensajes a la <code>custom</code>matriz del <code>resources/lang/xx/validation.php</code>archivo de idioma de su aplicación :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'custom'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'required'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'We need to know your email address!'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'max'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Your email address is too long!'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    \n    <h3 id=\"specifying-attribute-in-language-files\"><span class=\"link\">Especificar atributos en archivos de idioma</span></h3>\n    <p>Muchos de los mensajes de error incorporados de Laravel incluyen un <code>:attribute</code>marcador de posición que se reemplaza con el nombre del campo o atributo bajo validación. Si desea que la <code>:attribute</code>parte de su mensaje de validación sea reemplazada por un valor personalizado, puede especificar el nombre del atributo personalizado en la <code>attributes</code>matriz de su <code>resources/lang/xx/validation.php</code>archivo de idioma:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'attributes'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'email address'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    \n    <h3 id=\"specifying-values-in-language-files\"><span class=\"link\">Especificar valores en archivos de idioma</span></h3>\n    <p>Algunos de los mensajes de error de la regla de validación incorporados de Laravel contienen un <code>:value</code>marcador de posición que se reemplaza con el valor actual del atributo de solicitud. Sin embargo, es posible que ocasionalmente necesite que la <code>:value</code>parte de su mensaje de validación sea reemplazada por una representación personalizada del valor. Por ejemplo, considere la siguiente regla que especifica que se requiere un número de tarjeta de crédito si <code>payment_type</code>tiene un valor de <code>cc</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Validator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'credit_card_number'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required_if:payment_type,cc'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si esta regla de validación falla, producirá el siguiente mensaje de error:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">The credit card number field is required when payment type is cc<span class=\"token punctuation\">.</span></code></pre>\n    <p>En lugar de mostrarse <code>cc</code>como el valor del tipo de pago, puede especificar una representación de valor más fácil de usar en su <code>resources/lang/xx/validation.php</code>archivo de idioma definiendo una <code>values</code>matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'values'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'payment_type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'cc'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'credit card'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    <p>Después de definir este valor, la regla de validación producirá el siguiente mensaje de error:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">The credit card number field is required when payment type is credit card<span class=\"token punctuation\">.</span></code></pre>\n    \n    <h2 id=\"available-validation-rules\"><span class=\"link\">Reglas de validación disponibles</span></h2>\n    <p>A continuación se muestra una lista de todas las reglas de validación disponibles y su función:</p>\n    <style>\n    .collection-method-list > p {\n        column-count: 3; -moz-column-count: 3; -webkit-column-count: 3;\n        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n    }\n\n    .collection-method-list a {\n        display: block;\n    }\n</style>\n    <div class=\"collection-method-list\">\n        <p><span class=\"link\">Aceptado</span>\n            <span class=\"link\">Aceptado si</span>\n            <span class=\"link\">URL activa</span>\n            <span class=\"link\">Después de (fecha)</span>\n            <span class=\"link\">Después o igual (fecha)</span>\n            <span class=\"link\">Alfa</span>\n            <span class=\"link\">Alpha Dash</span>\n            <span class=\"link\">Alfanumérico</span>\n            <span class=\"link\">Formación</span>\n            <span class=\"link\">Fianza</span>\n            <span class=\"link\">Antes (fecha)</span>\n            <span class=\"link\">Antes o igual (fecha)</span>\n            <span class=\"link\">Entre</span>\n            <span class=\"link\">Booleano</span>\n            <span class=\"link\">Confirmado</span>\n            <span class=\"link\">Contraseña actual</span>\n            <span class=\"link\">Fecha</span>\n            <span class=\"link\">La fecha es igual a</span>\n            <span class=\"link\">Formato de fecha</span>\n            <span class=\"link\">Diferente</span>\n            <span class=\"link\">Dígitos</span>\n            <span class=\"link\">Dígitos entre</span>\n            <span class=\"link\">Dimensiones (archivos de imagen)</span>\n            <span class=\"link\">Distinto</span>\n            <span class=\"link\">Correo electrónico</span>\n            <span class=\"link\">Termina con</span>\n            <span class=\"link\">Excluir</span>\n            <span class=\"link\">Excluir si</span>\n            <span class=\"link\">Excluir a menos que</span>\n            <span class=\"link\">Existe (base de datos)</span>\n            <span class=\"link\">Expediente</span>\n            <span class=\"link\">Lleno</span>\n            <span class=\"link\">Mas grande que</span>\n            <span class=\"link\">Mayor que o igual</span>\n            <span class=\"link\">Archivo de imagen)</span>\n            <span class=\"link\">En</span>\n            <span class=\"link\">En matriz</span>\n            <span class=\"link\">Entero</span>\n            <span class=\"link\">Dirección IP</span>\n            <span class=\"link\">JSON</span>\n            <span class=\"link\">Menos que</span>\n            <span class=\"link\">Menor o igual</span>\n            <span class=\"link\">Max</span>\n            <span class=\"link\">Tipos MIME</span>\n            <span class=\"link\">Tipo MIME por extensión de archivo</span>\n            <span class=\"link\">Min</span>\n            <span class=\"link\">Múltiple de</span>\n            <span class=\"link\">No en</span>\n            <span class=\"link\">No Regex</span>\n            <span class=\"link\">Anulable</span>\n            <span class=\"link\">Numérico</span>\n            <span class=\"link\">Contraseña</span>\n            <span class=\"link\">Regalo</span>\n            <span class=\"link\">Prohibido</span>\n            <span class=\"link\">Prohibido si</span>\n            <span class=\"link\">Prohibido a menos que</span>\n            <span class=\"link\">Prohíbe</span>\n            <span class=\"link\">Expresión regular</span>\n            <span class=\"link\">Requerido</span>\n            <span class=\"link\">Requerido si</span>\n            <span class=\"link\">Requerido a menos que</span>\n            <span class=\"link\">Requerido con</span>\n            <span class=\"link\">Requerido con todos</span>\n            <span class=\"link\">Requerido sin</span>\n            <span class=\"link\">Requerido sin todo</span>\n            <span class=\"link\">Mismo</span>\n            <span class=\"link\">Tamaño</span>\n            <span class=\"link\">Algunas veces</span>\n            <span class=\"link\">Comienza con</span>\n            <span class=\"link\">Cuerda</span>\n            <span class=\"link\">Zona horaria</span>\n            <span class=\"link\">Único (base de datos)</span>\n            <span class=\"link\">URL</span>\n            <span class=\"link\">UUID</span></p>\n    </div>\n    \n    <h4 id=\"rule-accepted\"><span class=\"link\">aceptado</span></h4>\n    <p>El campo bajo de validación debe ser <code>\"yes\"</code>, <code>\"on\"</code>, <code>1</code>, o <code>true</code>. Esto es útil para validar la aceptación de las \"Condiciones de servicio\" o campos similares.</p>\n    \n    <h4 id=\"rule-accepted-if\"><span class=\"link\">aceptado_si: otro campo, valor, ...</span></h4>\n    <p>El campo bajo de validación debe ser <code>\"yes\"</code>, <code>\"on\"</code>, <code>1</code>, o <code>true</code>si otro campo bajo de validación es igual a un valor especificado. Esto es útil para validar la aceptación de las \"Condiciones de servicio\" o campos similares.</p>\n    \n    <h4 id=\"rule-active-url\"><span class=\"link\">active_url</span></h4>\n    <p>El campo bajo validación debe tener un registro A o AAAA válido de acuerdo con la <code>dns_get_record</code>función PHP. El nombre de host de la URL proporcionada se extrae mediante la <code>parse_url</code>función PHP antes de pasar a <code>dns_get_record</code>.</p>\n    \n    <h4 id=\"rule-after\"><span class=\"link\">después: <em>fecha</em></span></h4>\n    <p>El campo bajo validación debe ser un valor posterior a una fecha determinada. Las fechas se pasarán a la <code>strtotime</code>función PHP para convertirlas en una <code>DateTime</code>instancia válida :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'start_date'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required|date|after:tomorrow'</span></code></pre>\n    <p>En lugar de pasar una cadena de fecha para la evaluación <code>strtotime</code>, puede especificar otro campo para comparar con la fecha:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'finish_date'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required|date|after:start_date'</span></code></pre>\n    \n    <h4 id=\"rule-after-or-equal\"><span class=\"link\">after_or_equal: <em>fecha</em></span></h4>\n    <p>El campo bajo validación debe ser un valor posterior o igual a la fecha indicada. Para obtener más información, consulte la regla <span class=\"link\">posterior</span> .</p>\n    \n    <h4 id=\"rule-alpha\"><span class=\"link\">alfa</span></h4>\n    <p>El campo bajo validación debe estar compuesto íntegramente por caracteres alfabéticos.</p>\n    \n    <h4 id=\"rule-alpha-dash\"><span class=\"link\">alpha_dash</span></h4>\n    <p>El campo bajo validación puede tener caracteres alfanuméricos, así como guiones y guiones bajos.</p>\n    \n    <h4 id=\"rule-alpha-num\"><span class=\"link\">alpha_num</span></h4>\n    <p>El campo bajo validación debe ser completamente alfanumérico.</p>\n    \n    <h4 id=\"rule-array\"><span class=\"link\">formación</span></h4>\n    <p>El campo bajo validación debe ser PHP <code>array</code>.</p>\n    <p>Cuando se proporcionan valores adicionales a la <code>array</code>regla, cada clave de la matriz de entrada debe estar presente en la lista de valores proporcionados a la regla. En el siguiente ejemplo, la <code>admin</code>clave de la matriz de entrada no es válida porque no está incluida en la lista de valores proporcionada a la <code>array</code>regla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Validator</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$input</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor Otwell'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'username'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'taylorotwell'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'admin'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nValidator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$input</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'array:username,locale'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>En general, siempre debe especificar las claves de matriz que pueden estar presentes dentro de su matriz. De lo contrario, los métodos <code>validate</code>y del validador <code>validated</code>devolverán todos los datos validados, incluida la matriz y todas sus claves, incluso si esas claves no fueron validadas por otras reglas de validación de matrices anidadas.</p>\n    <p>Si lo desea, puede indicarle al validador de Laravel que nunca incluya claves de matriz no validadas en los datos \"validados\" que devuelve, incluso si usa la <code>array</code>regla sin especificar una lista de claves permitidas. Para lograr esto, puede llamar al <code>excludeUnvalidatedArrayKeys</code>método del validador en el <code>boot</code>método de su aplicación <code>AppServiceProvider</code>. Después de hacerlo, el validador incluirá claves de matriz en los datos \"validados\" que devuelve solo cuando esas claves fueron validadas específicamente por <span class=\"link\">reglas de matriz anidadas</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Validator</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Register any application services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Validator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">excludeUnvalidatedArrayKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"rule-bail\"><span class=\"link\">fianza</span></h4>\n    <p>Deje de ejecutar reglas de validación para el campo después del primer error de validación.</p>\n    <p>Si bien la <code>bail</code>regla solo dejará de validar un campo específico cuando encuentre una falla de validación, el <code>stopOnFirstFailure</code>método informará al validador que debe dejar de validar todos los atributos una vez que haya ocurrido una sola falla de validación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$validator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">stopOnFirstFailure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">fails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"rule-before\"><span class=\"link\">antes: <em>fecha</em></span></h4>\n    <p>El campo bajo validación debe ser un valor anterior a la fecha indicada. Las fechas se pasarán a la <code>strtotime</code>función PHP para convertirlas en una <code>DateTime</code>instancia válida . Además, al igual que la <span class=\"link\"><code>after</code></span>regla, el nombre de otro campo en validación se puede proporcionar como el valor de <code>date</code>.</p>\n    \n    <h4 id=\"rule-before-or-equal\"><span class=\"link\">before_or_equal: <em>fecha</em></span></h4>\n    <p>El campo bajo validación debe ser un valor anterior o igual a la fecha dada. Las fechas se pasarán a la <code>strtotime</code>función PHP para convertirlas en una <code>DateTime</code>instancia válida . Además, al igual que la <span class=\"link\"><code>after</code></span>regla, el nombre de otro campo en validación se puede proporcionar como el valor de <code>date</code>.</p>\n    \n    <h4 id=\"rule-between\"><span class=\"link\">entre: <em>min</em> , <em>max</em></span></h4>\n    <p>El campo bajo validación debe tener un tamaño entre el <em>mínimo</em> y el <em>máximo</em> dados . Las cadenas, los números, las matrices y los archivos se evalúan de la misma forma que la <span class=\"link\"><code>size</code></span>regla.</p>\n    \n    <h4 id=\"rule-boolean\"><span class=\"link\">booleano</span></h4>\n    <p>El campo bajo validación debe poder convertirse en booleano. De entrada aceptados son <code>true</code>, <code>false</code>, <code>1</code>, <code>0</code>, <code>\"1\"</code>, y <code>\"0\"</code>.</p>\n    \n    <h4 id=\"rule-confirmed\"><span class=\"link\">confirmado</span></h4>\n    <p>El campo bajo validación debe tener un campo coincidente de <code>{field}_confirmation</code>. Por ejemplo, si el campo bajo validación es <code>password</code>, un <code>password_confirmation</code>campo coincidente debe estar presente en la entrada.</p>\n    \n    <h4 id=\"rule-current-password\"><span class=\"link\">Contraseña actual</span></h4>\n    <p>El campo bajo validación debe coincidir con la contraseña del usuario autenticado. Puede especificar una <span class=\"link\">protección de autenticación</span> utilizando el primer parámetro de la regla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'password'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'current_password:api'</span></code></pre>\n    \n    <h4 id=\"rule-date\"><span class=\"link\">fecha</span></h4>\n    <p>El campo bajo validación debe ser una fecha válida y no relativa según la <code>strtotime</code>función PHP.</p>\n    \n    <h4 id=\"rule-date-equals\"><span class=\"link\">date_equals: <em>fecha</em></span></h4>\n    <p>El campo bajo validación debe ser igual a la fecha indicada. Las fechas se pasarán a la <code>strtotime</code>función PHP para convertirlas en una <code>DateTime</code>instancia válida .</p>\n    \n    <h4 id=\"rule-date-format\"><span class=\"link\">date_format: <em>formato</em></span></h4>\n    <p>El campo bajo validación debe coincidir con el <em>formato</em> dado . Debe utilizar <strong>cualquiera</strong> <code>date</code> o <code>date_format</code>al validar un campo, no ambos. Esta regla de validación admite todos los formatos admitidos por la clase <span class=\"link\">DateTime</span> de PHP .</p>\n    \n    <h4 id=\"rule-different\"><span class=\"link\">diferente: <em>campo</em></span></h4>\n    <p>El campo bajo validación debe tener un valor diferente al <em>campo</em> .</p>\n    \n    <h4 id=\"rule-digits\"><span class=\"link\">dígitos: <em>valor</em></span></h4>\n    <p>El campo bajo validación debe ser <em>numérico</em> y debe tener una longitud exacta de <em>valor</em> .</p>\n    \n    <h4 id=\"rule-digits-between\"><span class=\"link\">digits_between: <em>min</em> , <em>max</em></span></h4>\n    <p>El campo bajo validación debe ser <em>numérico</em> y debe tener una longitud entre el <em>mínimo</em> y el <em>máximo</em> dados .</p>\n    \n    <h4 id=\"rule-dimensions\"><span class=\"link\">dimensiones</span></h4>\n    <p>El archivo bajo validación debe ser una imagen que cumpla con las restricciones de dimensión especificadas por los parámetros de la regla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'avatar'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'dimensions:min_width=100,min_height=200'</span></code></pre>\n    <p>Las restricciones disponibles son: <em>min_width</em> , <em>max_width</em> , <em>min_height</em> , <em>max_height</em> , <em>width</em> , <em>height</em> , <em>ratio</em> .</p>\n    <p>Una restricción de <em>relación</em> debe representarse como ancho dividido por alto. Esto se puede especificar mediante una fracción como <code>3/2</code>o un flotante como <code>1.5</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'avatar'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'dimensions:ratio=3/2'</span></code></pre>\n    <p>Dado que esta regla requiere varios argumentos, puede usar el <code>Rule::dimensions</code>método para construir la regla con fluidez:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Validator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Validation<span class=\"token punctuation\">\\</span>Rule</span><span class=\"token punctuation\">;</span>\n\nValidator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'avatar'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span>\n        Rule<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">dimensions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">maxWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">maxHeight</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ratio</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"rule-distinct\"><span class=\"link\">distinto</span></h4>\n    <p>Al validar matrices, el campo bajo validación no debe tener valores duplicados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'foo.*.id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'distinct'</span></code></pre>\n    <p>Distinct utiliza comparaciones de variables sueltas de forma predeterminada. Para usar comparaciones estrictas, puede agregar el <code>strict</code>parámetro a la definición de su regla de validación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'foo.*.id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'distinct:strict'</span></code></pre>\n    <p>Puede agregar <code>ignore_case</code>argumentos a la regla de validación para hacer que la regla ignore las diferencias de mayúsculas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'foo.*.id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'distinct:ignore_case'</span></code></pre>\n    \n    <h4 id=\"rule-email\"><span class=\"link\">Email</span></h4>\n    <p>El campo bajo validación debe tener el formato de una dirección de correo electrónico. Esta regla de validación utiliza el <span class=\"link\"><code>egulias/email-validator</code></span>paquete para validar la dirección de correo electrónico. De forma predeterminada, <code>RFCValidation</code>se aplica el validador, pero también puede aplicar otros estilos de validación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'email:rfc,dns'</span></code></pre>\n    <p>El ejemplo anterior aplicará las validaciones <code>RFCValidation</code>y <code>DNSCheckValidation</code>. Aquí hay una lista completa de estilos de validación que puede aplicar:</p>\n    <div class=\"content-list\">\n        <ul>\n            <li><code>rfc</code>: <code>RFCValidation</code></li>\n            <li><code>strict</code>: <code>NoRFCWarningsValidation</code></li>\n            <li><code>dns</code>: <code>DNSCheckValidation</code></li>\n            <li><code>spoof</code>: <code>SpoofCheckValidation</code></li>\n            <li><code>filter</code>: <code>FilterEmailValidation</code></li>\n        </ul>\n    </div>\n    <p>El <code>filter</code>validador, que usa la <code>filter_var</code>función de PHP , viene con Laravel y era el comportamiento de validación de correo electrónico predeterminado de Laravel antes de la versión 5.8 de Laravel.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Los validadores <code>dns</code>y <code>spoof</code>requieren la <code>intl</code>extensión PHP .</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"rule-ends-with\"><span class=\"link\">termina_con: <em>foo</em> , <em>bar</em> , ...</span></h4>\n    <p>El campo bajo validación debe terminar con uno de los valores dados.</p>\n    \n    <h4 id=\"rule-exclude\"><span class=\"link\">excluir</span></h4>\n    <p>El campo bajo validación se excluirá de los datos de solicitud devueltos por los métodos <code>validate</code>y <code>validated</code>.</p>\n    \n    <h4 id=\"rule-exclude-if\"><span class=\"link\">exclude_if: otro <em>campo</em> , <em>valor</em></span></h4>\n    <p>El campo bajo validación se excluirá de los datos de solicitud devueltos por los métodos <code>validate</code>y <code>validated</code>si el campo de <em>otro</em> campo es igual a <em>valor</em> .</p>\n    \n    <h4 id=\"rule-exclude-unless\"><span class=\"link\">exclude_unless: otro <em>campo</em> , <em>valor</em></span></h4>\n    <p>El campo bajo de validación será excluido de los datos de solicitud devueltos por el <code>validate</code>y <code>validated</code>métodos a menos <em>anotherfield</em> campo 's es igual a <em>valor</em> . Si el <em>valor</em> es <code>null</code>( <code>exclude_unless:name,null</code>), el campo bajo validación será excluido a menos que el campo de comparación sea <code>null</code>o el campo de comparación no se encuentre en los datos de la solicitud.</p>\n    \n    <h4 id=\"rule-exists\"><span class=\"link\">existe: <em>tabla</em> , <em>columna</em></span></h4>\n    <p>El campo bajo validación debe existir en una tabla de base de datos determinada.</p>\n    \n    <h4 id=\"basic-usage-of-exists-rule\"><span class=\"link\">Regla de uso básico de existe</span></h4>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'state'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'exists:states'</span></code></pre>\n    <p>Si <code>column</code>no se especifica la opción, se utilizará el nombre del campo. Entonces, en este caso, la regla validará que la <code>states</code>tabla de la base de datos contenga un registro con un <code>state</code>valor de columna que coincida con el <code>state</code>valor del atributo de la solicitud .</p>\n    \n    <h4 id=\"specifying-a-custom-column-name\"><span class=\"link\">Especificar un nombre de columna personalizado</span></h4>\n    <p>Puede especificar explícitamente el nombre de la columna de la base de datos que debe utilizar la regla de validación colocándolo después del nombre de la tabla de la base de datos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'state'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'exists:states,abbreviation'</span></code></pre>\n    <p>Ocasionalmente, es posible que deba especificar una conexión de base de datos específica que se utilizará para la <code>exists</code>consulta. Puede lograr esto anteponiendo el nombre de la conexión al nombre de la tabla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'exists:connection.staff,email'</span></code></pre>\n    <p>En lugar de especificar el nombre de la tabla directamente, puede especificar el modelo Eloquent que debe usarse para determinar el nombre de la tabla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'user_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'exists:App\\Models\\User,id'</span></code></pre>\n    <p>Si desea personalizar la consulta ejecutada por la regla de validación, puede usar la <code>Rule</code>clase para definir la regla con fluidez. En este ejemplo, también especificaremos las reglas de validación como una matriz en lugar de usar el <code>|</code>carácter para delimitarlas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Validator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Validation<span class=\"token punctuation\">\\</span>Rule</span><span class=\"token punctuation\">;</span>\n\nValidator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span>\n        Rule<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'staff'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'account_id'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"rule-file\"><span class=\"link\">expediente</span></h4>\n    <p>El campo bajo validación debe ser un archivo cargado correctamente.</p>\n    \n    <h4 id=\"rule-filled\"><span class=\"link\">lleno</span></h4>\n    <p>El campo bajo validación no debe estar vacío cuando está presente.</p>\n    \n    <h4 id=\"rule-gt\"><span class=\"link\">gt: <em>campo</em></span></h4>\n    <p>El campo bajo validación debe ser mayor que el <em>campo</em> dado . Los dos campos deben ser del mismo tipo. Las cadenas, números, matrices y archivos se evalúan utilizando las mismas convenciones que la <span class=\"link\"><code>size</code></span>regla.</p>\n    \n    <h4 id=\"rule-gte\"><span class=\"link\">gte: <em>campo</em></span></h4>\n    <p>El campo bajo validación debe ser mayor o igual que el <em>campo</em> dado . Los dos campos deben ser del mismo tipo. Las cadenas, números, matrices y archivos se evalúan utilizando las mismas convenciones que la <span class=\"link\"><code>size</code></span>regla.</p>\n    \n    <h4 id=\"rule-image\"><span class=\"link\">imagen</span></h4>\n    <p>El archivo bajo validación debe ser una imagen (jpg, jpeg, png, bmp, gif, svg o webp).</p>\n    \n    <h4 id=\"rule-in\"><span class=\"link\">en: <em>foo</em> , <em>bar</em> , ...</span></h4>\n    <p>El campo bajo validación debe incluirse en la lista de valores dada. Dado que esta regla a menudo requiere <code>implode</code>una matriz, el <code>Rule::in</code>método se puede usar para construir la regla con fluidez:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Validator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Validation<span class=\"token punctuation\">\\</span>Rule</span><span class=\"token punctuation\">;</span>\n\nValidator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'zones'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span>\n        Rule<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'first-zone'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'second-zone'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Cuando la <code>in</code>regla se combina con la <code>array</code>regla, cada valor de la matriz de entrada debe estar presente dentro de la lista de valores proporcionada a la <code>in</code>regla. En el siguiente ejemplo, el <code>LAS</code>código de aeropuerto en la matriz de entrada no es válido porque no está incluido en la lista de aeropuertos proporcionada a la <code>in</code>regla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Validator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Validation<span class=\"token punctuation\">\\</span>Rule</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$input</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'airports'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'NYC'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'LAS'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nValidator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$input</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'airports'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'array'</span><span class=\"token punctuation\">,</span>\n        Rule<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'NYC'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'LIT'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"rule-in-array\"><span class=\"link\">in_array: otro <em>campo</em> . *</span></h4>\n    <p>El campo bajo de validación debe existir en <em>anotherfield</em> valores 's.</p>\n    \n    <h4 id=\"rule-integer\"><span class=\"link\">entero</span></h4>\n    <p>El campo bajo validación debe ser un número entero.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Esta regla de validación no verifica que la entrada sea del tipo de variable \"entero\", solo que la entrada sea de un tipo aceptado por la <code>FILTER_VALIDATE_INT</code>regla de PHP . Si necesita validar la entrada como un número, utilice esta regla en combinación con <span class=\"link\">la <code>numeric</code>regla de validación</span> .</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"rule-ip\"><span class=\"link\">ip</span></h4>\n    <p>El campo bajo validación debe ser una dirección IP.</p>\n    \n    <h4 id=\"ipv4\"><span class=\"link\">ipv4</span></h4>\n    <p>El campo bajo validación debe ser una dirección IPv4.</p>\n    \n    <h4 id=\"ipv6\"><span class=\"link\">ipv6</span></h4>\n    <p>El campo bajo validación debe ser una dirección IPv6.</p>\n    \n    <h4 id=\"rule-json\"><span class=\"link\">json</span></h4>\n    <p>El campo bajo validación debe ser una cadena JSON válida.</p>\n    \n    <h4 id=\"rule-lt\"><span class=\"link\">lt: <em>campo</em></span></h4>\n    <p>El campo bajo validación debe ser menor que el <em>campo</em> dado . Los dos campos deben ser del mismo tipo. Las cadenas, números, matrices y archivos se evalúan utilizando las mismas convenciones que la <span class=\"link\"><code>size</code></span>regla.</p>\n    \n    <h4 id=\"rule-lte\"><span class=\"link\">lte: <em>campo</em></span></h4>\n    <p>El campo bajo validación debe ser menor o igual al <em>campo</em> dado . Los dos campos deben ser del mismo tipo. Las cadenas, números, matrices y archivos se evalúan utilizando las mismas convenciones que la <span class=\"link\"><code>size</code></span>regla.</p>\n    \n    <h4 id=\"rule-max\"><span class=\"link\">max: <em>valor</em></span></h4>\n    <p>El campo bajo validación debe ser menor o igual a un <em>valor</em> máximo . Las cadenas, los números, las matrices y los archivos se evalúan de la misma forma que la <span class=\"link\"><code>size</code></span>regla.</p>\n    \n    <h4 id=\"rule-mimetypes\"><span class=\"link\">mimetypes: <em>text / plain</em> , ...</span></h4>\n    <p>El archivo bajo validación debe coincidir con uno de los tipos MIME dados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'video'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'mimetypes:video/avi,video/mpeg,video/quicktime'</span></code></pre>\n    <p>Para determinar el tipo MIME del archivo cargado, se leerá el contenido del archivo y el marco intentará adivinar el tipo MIME, que puede ser diferente del tipo MIME proporcionado por el cliente.</p>\n    \n    <h4 id=\"rule-mimes\"><span class=\"link\">mimos: <em>foo</em> , <em>bar</em> , ...</span></h4>\n    <p>El archivo bajo validación debe tener un tipo MIME correspondiente a una de las extensiones listadas.</p>\n    \n    <h4 id=\"basic-usage-of-mime-rule\"><span class=\"link\">Uso básico de la regla MIME</span></h4>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'photo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'mimes:jpg,bmp,png'</span></code></pre>\n    <p>Aunque solo necesita especificar las extensiones, esta regla en realidad valida el tipo MIME del archivo leyendo el contenido del archivo y adivinando su tipo MIME. Puede encontrar una lista completa de los tipos MIME y sus extensiones correspondientes en la siguiente ubicación:</p>\n    <p><span class=\"link\">https://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types</span></p>\n    \n    <h4 id=\"rule-min\"><span class=\"link\">min: <em>valor</em></span></h4>\n    <p>El campo bajo validación debe tener un <em>valor</em> mínimo . Las cadenas, los números, las matrices y los archivos se evalúan de la misma forma que la <span class=\"link\"><code>size</code></span>regla.</p>\n    \n    <h4 id=\"multiple-of\"><span class=\"link\">multiple_of: <em>valor</em></span></h4>\n    <p>El campo bajo validación debe ser un <em>valor</em> múltiplo .</p>\n    \n    <h4 id=\"rule-not-in\"><span class=\"link\">not_in: <em>foo</em> , <em>bar</em> , ...</span></h4>\n    <p>El campo bajo validación no debe incluirse en la lista de valores dada. El <code>Rule::notIn</code>método se puede utilizar para construir la regla con fluidez:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Validation<span class=\"token punctuation\">\\</span>Rule</span><span class=\"token punctuation\">;</span>\n\nValidator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'toppings'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span>\n        Rule<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">notIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'sprinkles'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'cherries'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"rule-not-regex\"><span class=\"link\">not_regex: <em>patrón</em></span></h4>\n    <p>El campo bajo validación no debe coincidir con la expresión regular dada.</p>\n    <p>Internamente, esta regla usa la <code>preg_match</code>función PHP . El patrón especificado debe obedecer al mismo formato requerido por <code>preg_match</code>y, por lo tanto, también debe incluir delimitadores válidos. Por ejemplo: <code>'email' =&gt; 'not_regex:/^.+$/i'</code>.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Cuando use los patrones <code>regex</code>/ <code>not_regex</code>, puede ser necesario especificar sus reglas de validación usando una matriz en lugar de usar <code>|</code>delimitadores, especialmente si la expresión regular contiene un <code>|</code>carácter.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"rule-nullable\"><span class=\"link\">anulable</span></h4>\n    <p>El campo bajo validación puede ser <code>null</code>.</p>\n    \n    <h4 id=\"rule-numeric\"><span class=\"link\">numérico</span></h4>\n    <p>El campo bajo validación debe ser <span class=\"link\">numérico</span> .</p>\n    \n    <h4 id=\"rule-password\"><span class=\"link\">contraseña</span></h4>\n    <p>El campo bajo validación debe coincidir con la contraseña del usuario autenticado.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Se cambió el nombre de esta regla a <code>current_password</code>con la intención de eliminarla en Laravel 9. En su lugar, utilice la regla <span class=\"link\">Contraseña actual</span> .</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"rule-present\"><span class=\"link\">regalo</span></h4>\n    <p>El campo bajo validación debe estar presente en los datos de entrada pero puede estar vacío.</p>\n    \n    <h4 id=\"rule-prohibited\"><span class=\"link\">prohibido</span></h4>\n    <p>El campo bajo validación debe estar vacío o no estar presente.</p>\n    \n    <h4 id=\"rule-prohibited-if\"><span class=\"link\">prohibido_si: otro <em>campo</em> , <em>valor</em> , ...</span></h4>\n    <p>El campo bajo validación debe estar vacío o no estar presente si el campo de <em>otro</em> campo es igual a cualquier <em>valor</em> .</p>\n    \n    <h4 id=\"rule-prohibited-unless\"><span class=\"link\">prohibido_a menos: otro <em>campo</em> , <em>valor</em> , ...</span></h4>\n    <p>El campo bajo validación debe estar vacío o no estar presente a menos que el campo de <em>otro</em> campo sea igual a cualquier <em>valor</em> .</p>\n    \n    <h4 id=\"rule-prohibits\"><span class=\"link\">prohíbe: otro <em>campo</em> , ...</span></h4>\n    <p>Si el campo bajo validación está presente, no puede haber ningún campo en otro <em>campo</em> , incluso si está vacío.</p>\n    \n    <h4 id=\"rule-regex\"><span class=\"link\">regex: <em>patrón</em></span></h4>\n    <p>El campo bajo validación debe coincidir con la expresión regular dada.</p>\n    <p>Internamente, esta regla usa la <code>preg_match</code>función PHP . El patrón especificado debe obedecer al mismo formato requerido por <code>preg_match</code>y, por lo tanto, también debe incluir delimitadores válidos. Por ejemplo: <code>'email' =&gt; 'regex:/^.+@.+$/i'</code>.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Al usar los patrones <code>regex</code>/ <code>not_regex</code>, puede ser necesario especificar reglas en una matriz en lugar de usar <code>|</code>delimitadores, especialmente si la expresión regular contiene un <code>|</code>carácter.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"rule-required\"><span class=\"link\">requerido</span></h4>\n    <p>El campo bajo validación debe estar presente en los datos de entrada y no estar vacío. Un campo se considera \"vacío\" si se cumple una de las siguientes condiciones:</p>\n    <div class=\"content-list\">\n        <ul>\n            <li>El valor es <code>null</code>.</li>\n            <li>El valor es una cadena vacía.</li>\n            <li>El valor es una matriz vacía o un <code>Countable</code>objeto vacío .</li>\n            <li>El valor es un archivo cargado sin ruta.</li>\n        </ul>\n    </div>\n    \n    <h4 id=\"rule-required-if\"><span class=\"link\">required_if: otro <em>campo</em> , <em>valor</em> , ...</span></h4>\n    <p>El campo bajo validación debe estar presente y no vacío si el campo de <em>otro</em> campo es igual a cualquier <em>valor</em> .</p>\n    <p>Si desea construir una condición más compleja para la <code>required_if</code>regla, puede usar el <code>Rule::requiredIf</code>método. Este método acepta un booleano o un cierre. Cuando pasa un cierre, el cierre debe regresar <code>true</code>o <code>false</code>indicar si el campo bajo validación es obligatorio:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Validator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Validation<span class=\"token punctuation\">\\</span>Rule</span><span class=\"token punctuation\">;</span>\n\nValidator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'role_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Rule<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">requiredIf</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">is_admin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nValidator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'role_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Rule<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">requiredIf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">use</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">is_admin</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"rule-required-unless\"><span class=\"link\">required_unless: otro <em>campo</em> , <em>valor</em> , ...</span></h4>\n    <p>El campo bajo validación debe estar presente y no vacío a menos que el campo <em>otro</em> campo sea igual a cualquier <em>valor</em> . Esto también significa <em>anotherfield</em> debe estar presente en los datos de solicitud a menos que <em>el valor</em> es <code>null</code>. Si el <em>valor</em> es <code>null</code>( <code>required_unless:name,null</code>), el campo bajo validación será obligatorio a menos que el campo de comparación sea <code>null</code>o el campo de comparación no se encuentre en los datos de la solicitud.</p>\n    \n    <h4 id=\"rule-required-with\"><span class=\"link\">required_with: <em>foo</em> , <em>bar</em> , ...</span></h4>\n    <p>El campo bajo validación debe estar presente y no vacío <em>solo si</em> alguno de los otros campos especificados está presente y no está vacío.</p>\n    \n    <h4 id=\"rule-required-with-all\"><span class=\"link\">required_with_all: <em>foo</em> , <em>bar</em> , ...</span></h4>\n    <p>El campo bajo validación debe estar presente y no vacío <em>solo si</em> todos los demás campos especificados están presentes y no vacíos.</p>\n    \n    <h4 id=\"rule-required-without\"><span class=\"link\">required_without: <em>foo</em> , <em>bar</em> , ...</span></h4>\n    <p>El campo bajo validación debe estar presente y no vacío <em>solo cuando</em> cualquiera de los otros campos especificados está vacío o no está presente.</p>\n    \n    <h4 id=\"rule-required-without-all\"><span class=\"link\">required_without_all: <em>foo</em> , <em>bar</em> , ...</span></h4>\n    <p>El campo bajo validación debe estar presente y no vacío <em>solo cuando</em> todos los demás campos especificados están vacíos o no están presentes.</p>\n    \n    <h4 id=\"rule-same\"><span class=\"link\">mismo: <em>campo</em></span></h4>\n    <p>El <em>campo</em> dado debe coincidir con el campo bajo validación.</p>\n    \n    <h4 id=\"rule-size\"><span class=\"link\">tamaño: <em>valor</em></span></h4>\n    <p>El campo bajo validación debe tener un tamaño que coincida con el <em>valor</em> dado . Para datos de cadena, el <em>valor</em> corresponde al número de caracteres. Para datos numéricos, el <em>valor</em> corresponde a un valor entero dado (el atributo también debe tener la regla <code>numeric</code>o <code>integer</code>). Para una matriz, el <em>tamaño</em> corresponde al <code>count</code>de la matriz. Para los archivos, el <em>tamaño</em> corresponde al tamaño del archivo en kilobytes. Veamos algunos ejemplos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Validate that a string is exactly 12 characters long...</span>\n<span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'size:12'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Validate that a provided integer equals 10...</span>\n<span class=\"token single-quoted-string string\">'seats'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'integer|size:10'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Validate that an array has exactly 5 elements...</span>\n<span class=\"token single-quoted-string string\">'tags'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'array|size:5'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Validate that an uploaded file is exactly 512 kilobytes...</span>\n<span class=\"token single-quoted-string string\">'image'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'file|size:512'</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"rule-starts-with\"><span class=\"link\">empieza_con: <em>foo</em> , <em>bar</em> , ...</span></h4>\n    <p>El campo bajo validación debe comenzar con uno de los valores dados.</p>\n    \n    <h4 id=\"rule-string\"><span class=\"link\">cuerda</span></h4>\n    <p>El campo bajo validación debe ser una cadena. Si desea permitir que el campo también lo esté <code>null</code>, debe asignar la <code>nullable</code>regla al campo.</p>\n    \n    <h4 id=\"rule-timezone\"><span class=\"link\">zona horaria</span></h4>\n    <p>El campo bajo validación debe ser un identificador de zona horaria válido de acuerdo con la <code>timezone_identifiers_list</code>función PHP.</p>\n    \n    <h4 id=\"rule-unique\"><span class=\"link\">único: <em>tabla</em> , <em>columna</em> , <em>excepto</em> , <em>idColumn</em></span></h4>\n    <p>El campo bajo validación no debe existir dentro de la tabla de base de datos dada.</p>\n    <p><strong>Especificación de un nombre de columna / tabla personalizado:</strong></p>\n    <p>En lugar de especificar el nombre de la tabla directamente, puede especificar el modelo Eloquent que debe usarse para determinar el nombre de la tabla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'unique:App\\Models\\User,email_address'</span></code></pre>\n    <p>La <code>column</code>opción se puede utilizar para especificar la columna de base de datos correspondiente del campo. Si <code>column</code>no se especifica la opción, se utilizará el nombre del campo bajo validación.</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'unique:users,email_address'</span></code></pre>\n    <p><strong>Especificación de una conexión de base de datos personalizada</strong></p>\n    <p>Ocasionalmente, es posible que deba establecer una conexión personalizada para las consultas de la base de datos realizadas por el Validador. Para lograr esto, puede anteponer el nombre de la conexión al nombre de la tabla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'unique:connection.users,email_address'</span></code></pre>\n    <p><strong>Obligar a una regla única a ignorar un ID determinado:</strong></p>\n    <p>A veces, es posible que desee ignorar una identificación determinada durante la validación única. Por ejemplo, considere una pantalla de \"perfil de actualización\" que incluye el nombre del usuario, la dirección de correo electrónico y la ubicación. Probablemente desee verificar que la dirección de correo electrónico sea única. Sin embargo, si el usuario solo cambia el campo de nombre y no el campo de correo electrónico, no desea que se genere un error de validación porque el usuario ya es el propietario de la dirección de correo electrónico en cuestión.</p>\n    <p>Para indicarle al validador que ignore la ID del usuario, usaremos la <code>Rule</code>clase para definir la regla con fluidez. En este ejemplo, también especificaremos las reglas de validación como una matriz en lugar de usar el <code>|</code>carácter para delimitar las reglas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Validator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Validation<span class=\"token punctuation\">\\</span>Rule</span><span class=\"token punctuation\">;</span>\n\nValidator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span>\n        Rule<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Nunca debe pasar ninguna entrada de solicitud controlada por el usuario al <code>ignore</code>método. En su lugar, solo debe pasar un ID único generado por el sistema, como un ID de incremento automático o UUID de una instancia de modelo Eloquent. De lo contrario, su aplicación será vulnerable a un ataque de inyección SQL.</p></p></div>\n    </blockquote>\n    <p>En lugar de pasar el valor de la clave del modelo al <code>ignore</code>método, también puede pasar toda la instancia del modelo. Laravel extraerá automáticamente la clave del modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Rule<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span></code></pre>\n    <p>Si su tabla usa un nombre de columna de clave principal diferente a <code>id</code>, puede especificar el nombre de la columna al llamar al <code>ignore</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Rule<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'user_id'</span><span class=\"token punctuation\">)</span></code></pre>\n    <p>De forma predeterminada, la <code>unique</code>regla verificará la unicidad de la columna que coincida con el nombre del atributo que se está validando. Sin embargo, puede pasar un nombre de columna diferente como segundo argumento del <code>unique</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Rule<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email_address'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></code></pre>\n    <p><strong>Adición de cláusulas adicionales Where:</strong></p>\n    <p>Puede especificar condiciones de consulta adicionales personalizando la consulta utilizando el <code>where</code>método. Por ejemplo, agreguemos una condición de consulta que limite la consulta solo a los registros de búsqueda que tengan un <code>account_id</code>valor de columna de <code>1</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Rule<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'account_id'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n    \n    <h4 id=\"rule-url\"><span class=\"link\">url</span></h4>\n    <p>El campo bajo validación debe ser una URL válida.</p>\n    \n    <h4 id=\"rule-uuid\"><span class=\"link\">uuid</span></h4>\n    <p>El campo bajo validación debe ser un RFC 4122 válido (versión 1, 3, 4 o 5) identificador único universal (UUID).</p>\n    \n    <h2 id=\"conditionally-adding-rules\"><span class=\"link\">Agregar reglas condicionalmente</span></h2>\n    \n    <h4 id=\"skipping-validation-when-fields-have-certain-values\"><span class=\"link\">Omitir la validación cuando los campos tienen ciertos valores</span></h4>\n    <p>En ocasiones, es posible que desee no validar un campo determinado si otro campo tiene un valor determinado. Puede lograr esto usando la <code>exclude_if</code>regla de validación. En este ejemplo, las <code>appointment_date</code>y los <code>doctor_name</code>campos no serán validados si el <code>has_appointment</code>campo tiene un valor de <code>false</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Validator</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$validator</span> <span class=\"token operator\">=</span> Validator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'has_appointment'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required|boolean'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'appointment_date'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'exclude_if:has_appointment,false|required|date'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'doctor_name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'exclude_if:has_appointment,false|required|string'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Alternativamente, puede usar la <code>exclude_unless</code>regla para no validar un campo dado a menos que otro campo tenga un valor dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$validator</span> <span class=\"token operator\">=</span> Validator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'has_appointment'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required|boolean'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'appointment_date'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'exclude_unless:has_appointment,true|required|date'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'doctor_name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'exclude_unless:has_appointment,true|required|string'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"validating-when-present\"><span class=\"link\">Validar cuando está presente</span></h4>\n    <p>En algunas situaciones, es posible que desee ejecutar comprobaciones de validación en un campo <strong>solo</strong> si ese campo está presente en los datos que se están validando. Para lograr esto rápidamente, agregue la <code>sometimes</code>regla a su lista de reglas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$v</span> <span class=\"token operator\">=</span> Validator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'sometimes|required|email'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>En el ejemplo anterior, el <code>email</code>campo solo se validará si está presente en la <code>$data</code>matriz.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si está intentando validar un campo que siempre debería estar presente pero que puede estar vacío, consulte <span class=\"link\">esta nota sobre los campos opcionales</span> .</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"complex-conditional-validation\"><span class=\"link\">Validación condicional compleja</span></h4>\n    <p>A veces, es posible que desee agregar reglas de validación basadas en una lógica condicional más compleja. Por ejemplo, es posible que desee solicitar un campo determinado solo si otro campo tiene un valor mayor que 100. O puede que necesite dos campos para tener un valor determinado solo cuando haya otro campo presente. Agregar estas reglas de validación no tiene por qué ser una molestia. Primero, cree una <code>Validator</code>instancia con sus <em>reglas estáticas</em> que nunca cambian:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Validator</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$validator</span> <span class=\"token operator\">=</span> Validator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required|email'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'games'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required|numeric'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Supongamos que nuestra aplicación web es para coleccionistas de juegos. Si un coleccionista de juegos se registra en nuestra aplicación y posee más de 100 juegos, queremos que explique por qué posee tantos juegos. Por ejemplo, tal vez dirijan una tienda de reventa de juegos, o tal vez simplemente disfruten coleccionando juegos. Para agregar condicionalmente este requisito, podemos usar el <code>sometimes</code>método en la <code>Validator</code>instancia.</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$validator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sometimes</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'reason'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'required|max:500'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$input</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">games</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El primer argumento que se pasa al <code>sometimes</code>método es el nombre del campo que estamos validando condicionalmente. El segundo argumento es una lista de las reglas que queremos agregar. Si el cierre pasado como tercer argumento regresa <code>true</code>, se agregarán las reglas. Este método facilita la creación de validaciones condicionales complejas. Incluso puede agregar validaciones condicionales para varios campos a la vez:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$validator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sometimes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'reason'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'cost'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$input</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">games</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>El <code>$input</code>parámetro pasado a su cierre será una instancia de <code>Illuminate\\Support\\Fluent</code>y puede usarse para acceder a su entrada y archivos bajo validación.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"complex-conditional-array-validation\"><span class=\"link\">Validación de matriz condicional compleja</span></h4>\n    <p>A veces, es posible que desee validar un campo basado en otro campo en la misma matriz anidada cuyo índice no conoce. En estas situaciones, puede permitir que su cierre reciba un segundo argumento que será el elemento individual actual en la matriz que se valida:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$input</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'channels'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'address'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'abigail@example.com'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'url'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'address'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'https://example.com'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$validator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sometimes</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'channels.*.address'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$input</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$item</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">type</span> <span class=\"token operator\">===</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$validator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sometimes</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'channels.*.address'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'url'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$input</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$item</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">type</span> <span class=\"token operator\">!==</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Al igual que el <code>$input</code>parámetro pasado al cierre, el <code>$item</code>parámetro es una instancia de <code>Illuminate\\Support\\Fluent</code>cuando los datos del atributo son una matriz; de lo contrario, es una cadena.</p>\n    \n    <h2 id=\"validating-arrays\"><span class=\"link\">Validación de matrices</span></h2>\n    <p>Como se explica en la <span class=\"link\"><code>array</code>documentación de la regla de validación</span> , la <code>array</code>regla acepta una lista de claves de matriz permitidas. Si hay claves adicionales dentro de la matriz, la validación fallará:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Validator</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$input</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor Otwell'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'username'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'taylorotwell'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'admin'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nValidator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$input</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'array:username,locale'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>En general, siempre debe especificar las claves de matriz que pueden estar presentes dentro de su matriz. De lo contrario, los métodos <code>validate</code>y del validador <code>validated</code>devolverán todos los datos validados, incluida la matriz y todas sus claves, incluso si esas claves no fueron validadas por otras reglas de validación de matrices anidadas.</p>\n    \n    <h3 id=\"excluding-unvalidated-array-keys\"><span class=\"link\">Excluir claves de matriz no validadas</span></h3>\n    <p>Si lo desea, puede indicarle al validador de Laravel que nunca incluya claves de matriz no validadas en los datos \"validados\" que devuelve, incluso si usa la <code>array</code>regla sin especificar una lista de claves permitidas. Para lograr esto, puede llamar al <code>excludeUnvalidatedArrayKeys</code>método del validador en el <code>boot</code>método de su aplicación <code>AppServiceProvider</code>. Después de hacerlo, el validador incluirá claves de matriz en los datos \"validados\" que devuelve solo cuando esas claves fueron validadas específicamente por <span class=\"link\">reglas de matriz anidadas</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Validator</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Register any application services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Validator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">excludeUnvalidatedArrayKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"validating-nested-array-input\"><span class=\"link\">Validación de la entrada de matriz anidada</span></h3>\n    <p>Validar campos de entrada de formulario basados \u200B\u200Ben matrices anidadas no tiene por qué ser una molestia. Puede utilizar la \"notación de puntos\" para validar atributos dentro de una matriz. Por ejemplo, si la solicitud HTTP entrante contiene un <code>photos[profile]</code>campo, puede validarlo así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Validator</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$validator</span> <span class=\"token operator\">=</span> Validator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'photos.profile'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required|image'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede validar cada elemento de una matriz. Por ejemplo, para validar que cada correo electrónico en un campo de entrada de matriz dado es único, puede hacer lo siguiente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$validator</span> <span class=\"token operator\">=</span> Validator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'person.*.email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'email|unique:users'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'person.*.first_name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'required_with:person.*.last_name'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Del mismo modo, puede usar el <code>*</code>carácter al especificar <span class=\"link\">mensajes de validación personalizados en sus archivos de idioma</span> , lo que facilita el uso de un solo mensaje de validación para campos basados \u200B\u200Ben matrices:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'custom'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'person.*.email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'unique'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Each person must have a unique email address'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    \n    <h2 id=\"validating-passwords\"><span class=\"link\">Validación de contraseñas</span></h2>\n    <p>Para asegurarse de que las contraseñas tengan un nivel adecuado de complejidad, puede utilizar el <code>Password</code>objeto de regla de Laravel :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Validator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Validation<span class=\"token punctuation\">\\</span>Rules<span class=\"token punctuation\">\\</span>Password</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$validator</span> <span class=\"token operator\">=</span> Validator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'password'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'confirmed'</span><span class=\"token punctuation\">,</span> Password<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>Password</code>objeto de regla le permite personalizar fácilmente los requisitos de complejidad de la contraseña para su aplicación, como especificar que las contraseñas requieren al menos una letra, número, símbolo o caracteres con mayúsculas y minúsculas mixtas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Require at least 8 characters...</span>\nPassword<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Require at least one letter...</span>\nPassword<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">letters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Require at least one uppercase and one lowercase letter...</span>\nPassword<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">mixedCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Require at least one number...</span>\nPassword<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">numbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Require at least one symbol...</span>\nPassword<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">symbols</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n    <p>Además, puede asegurarse de que una contraseña no se haya visto comprometida en una fuga de violación de datos de contraseña pública utilizando el <code>uncompromised</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Password<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">uncompromised</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n    <p>Internamente, el <code>Password</code>objeto de regla utiliza el modelo <span class=\"link\">k-Anonimato</span> para determinar si se ha filtrado una contraseña a través del servicio <span class=\"link\">haveibeenpwned.com</span> sin sacrificar la privacidad o seguridad del usuario.</p>\n    <p>De forma predeterminada, si una contraseña aparece al menos una vez en una fuga de datos, se considerará comprometida. Puede personalizar este umbral utilizando el primer argumento del <code>uncompromised</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Ensure the password appears less than 3 times in the same data leak...</span>\nPassword<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">uncompromised</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Por supuesto, puede encadenar todos los métodos en los ejemplos anteriores:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Password<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">letters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">mixedCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">numbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">symbols</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">uncompromised</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n    \n    <h4 id=\"defining-default-password-rules\"><span class=\"link\">Definición de reglas de contraseña predeterminadas</span></h4>\n    <p>Puede que le resulte conveniente especificar las reglas de validación predeterminadas para las contraseñas en una única ubicación de su aplicación. Puede lograr esto fácilmente usando el <code>Password::defaults</code>método, que acepta un cierre. El cierre dado al <code>defaults</code>método debería devolver la configuración predeterminada de la regla Contraseña. Por lo general, la <code>defaults</code>regla debe llamarse dentro del <code>boot</code>método de uno de los proveedores de servicios de su aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Validation<span class=\"token punctuation\">\\</span>Rules<span class=\"token punctuation\">\\</span>Password</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Bootstrap any application services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Password<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">defaults</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$rule</span> <span class=\"token operator\">=</span> Password<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">app</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isProduction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">?</span> <span class=\"token variable\">$rule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">mixedCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">uncompromised</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">:</span> <span class=\"token variable\">$rule</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Luego, cuando desee aplicar las reglas predeterminadas a una contraseña en particular en proceso de validación, puede invocar el <code>defaults</code>método sin argumentos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'password'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span> Password<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">defaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    \n    <h2 id=\"custom-validation-rules\"><span class=\"link\">Reglas de validación personalizadas</span></h2>\n    \n    <h3 id=\"using-rule-objects\"><span class=\"link\">Usar objetos de regla</span></h3>\n    <p>Laravel proporciona una variedad de reglas de validación útiles; sin embargo, es posible que desee especificar algunos propios. Un método para registrar reglas de validación personalizadas es utilizar objetos de reglas. Para generar un nuevo objeto de regla, puede utilizar el <code>make:rule</code>comando Artisan. Usemos este comando para generar una regla que verifique que una cadena esté en mayúsculas. Laravel colocará la nueva regla en el <code>app/Rules</code>directorio. Si este directorio no existe, Laravel lo creará cuando ejecutes el comando Artisan para crear tu regla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>rule Uppercase</code></pre>\n    <p>Una vez creada la regla, estamos listos para definir su comportamiento. Un objeto de regla contiene dos métodos: <code>passes</code>y <code>message</code>. El <code>passes</code>método recibe el valor y el nombre del atributo, y debe devolver <code>true</code>o <code>false</code>dependiendo de si el valor del atributo es válido o no. El <code>message</code>método debe devolver el mensaje de error de validación que debe usarse cuando falla la validación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Rules</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Validation<span class=\"token punctuation\">\\</span>Rule</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Uppercase</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Rule</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Determine if the validation rule passes.\n     *\n     * @param  string  $attribute\n     * @param  mixed  $value\n     * @return bool\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">passes</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$attribute</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">strtoupper</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Get the validation error message.\n     *\n     * @return string\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'The :attribute must be uppercase.'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Puede llamar al <code>trans</code>asistente desde su <code>message</code>método si desea devolver un mensaje de error de sus archivos de traducción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the validation error message.\n *\n * @return string\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">trans</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'validation.uppercase'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Una vez que se ha definido la regla, puede adjuntarla a un validador pasando una instancia del objeto de regla con sus otras reglas de validación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Rules<span class=\"token punctuation\">\\</span>Uppercase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'string'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uppercase</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"using-closures\"><span class=\"link\">Usando cierres</span></h3>\n    <p>Si solo necesita la funcionalidad de una regla personalizada una vez en su aplicación, puede usar un cierre en lugar de un objeto de regla. El cierre recibe el nombre del atributo, el valor del atributo y una <code>$fail</code>devolución de llamada que se debe llamar si falla la validación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Validator</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$validator</span> <span class=\"token operator\">=</span> Validator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'max:255'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$attribute</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$fail</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span> <span class=\"token operator\">===</span> <span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token variable\">$fail</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'The '</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$attribute</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">' is invalid.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"implicit-rules\"><span class=\"link\">Reglas implícitas</span></h3>\n    <p>De forma predeterminada, cuando un atributo que se está validando no está presente o contiene una cadena vacía, las reglas de validación normales, incluidas las reglas personalizadas, no se ejecutan. Por ejemplo, la <span class=\"link\"><code>unique</code></span>regla no se ejecutará en una cadena vacía:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Validator</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$rules</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'unique:users,name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$input</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">''</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nValidator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$input</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$rules</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">passes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre>\n    <p>Para que una regla personalizada se ejecute incluso cuando un atributo está vacío, la regla debe implicar que el atributo es obligatorio. Para crear una regla \"implícita\", implemente la <code>Illuminate\\Contracts\\Validation\\ImplicitRule</code>interfaz. Esta interfaz sirve como una \"interfaz de marcador\" para el validador; por lo tanto, no contiene ningún método adicional que deba implementar más allá de los métodos requeridos por la <code>Rule</code>interfaz típica .</p>\n    <p>Para generar un nuevo objeto de regla implícita, puede usar el <code>make:rule</code>comando Artisan con la <code>--implicit</code>opción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"> php artisan make<span class=\"token punctuation\">:</span>rule Uppercase <span class=\"token operator\">--</span>implicit</code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Una regla \"implícita\" solo <em>implica</em> que el atributo es obligatorio. Depende de usted si realmente invalida un atributo faltante o vacío.</p></p></div>\n    </blockquote>\n</div>"
    },
    {
        "title": "Manejo de errores",
        "subtitle": "CONCEPTOS BASICOS",
        "contenido": "<div>\n    <h1>Manejo de errores</h1>    \n    <h2><span class=\"link\">Introducción</span></h2>\n    <p>Cuando inicia un nuevo proyecto de Laravel, el manejo de errores y excepciones ya está configurado para usted. La <code>App\\Exceptions\\Handler</code>clase es donde todas las excepciones lanzadas por su aplicación se registran y luego se muestran al usuario. Profundizaremos en esta clase a lo largo de esta documentación.</p>\n    \n    <h2><span class=\"link\">Configuración</span></h2>\n    <p>La <code>debug</code>opción en su <code>config/app.php</code>archivo de configuración determina cuánta información sobre un error se muestra realmente al usuario. De forma predeterminada, esta opción está configurada para respetar el valor de la <code>APP_DEBUG</code>variable de entorno, que se almacena en su <code>.env</code>archivo.</p>\n    <p>Durante el desarrollo local, debe establecer la <code>APP_DEBUG</code>variable de entorno en <code>true</code>. <strong>En su entorno de producción, este valor siempre debería ser <code>false</code>. Si el valor se establece <code>true</code>en producción, corre el riesgo de exponer valores de configuración confidenciales a los usuarios finales de su aplicación.</strong></p>\n    \n    <h2 id=\"the-exception-handler\"><span class=\"link\">El controlador de excepciones</span></h2>\n    \n    <h3 id=\"reporting-exceptions\"><span class=\"link\">Informes de excepciones</span></h3>\n    <p>Todas las excepciones son manejadas por la <code>App\\Exceptions\\Handler</code>clase. Esta clase contiene un <code>register</code>método en el que puede registrar informes de excepciones personalizados y devolver llamadas. Examinaremos cada uno de estos conceptos en detalle. Los informes de excepciones se utilizan para registrar excepciones o enviarlas a un servicio externo como <span class=\"link\">Flare</span> , <span class=\"link\">Bugsnag</span> o <span class=\"link\">Sentry</span> . De forma predeterminada, las excepciones se registrarán en función de su configuración de <span class=\"link\">registro</span> . Sin embargo, puede registrar las excepciones como desee.</p>\n    <p>Por ejemplo, si necesita informar diferentes tipos de excepciones de diferentes formas, puede usar el <code>reportable</code>método para registrar un cierre que debe ejecutarse cuando se necesita informar una excepción de un tipo determinado. Laravel deducirá qué tipo de excepción informa el cierre examinando la sugerencia de tipo del cierre:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Exceptions<span class=\"token punctuation\">\\</span>InvalidOrderException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Register the exception handling callbacks for the application.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">reportable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>InvalidOrderException <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Cuando registra una devolución de llamada de informe de excepción personalizada usando el <code>reportable</code>método, Laravel aún registrará la excepción usando la configuración de registro predeterminada para la aplicación. Si desea detener la propagación de la excepción a la pila de registro predeterminada, puede usar el <code>stop</code>método al definir su devolución de llamada de informes o regresar <code>false</code>de la devolución de llamada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">reportable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>InvalidOrderException <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">reportable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>InvalidOrderException <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Para personalizar el informe de excepciones para una excepción determinada, también puede utilizar las <span class=\"link\">excepciones notificables</span> .</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"global-log-context\"><span class=\"link\">Contexto de registro global</span></h4>\n    <p>Si está disponible, Laravel agrega automáticamente la ID del usuario actual al mensaje de registro de cada excepción como datos contextuales. Puede definir sus propios datos contextuales globales anulando el <code>context</code>método de la <code>App\\Exceptions\\Handler</code>clase de su aplicación . Esta información se incluirá en el mensaje de registro de cada excepción escrito por su aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the default context variables for logging.\n *\n * @return array\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">array_merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">parent</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'bar'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"exception-log-context\"><span class=\"link\">Contexto del registro de excepciones</span></h4>\n    <p>Si bien agregar contexto a cada mensaje de registro puede ser útil, a veces una excepción particular puede tener un contexto único que le gustaría incluir en sus registros. Al definir un <code>context</code>método en una de las excepciones personalizadas de su aplicación, puede especificar cualquier dato relevante para esa excepción que debe agregarse a la entrada de registro de la excepción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Exceptions</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Exception</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">InvalidOrderException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">/**\n     * Get the exception's context information.\n     *\n     * @return array\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">context</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'order_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">orderId</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h4 id=\"the-report-helper\"><span class=\"link\">El <code>report</code>ayudante</span></h4>\n    <p>A veces, es posible que deba informar una excepción, pero continuar manejando la solicitud actual. La <code>report</code>función auxiliar le permite informar rápidamente una excepción a través del controlador de excepciones sin mostrar una página de error al usuario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Validate the value...</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>Throwable <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"ignoring-exceptions-by-type\"><span class=\"link\">Ignorar excepciones por tipo</span></h3>\n    <p>Al crear su aplicación, habrá algunos tipos de excepciones que simplemente querrá ignorar y nunca informar. El controlador de excepciones de su aplicación contiene una <code>$dontReport</code>propiedad que se inicializa en una matriz vacía. Las clases que agregue a esta propiedad nunca se informarán; sin embargo, todavía pueden tener una lógica de representación personalizada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Exceptions<span class=\"token punctuation\">\\</span>InvalidOrderException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * A list of the exception types that should not be reported.\n *\n * @var array\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$dontReport</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    InvalidOrderException<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p> Detrás de escena, Laravel ya ignora algunos tipos de errores, como las excepciones resultantes de errores 404 HTTP \"no encontrado\" o 419 respuestas HTTP generadas por tokens CSRF no válidos.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"rendering-exceptions\"><span class=\"link\">Excepciones de representación</span></h3>\n    <p>De forma predeterminada, el controlador de excepciones de Laravel convertirá las excepciones en una respuesta HTTP por usted. Sin embargo, puede registrar un cierre de renderizado personalizado para excepciones de un tipo determinado. Puede lograr esto mediante el <code>renderable</code>método de su controlador de excepciones.</p>\n    <p>El cierre pasado al <code>renderable</code>método debería devolver una instancia de <code>Illuminate\\Http\\Response</code>, que se puede generar a través del <code>response</code>ayudante. Laravel deducirá qué tipo de excepción presenta el cierre examinando la sugerencia de tipo del cierre:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Exceptions<span class=\"token punctuation\">\\</span>InvalidOrderException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Register the exception handling callbacks for the application.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">renderable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>InvalidOrderException <span class=\"token variable\">$e</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'errors.invalid-order'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>También puede usar el <code>renderable</code>método para anular el comportamiento de renderizado para excepciones integradas de Laravel o Symfony como <code>NotFoundHttpException</code>. Si el cierre dado al <code>renderable</code>método no devuelve un valor, se utilizará la representación de excepción predeterminada de Laravel:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>HttpKernel<span class=\"token punctuation\">\\</span>Exception<span class=\"token punctuation\">\\</span>NotFoundHttpException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Register the exception handling callbacks for the application.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">renderable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>NotFoundHttpException <span class=\"token variable\">$e</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'api/*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n                <span class=\"token single-quoted-string string\">'message'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Record not found.'</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"renderable-exceptions\"><span class=\"link\">Excepciones reportables y renderizables</span></h3>\n    <p>En lugar de comprobar el tipo de excepciones en el <code>register</code>método del controlador de excepciones , puede definir métodos <code>report</code>y <code>render</code>directamente en sus excepciones personalizadas. Cuando existan estos métodos, el marco los llamará automáticamente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Exceptions</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Exception</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">InvalidOrderException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Report the exception.\n     *\n     * @return bool|null\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Render the exception into an HTTP response.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Si su excepción extiende una excepción que ya se puede procesar, como una excepción integrada de Laravel o Symfony, puede regresar <code>false</code>desde el <code>render</code>método de la excepción para generar la respuesta HTTP predeterminada de la excepción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Render the exception into an HTTP response.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return \\Illuminate\\Http\\Response\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Determine if the exception needs custom rendering...</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Si su excepción contiene una lógica de informes personalizada que solo es necesaria cuando se cumplen ciertas condiciones, es posible que deba indicarle a Laravel que a veces informe la excepción utilizando la configuración predeterminada de manejo de excepciones. Para lograr esto, puede regresar <code>false</code>del <code>report</code>método de la excepción :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Report the exception.\n *\n * @return bool|null\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Determine if the exception needs custom reporting...</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Puede escribir sugerencias sobre las dependencias necesarias del <code>report</code>método y el <span class=\"link\">contenedor de servicios</span> de Laravel las inyectará automáticamente en el método .</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"http-exceptions\"><span class=\"link\">Excepciones HTTP</span></h2>\n    <p>Algunas excepciones describen códigos de error HTTP del servidor. Por ejemplo, esto puede ser un error de \"página no encontrada\" (404), un \"error no autorizado\" (401) o incluso un error 500 generado por el desarrollador. Para generar dicha respuesta desde cualquier lugar de su aplicación, puede usar el <code>abort</code>asistente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"custom-http-error-pages\"><span class=\"link\">Páginas de error HTTP personalizadas</span></h3>\n    <p>Laravel facilita la visualización de páginas de error personalizadas para varios códigos de estado HTTP. Por ejemplo, si desea personalizar la página de error para los códigos de estado HTTP 404, cree un archivo <code>resources/views/errors/404.blade.php</code>. Este archivo se publicará en todos los errores 404 generados por su aplicación. Las vistas dentro de este directorio deben tener un nombre que coincida con el código de estado HTTP al que corresponden. La <code>Symfony\\Component\\HttpKernel\\Exception\\HttpException</code>instancia generada por la <code>abort</code>función se pasará a la vista como una <code>$exception</code>variable:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$exception</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">&gt;</span></code></pre>\n    <p>Puede publicar las plantillas de página de error predeterminadas de Laravel usando el <code>vendor:publish</code>comando Artisan. Una vez publicadas las plantillas, puedes personalizarlas a tu gusto:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan vendor<span class=\"token punctuation\">:</span>publish <span class=\"token operator\">--</span>tag<span class=\"token operator\">=</span>laravel<span class=\"token operator\">-</span>errors</code></pre>\n</div>"
    },
    {
        "title": "Inicio sesión",
        "subtitle": "CONCEPTOS BASICOS",
        "contenido": "<div>\n    <h1>Inicio sesión</h1>    \n    <h2><span class=\"link\">Introducción</span></h2>\n    <p>Para ayudarlo a aprender más sobre lo que está sucediendo dentro de su aplicación, Laravel brinda servicios de registro robustos que le permiten registrar mensajes en archivos, el registro de errores del sistema e incluso en Slack para notificar a todo su equipo.</p>\n    <p>El registro de Laravel se basa en \"canales\". Cada canal representa una forma específica de escribir información de registro. Por ejemplo, el <code>single</code>canal escribe archivos de registro en un solo archivo de registro, mientras que el <code>slack</code>canal envía mensajes de registro a Slack. Los mensajes de registro se pueden escribir en varios canales según su gravedad.</p>\n    <p>Debajo del capó, Laravel utiliza la biblioteca <span class=\"link\">Monolog</span> , que brinda soporte para una variedad de poderosos controladores de registro. Laravel hace que sea muy fácil configurar estos controladores, lo que le permite mezclarlos y combinarlos para personalizar el manejo de registros de su aplicación.</p>\n    \n    <h2><span class=\"link\">Configuración</span></h2>\n    <p>Todas las opciones de configuración para el comportamiento de registro de su aplicación se encuentran en el <code>config/logging.php</code>archivo de configuración. Este archivo le permite configurar los canales de registro de su aplicación, así que asegúrese de revisar cada uno de los canales disponibles y sus opciones. Revisaremos algunas opciones comunes a continuación.</p>\n    <p>De forma predeterminada, Laravel usará el <code>stack</code>canal cuando registre mensajes. El <code>stack</code>canal se utiliza para agregar varios canales de registro en un solo canal. Para obtener más información sobre la construcción de pilas, consulte la <span class=\"link\">documentación a continuación</span> .</p>\n    \n    <h4 id=\"configuring-the-channel-name\"><span class=\"link\">Configurar el nombre del canal</span></h4>\n    <p>De forma predeterminada, se crea una instancia de Monolog con un \"nombre de canal\" que coincide con el entorno actual, como <code>production</code>o <code>local</code>. Para cambiar este valor, agregue una <code>name</code>opción a la configuración de su canal:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'stack'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'driver'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'stack'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'channel-name'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'channels'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'single'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'slack'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    \n    <h3 id=\"available-channel-drivers\"><span class=\"link\">Controladores de canal disponibles</span></h3>\n    <p>Cada canal de registro está alimentado por un \"controlador\". El controlador determina cómo y dónde se registra realmente el mensaje de registro. Los siguientes controladores de canal de registro están disponibles en todas las aplicaciones de Laravel. Ya hay una entrada para la mayoría de estos controladores en el <code>config/logging.php</code>archivo de configuración de su aplicación , así que asegúrese de revisar este archivo para familiarizarse con su contenido:</p>\n    <table>\n        <thead>\n        <tr>\n            <th>Nombre</th>\n            <th>Descripción</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>custom</code></td>\n            <td>Un controlador que llama a una fábrica específica para crear un canal.</td>\n        </tr>\n        <tr>\n            <td><code>daily</code></td>\n            <td>Un <code>RotatingFileHandler</code>controlador Monolog basado que gira a diario</td>\n        </tr>\n        <tr>\n            <td><code>errorlog</code></td>\n            <td>Un <code>ErrorLogHandler</code>controlador Monolog basado</td>\n        </tr>\n        <tr>\n            <td><code>monolog</code></td>\n            <td>Un controlador de fábrica de Monolog que puede utilizar cualquier controlador de Monolog compatible</td>\n        </tr>\n        <tr>\n            <td><code>null</code></td>\n            <td>Un controlador que descarta todos los mensajes de registro</td>\n        </tr>\n        <tr>\n            <td><code>papertrail</code></td>\n            <td>Un <code>SyslogUdpHandler</code>controlador Monolog basado</td>\n        </tr>\n        <tr>\n            <td><code>single</code></td>\n            <td>Un canal de registro basado en un solo archivo o ruta ( <code>StreamHandler</code>)</td>\n        </tr>\n        <tr>\n            <td><code>slack</code></td>\n            <td>Un <code>SlackWebhookHandler</code>controlador Monolog basado</td>\n        </tr>\n        <tr>\n            <td><code>stack</code></td>\n            <td>Un contenedor para facilitar la creación de canales \"multicanal\"</td>\n        </tr>\n        <tr>\n            <td><code>syslog</code></td>\n            <td>Un <code>SyslogHandler</code>controlador Monolog basado</td>\n        </tr>\n        </tbody>\n    </table>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Consulte la documentación sobre <span class=\"link\">la personalización avanzada de canales</span> para obtener más información sobre los controladores <code>monolog</code>y <code>custom</code>.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"channel-prerequisites\"><span class=\"link\">Requisitos previos del canal</span></h3>\n    \n    <h4 id=\"configuring-the-single-and-daily-channels\"><span class=\"link\">Configuración de los canales individuales y diarios</span></h4>\n    <p>El <code>single</code>y <code>daily</code>canales tienen tres opciones de configuración opcionales: <code>bubble</code>, <code>permission</code>, y <code>locking</code>.</p>\n    <table>\n        <thead>\n        <tr>\n            <th>Nombre</th>\n            <th>Descripción</th>\n            <th>Defecto</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>bubble</code></td>\n            <td>Indica si los mensajes deben aparecer en otros canales después de ser manejados</td>\n            <td><code>true</code></td>\n        </tr>\n        <tr>\n            <td><code>locking</code></td>\n            <td>Intente bloquear el archivo de registro antes de escribir en él</td>\n            <td><code>false</code></td>\n        </tr>\n        <tr>\n            <td><code>permission</code></td>\n            <td>Los permisos del archivo de registro</td>\n            <td><code>0644</code></td>\n        </tr>\n        </tbody>\n    </table>\n    \n    <h4 id=\"configuring-the-papertrail-channel\"><span class=\"link\">Configuración del canal Papertrail</span></h4>\n    <p>El <code>papertrail</code>canal requiere las opciones de configuración <code>host</code>y <code>port</code>. Puede obtener estos valores de <span class=\"link\">Papertrail</span> .</p>\n    \n    <h4 id=\"configuring-the-slack-channel\"><span class=\"link\">Configuración del canal Slack</span></h4>\n    <p>El <code>slack</code>canal requiere una <code>url</code>opción de configuración. Esta URL debe coincidir con la URL de un <span class=\"link\">webhook entrante</span> que haya configurado para su equipo de Slack.</p>\n    <p>De forma predeterminada, Slack solo recibirá registros de <code>critical</code>nivel y superior; sin embargo, puede ajustar esto en su <code>config/logging.php</code>archivo de configuración modificando la <code>level</code>opción de configuración dentro de la matriz de configuración de su canal de registro de Slack.</p>\n    \n    <h2 id=\"building-log-stacks\"><span class=\"link\">Construcción de pilas de troncos</span></h2>\n    <p>Como se mencionó anteriormente, el <code>stack</code>controlador le permite combinar múltiples canales en un solo canal de registro para su conveniencia. Para ilustrar cómo usar las pilas de registros, echemos un vistazo a una configuración de ejemplo que puede ver en una aplicación de producción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'channels'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'stack'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'driver'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'stack'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'channels'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'syslog'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'slack'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token single-quoted-string string\">'syslog'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'driver'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'syslog'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'level'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'debug'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token single-quoted-string string\">'slack'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'driver'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'slack'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'url'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'LOG_SLACK_WEBHOOK_URL'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'username'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Laravel Log'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'emoji'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">':boom:'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'level'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'critical'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    <p>Analicemos esta configuración. Primero, observe que nuestro <code>stack</code>canal agrega otros dos canales a través de su <code>channels</code>opción: <code>syslog</code>y <code>slack</code>. Por lo tanto, al registrar mensajes, ambos canales tendrán la oportunidad de registrar el mensaje. Sin embargo, como veremos a continuación, si estos canales realmente registran el mensaje puede estar determinado por la gravedad / \"nivel\" del mensaje.</p>\n    \n    <h4 id=\"log-levels\"><span class=\"link\">Niveles de registro</span></h4>\n    <p>Tome nota de la <code>level</code>opción de configuración presente en las configuraciones de canal <code>syslog</code>y <code>slack</code>en el ejemplo anterior. Esta opción determina el \"nivel\" mínimo que debe tener un mensaje para que el canal lo registre. Monolog, que impulsa los servicios de registro de Laravel, ofrece todos los niveles de registro definidos en la <span class=\"link\">especificación RFC 5424</span> : <strong>emergencia</strong> , <strong>alerta</strong> , <strong>crítico</strong> , <strong>error</strong> , <strong>advertencia</strong> , <strong>aviso</strong> , <strong>información</strong> y <strong>depuración</strong> .</p>\n    <p>Entonces, imagina que registramos un mensaje usando el <code>debug</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Log<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'An informational message.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Dada nuestra configuración, el <code>syslog</code>canal escribirá el mensaje en el registro del sistema; sin embargo, dado que el mensaje de error no es <code>critical</code>o es superior, no se enviará a Slack. Sin embargo, si registramos un <code>emergency</code>mensaje, se enviará tanto al registro del sistema como a Slack, ya que el <code>emergency</code>nivel está por encima de nuestro umbral de nivel mínimo para ambos canales:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Log<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">emergency</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'The system is down!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"writing-log-messages\"><span class=\"link\">Escribir mensajes de registro</span></h2>\n    <p>Puede escribir información en los registros utilizando la <code>Log</code> <span class=\"link\">fachada</span> . Como se mencionó anteriormente, el registrador proporciona los ocho niveles de registro definidos en la <span class=\"link\">especificación RFC 5424</span> : <strong>emergencia</strong> , <strong>alerta</strong> , <strong>crítico</strong> , <strong>error</strong> , <strong>advertencia</strong> , <strong>aviso</strong> , <strong>información</strong> y <strong>depuración</strong> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Log</span><span class=\"token punctuation\">;</span>\n\nLog<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">emergency</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLog<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLog<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">critical</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLog<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLog<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">warning</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLog<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">notice</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLog<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nLog<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$message</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede llamar a cualquiera de estos métodos para registrar un mensaje para el nivel correspondiente. De forma predeterminada, el mensaje se escribirá en el canal de registro predeterminado según lo configurado por su <code>logging</code>archivo de configuración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Log</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Show the profile for the given user.\n     *\n     * @param  int  $id\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Log<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Showing the user profile for user: '</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user.profile'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">findOrFail</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h3 id=\"contextual-information\"><span class=\"link\">Información contextual</span></h3>\n    <p>Se puede pasar una serie de datos contextuales a los métodos de registro. Estos datos contextuales se formatearán y se mostrarán con el mensaje de registro:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Log</span><span class=\"token punctuation\">;</span>\n\nLog<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'User failed to login.'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>De vez en cuando, es posible que desee especificar alguna información contextual que debe incluirse con todas las entradas de registro posteriores. Por ejemplo, es posible que desee registrar un ID de solicitud asociado con cada solicitud entrante a su aplicación. Para lograr esto, puede llamar al método de la <code>Log</code>fachada <code>withContext</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Closure</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Log</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AssignRequestId</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Handle an incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> Closure <span class=\"token variable\">$next</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$requestId</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">uuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Log<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'request-id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$requestId</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Request-Id'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$requestId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h3 id=\"writing-to-specific-channels\"><span class=\"link\">Escribir en canales específicos</span></h3>\n    <p>A veces, es posible que desee registrar un mensaje en un canal que no sea el canal predeterminado de su aplicación. Puede usar el <code>channel</code>método en la <code>Log</code>fachada para recuperar e iniciar sesión en cualquier canal definido en su archivo de configuración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Log</span><span class=\"token punctuation\">;</span>\n\nLog<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'slack'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Something happened!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea crear una pila de registro a pedido que consta de varios canales, puede usar el <code>stack</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Log<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'single'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'slack'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Something happened!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"monolog-channel-customization\"><span class=\"link\">Personalización del canal Monolog</span></h2>\n    \n    <h3 id=\"customizing-monolog-for-channels\"><span class=\"link\">Personalización de Monolog para canales</span></h3>\n    <p>A veces, es posible que necesite un control total sobre cómo se configura Monolog para un canal existente. Por ejemplo, es posible que desee configurar una <code>FormatterInterface</code>implementación personalizada de Monolog para el <code>single</code>canal integrado de Laravel .</p>\n    <p>Para comenzar, defina una <code>tap</code>matriz en la configuración del canal. La <code>tap</code>matriz debe contener una lista de clases que deben tener la oportunidad de personalizar (o \"aprovechar\") la instancia de Monolog después de su creación. No existe una ubicación convencional donde se deben colocar estas clases, por lo que puede crear un directorio dentro de su aplicación para contener estas clases:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'single'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'driver'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'single'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'tap'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>App\\<span class=\"token package\">Logging<span class=\"token punctuation\">\\</span>CustomizeFormatter</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'path'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">storage_path</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'logs/laravel.log'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'level'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'debug'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    <p>Una vez que haya configurado la <code>tap</code>opción en su canal, estará listo para definir la clase que personalizará su instancia de Monolog. Esta clase solo necesita un único método:, <code>__invoke</code>que recibe una <code>Illuminate\\Log\\Logger</code>instancia. La <code>Illuminate\\Log\\Logger</code>instancia envía todas las llamadas a métodos a la instancia de Monolog subyacente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Logging</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Monolog<span class=\"token punctuation\">\\</span>Formatter<span class=\"token punctuation\">\\</span>LineFormatter</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomizeFormatter</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Customize the given logger instance.\n     *\n     * @param  \\Illuminate\\Log\\Logger  $logger\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$logger</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$logger</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getHandlers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$handler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$handler</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">setFormatter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LineFormatter</span><span class=\"token punctuation\">(</span>\n                <span class=\"token single-quoted-string string\">'[%datetime%] %channel%.%level_name%: %message% %context% %extra%'</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Todas sus clases \"tap\" son resueltas por el <span class=\"link\">contenedor de servicios</span> , por lo que cualquier dependencia de constructor que requieran se inyectará automáticamente.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"creating-monolog-handler-channels\"><span class=\"link\">Creación de canales de controlador de Monolog</span></h3>\n    <p>Monolog tiene una variedad de <span class=\"link\">controladores disponibles</span> y Laravel no incluye un canal integrado para cada uno. En algunos casos, es posible que desee crear un canal personalizado que sea simplemente una instancia de un controlador Monolog específico que no tiene un controlador de registro de Laravel correspondiente. Estos canales se pueden crear fácilmente utilizando el <code>monolog</code>controlador.</p>\n    <p>Cuando se usa el <code>monolog</code>controlador, la <code>handler</code>opción de configuración se usa para especificar qué controlador se instanciará. Opcionalmente, cualquier parámetro de constructor que necesite el controlador puede especificarse mediante la <code>with</code>opción de configuración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'logentries'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'driver'</span>  <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'monolog'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'handler'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Monolog\\<span class=\"token package\">Handler<span class=\"token punctuation\">\\</span>SyslogUdpHandler</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'with'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'host'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'my.logentries.internal.datahubhost.company.com'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'port'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'10000'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    \n    <h4 id=\"monolog-formatters\"><span class=\"link\">Formateadores de monólogos</span></h4>\n    <p>Al utilizar el <code>monolog</code>controlador, Monolog <code>LineFormatter</code>se utilizará como formateador predeterminado. Sin embargo, puede personalizar el tipo de formateador pasado al controlador usando las opciones de configuración <code>formatter</code>y <code>formatter_with</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'browser'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'driver'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'monolog'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'handler'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Monolog\\<span class=\"token package\">Handler<span class=\"token punctuation\">\\</span>BrowserConsoleHandler</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'formatter'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Monolog\\<span class=\"token package\">Formatter<span class=\"token punctuation\">\\</span>HtmlFormatter</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'formatter_with'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'dateFormat'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Y-m-d'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    <p>Si está utilizando un controlador Monolog que es capaz de proporcionar su propio formateador, puede establecer el valor de la <code>formatter</code>opción de configuración en <code>default</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'newrelic'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'driver'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'monolog'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'handler'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Monolog\\<span class=\"token package\">Handler<span class=\"token punctuation\">\\</span>NewRelicHandler</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'formatter'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'default'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    \n    <h3 id=\"creating-custom-channels-via-factories\"><span class=\"link\">Creación de canales personalizados a través de fábricas</span></h3>\n    <p>Si desea definir un canal completamente personalizado en el que tenga control total sobre la creación de instancias y la configuración de Monolog, puede especificar un <code>custom</code>tipo de controlador en su <code>config/logging.php</code>archivo de configuración. Su configuración debe incluir una <code>via</code>opción que contenga el nombre de la clase de fábrica que se invocará para crear la instancia de Monolog:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'channels'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'example-custom-channel'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'driver'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'custom'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'via'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> App\\<span class=\"token package\">Logging<span class=\"token punctuation\">\\</span>CreateCustomLogger</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    <p>Una vez que haya configurado el <code>custom</code>canal del controlador, estará listo para definir la clase que creará su instancia de Monolog. Esta clase solo necesita un <code>__invoke</code>método único que debería devolver la instancia del registrador Monolog. El método recibirá la matriz de configuración de canales como su único argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Logging</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Monolog<span class=\"token punctuation\">\\</span>Logger</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateCustomLogger</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Create a custom Monolog instance.\n     *\n     * @param  array  $config\n     * @return \\Monolog\\Logger\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$config</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <script async=\"\" type=\"text/javascript\" src=\"//cdn.carbonads.com/carbon.js?serve=CKYILK3E&amp;placement=laravelcom\" id=\"_carbonads_js\"></script><div id=\"carbonads\"><span><span class=\"carbon-wrap\"><span class=\"link\"><img src=\"https://cdn4.buysellads.net/uu/1/95310/1623944604-DODX2735-260x200.jpg\" alt=\"anuncios a través de Carbon\" border=\"0\" height=\"100\" width=\"130\" style=\"max-width: 130px;\"></span><span class=\"link\">Aprovisione clústeres de MongoDB en minutos. Obtenga $ 100 de crédito gratis.</span></span><span class=\"link\">anuncios a través de Carbon</span><img src=\"https://ad.doubleclick.net/ddm/trackimp/N1212560.3227239CARBONADS/B25195983.307103403;dc_trk_aid=499956010;dc_trk_cid=153337565;ord=163236387;dc_lat=;dc_rdid=;tag_for_child_directed_treatment=;tfua=;gdpr=$;gdpr_consent=$;ltd=?\" border=\"0\" height=\"1\" width=\"1\" alt=\"ads via Carbon\" style=\"display: none;\"></span></div>\n</div>"
    },
    {
        "title": "Consola artesanal",
        "subtitle": "LARAVEL AVANZADO",
        "contenido": "<div>\n    <h1>Consola artesanal</h1>\n    <p></p>\n    <h2><span class=\"link\">Introducción</span></h2>\n    <p>Artisan es la interfaz de línea de comandos incluida con Laravel. Artisan existe en la raíz de su aplicación como el <code>artisan</code>script y proporciona una serie de comandos útiles que pueden ayudarlo mientras construye su aplicación. Para ver una lista de todos los comandos Artisan disponibles, puede usar el <code>list</code>comando:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan <span class=\"token keyword\">list</span></code></pre>\n    <p>Cada comando también incluye una pantalla de \"ayuda\" que muestra y describe los argumentos y opciones disponibles del comando. Para ver una pantalla de ayuda, preceda el nombre del comando con <code>help</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan help migrate</code></pre>\n    <p></p>\n    <h4 id=\"laravel-sail\"><span class=\"link\">Vela Laravel</span></h4>\n    <p>Si está utilizando <span class=\"link\">Laravel Sail</span> como su entorno de desarrollo local, recuerde usar la <code>sail</code>línea de comando para invocar los comandos de Artisan. Sail ejecutará sus comandos Artisan dentro de los contenedores Docker de su aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>sail artisan <span class=\"token keyword\">list</span></code></pre>\n    <p></p>\n    <h3 id=\"tinker\"><span class=\"link\">Tinker (REPL)</span></h3>\n    <p>Laravel Tinker es un poderoso REPL para el marco de Laravel, impulsado por el paquete <span class=\"link\">PsySH</span> .</p>\n    <p></p>\n    <h4 id=\"installation\"><span class=\"link\">Instalación</span></h4>\n    <p>Todas las aplicaciones de Laravel incluyen Tinker por defecto. Sin embargo, puede instalar Tinker usando Composer si lo ha eliminado previamente de su aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">composer <span class=\"token keyword\">require</span> laravel<span class=\"token operator\">/</span>tinker</code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>¿Busca una interfaz de usuario gráfica para interactuar con su aplicación Laravel? ¡Echa un vistazo a <span class=\"link\">Tinkerwell</span> !</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"usage\"><span class=\"link\">Uso</span></h4>\n    <p>Tinker le permite interactuar con toda su aplicación Laravel en la línea de comando, incluidos sus modelos, trabajos, eventos y más de Eloquent. Para ingresar al entorno de Tinker, ejecute el <code>tinker</code>comando Artisan:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan tinker</code></pre>\n    <p>Puede publicar el archivo de configuración de Tinker usando el <code>vendor:publish</code>comando:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan vendor<span class=\"token punctuation\">:</span>publish <span class=\"token operator\">--</span>provider<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"Laravel\\Tinker\\TinkerServiceProvider\"</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>La <code>dispatch</code>función auxiliar y el <code>dispatch</code>método de la <code>Dispatchable</code>clase dependen de la recolección de basura para colocar el trabajo en la cola. Por lo tanto, cuando use tinker, debe usar <code>Bus::dispatch</code>o <code>Queue::push</code>para enviar trabajos.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"command-allow-list\"><span class=\"link\">Lista de permisos de comando</span></h4>\n    <p>Tinker utiliza una lista de \"permisos\" para determinar qué comandos de Artisan pueden ejecutarse dentro de su shell. Por defecto, es posible que encuentre los <code>clear-compiled</code>, <code>down</code>, <code>env</code>, <code>inspire</code>, <code>migrate</code>, <code>optimize</code>, y <code>up</code>comandos. Si desea permitir más comandos, puede agregarlos a la <code>commands</code>matriz en su <code>tinker.php</code>archivo de configuración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'commands'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// App\\Console\\Commands\\ExampleCommand::class,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    <p></p>\n    <h4 id=\"classes-that-should-not-be-aliased\"><span class=\"link\">Clases que no deben tener alias</span></h4>\n    <p>Normalmente, Tinker asigna automáticamente un alias a las clases cuando interactúas con ellas en Tinker. Sin embargo, es posible que desee nunca asignar un alias a algunas clases. Puede lograr esto enumerando las clases en la <code>dont_alias</code>matriz de su <code>tinker.php</code>archivo de configuración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'dont_alias'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    App\\<span class=\"token package\">Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    <p></p>\n    <h2 id=\"writing-commands\"><span class=\"link\">Comandos de escritura</span></h2>\n    <p>Además de los comandos proporcionados con Artisan, puede crear sus propios comandos personalizados. Los comandos generalmente se almacenan en el <code>app/Console/Commands</code>directorio; sin embargo, puede elegir su propia ubicación de almacenamiento siempre que Composer pueda cargar sus comandos.</p>\n    <p></p>\n    <h3 id=\"generating-commands\"><span class=\"link\">Generando comandos</span></h3>\n    <p>Para crear un nuevo comando, puede usar el <code>make:command</code>comando Artisan. Este comando creará una nueva clase de comando en el <code>app/Console/Commands</code>directorio. No se preocupe si este directorio no existe en su aplicación; se creará la primera vez que ejecute el <code>make:command</code>comando Artisan:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>command SendEmails</code></pre>\n    <p></p>\n    <h3 id=\"command-structure\"><span class=\"link\">Estructura de mando</span></h3>\n    <p>Después de generar su comando, debe definir los valores apropiados para las propiedades <code>signature</code>y <code>description</code>de la clase. Estas propiedades se utilizarán al mostrar su comando en la <code>list</code>pantalla. La <code>signature</code>propiedad también le permite definir <span class=\"link\">las expectativas de entrada de su comando</span> . El <code>handle</code>método se llamará cuando se ejecute su comando. Puede colocar su lógica de comando en este método.</p>\n    <p>Echemos un vistazo a un comando de ejemplo. Tenga en cuenta que podemos solicitar cualquier dependencia que necesitemos a través del <code>handle</code>método del comando . El <span class=\"link\">contenedor de servicios de</span> Laravel inyectará automáticamente todas las dependencias que están insinuadas en la firma de este método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Console<span class=\"token punctuation\">\\</span>Commands</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>DripEmailer</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Console<span class=\"token punctuation\">\\</span>Command</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SendEmails</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Command</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The name and signature of the console command.\n     *\n     * @var string\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$signature</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'mail:send {user}'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * The console command description.\n     *\n     * @var string\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$description</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'Send a marketing email to a user'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Create a new command instance.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">parent</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Execute the console command.\n     *\n     * @param  \\App\\Support\\DripEmailer  $drip\n     * @return mixed\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>DripEmailer <span class=\"token variable\">$drip</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$drip</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">argument</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Para una mayor reutilización del código, es una buena práctica mantener los comandos de la consola ligeros y dejar que se remitan a los servicios de la aplicación para realizar sus tareas. En el ejemplo anterior, tenga en cuenta que inyectamos una clase de servicio para hacer el \"trabajo pesado\" de enviar los correos electrónicos.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"closure-commands\"><span class=\"link\">Comandos de cierre</span></h3>\n    <p>Los comandos basados \u200B\u200Ben cierres proporcionan una alternativa a la definición de comandos de consola como clases. De la misma manera que los cierres de rutas son una alternativa a los controladores, piense en los cierres de comandos como una alternativa a las clases de comandos. Dentro del <code>commands</code>método de su <code>app/Console/Kernel.php</code>archivo, Laravel carga el <code>routes/console.php</code>archivo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Register the closure based commands for the application.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">commands</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">require</span> <span class=\"token function\">base_path</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'routes/console.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Aunque este archivo no define rutas HTTP, define puntos de entrada (rutas) basados \u200B\u200Ben la consola en su aplicación. Dentro de este archivo, puede definir todos sus comandos de consola basados \u200B\u200Ben el cierre usando el <code>Artisan::command</code>método. El <code>command</code>método acepta dos argumentos: la <span class=\"link\">firma</span> del <span class=\"link\">comando</span> y un cierre que recibe los argumentos y opciones del comando:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Artisan<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'mail:send {user}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"Sending email to: <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">}</span></span>!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El cierre está vinculado a la instancia de comando subyacente, por lo que tiene acceso completo a todos los métodos auxiliares a los que normalmente podría acceder en una clase de comando completa.</p>\n    <p></p>\n    <h4 id=\"type-hinting-dependencies\"><span class=\"link\">Dependencias de sugerencias de tipo</span></h4>\n    <p>Además de recibir los argumentos y las opciones de su comando, los cierres de comandos también pueden indicar dependencias adicionales que le gustaría resolver fuera del <span class=\"link\">contenedor de servicios</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>DripEmailer</span><span class=\"token punctuation\">;</span>\n\nArtisan<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'mail:send {user}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>DripEmailer <span class=\"token variable\">$drip</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$drip</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"closure-command-descriptions\"><span class=\"link\">Descripciones de los comandos de cierre</span></h4>\n    <p>Al definir un comando basado en cierre, puede usar el <code>purpose</code>método para agregar una descripción al comando. Esta descripción se mostrará cuando ejecute los comandos <code>php artisan list</code>o <code>php artisan help</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Artisan<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'mail:send {user}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">purpose</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Send a marketing email to a user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"defining-input-expectations\"><span class=\"link\">Definición de expectativas de entrada</span></h2>\n    <p>Al escribir comandos de consola, es común recopilar información del usuario a través de argumentos u opciones. Laravel hace que sea muy conveniente definir la entrada que espera del usuario usando la <code>signature</code>propiedad en sus comandos. La <code>signature</code>propiedad le permite definir el nombre, los argumentos y las opciones del comando en una sintaxis única, expresiva y similar a una ruta.</p>\n    <p></p>\n    <h3 id=\"arguments\"><span class=\"link\">Argumentos</span></h3>\n    <p>Todos los argumentos y opciones proporcionados por el usuario están entre llaves. En el siguiente ejemplo, el comando define un argumento requerido <code>user</code>::</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The name and signature of the console command.\n *\n * @var string\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$signature</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'mail:send {user}'</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede hacer que los argumentos sean opcionales o definir valores predeterminados para los argumentos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Optional argument...</span>\nmail<span class=\"token punctuation\">:</span>send <span class=\"token punctuation\">{</span>user<span class=\"token operator\">?</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Optional argument with default value...</span>\nmail<span class=\"token punctuation\">:</span>send <span class=\"token punctuation\">{</span>user<span class=\"token operator\">=</span>foo<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h3 id=\"options\"><span class=\"link\">Opciones</span></h3>\n    <p>Las opciones, como los argumentos, son otra forma de entrada del usuario. Las opciones tienen como prefijo dos guiones ( <code>--</code>) cuando se proporcionan a través de la línea de comandos. Hay dos tipos de opciones: las que reciben un valor y las que no. Las opciones que no reciben un valor sirven como un \"cambio\" booleano. Echemos un vistazo a un ejemplo de este tipo de opción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The name and signature of the console command.\n *\n * @var string\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$signature</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'mail:send {user} {--queue}'</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>En este ejemplo, el <code>--queue</code>conmutador se puede especificar al llamar al comando Artisan. Si <code>--queue</code>se pasa el cambio, el valor de la opción será <code>true</code>. De lo contrario, el valor será <code>false</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan mail<span class=\"token punctuation\">:</span>send <span class=\"token number\">1</span> <span class=\"token operator\">--</span>queue</code></pre>\n    <p></p>\n    <h4 id=\"options-with-values\"><span class=\"link\">Opciones con valores</span></h4>\n    <p>A continuación, echemos un vistazo a una opción que espera un valor. Si el usuario debe especificar un valor para una opción, debe agregar un <code>=</code>signo al nombre de la opción como sufijo :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The name and signature of the console command.\n *\n * @var string\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$signature</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'mail:send {user} {--queue=}'</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>En este ejemplo, el usuario puede pasar un valor para la opción así. Si no se especifica la opción al invocar el comando, su valor será <code>null</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan mail<span class=\"token punctuation\">:</span>send <span class=\"token number\">1</span> <span class=\"token operator\">--</span>queue<span class=\"token operator\">=</span><span class=\"token keyword\">default</span></code></pre>\n    <p>Puede asignar valores predeterminados a las opciones especificando el valor predeterminado después del nombre de la opción. Si el usuario no pasa ningún valor de opción, se utilizará el valor predeterminado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mail<span class=\"token punctuation\">:</span>send <span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">--</span>queue<span class=\"token operator\">=</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h4 id=\"option-shortcuts\"><span class=\"link\">Atajos de opciones</span></h4>\n    <p>Para asignar un atajo al definir una opción, puede especificarlo antes del nombre de la opción y usar el <code>|</code>carácter como delimitador para separar el atajo del nombre completo de la opción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mail<span class=\"token punctuation\">:</span>send <span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">--</span><span class=\"token constant\">Q</span><span class=\"token operator\">|</span>queue<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h3 id=\"input-arrays\"><span class=\"link\">Matrices de entrada</span></h3>\n    <p>Si desea definir argumentos u opciones para esperar múltiples valores de entrada, puede usar el <code>*</code>carácter. Primero, echemos un vistazo a un ejemplo que especifica tal argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mail<span class=\"token punctuation\">:</span>send <span class=\"token punctuation\">{</span>user<span class=\"token operator\">*</span><span class=\"token punctuation\">}</span></code></pre>\n    <p>Al llamar a este método, los <code>user</code>argumentos pueden pasarse en orden a la línea de comando. Por ejemplo, el siguiente comando establecerá el valor de <code>user</code>en una matriz con <code>foo</code>y <code>bar</code>como sus valores:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan mail<span class=\"token punctuation\">:</span>send foo bar</code></pre>\n    <p>Este <code>*</code>carácter se puede combinar con una definición de argumento opcional para permitir cero o más instancias de un argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mail<span class=\"token punctuation\">:</span>send <span class=\"token punctuation\">{</span>user<span class=\"token operator\">?</span><span class=\"token operator\">*</span><span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h4 id=\"option-arrays\"><span class=\"link\">Matrices de opciones</span></h4>\n    <p>Al definir una opción que espera múltiples valores de entrada, cada valor de opción pasado al comando debe tener como prefijo el nombre de la opción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mail<span class=\"token punctuation\">:</span>send <span class=\"token punctuation\">{</span>user<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">--</span>id<span class=\"token operator\">=</span><span class=\"token operator\">*</span><span class=\"token punctuation\">}</span>\n\nphp artisan mail<span class=\"token punctuation\">:</span>send <span class=\"token operator\">--</span>id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">--</span>id<span class=\"token operator\">=</span><span class=\"token number\">2</span></code></pre>\n    <p></p>\n    <h3 id=\"input-descriptions\"><span class=\"link\">Descripciones de entrada</span></h3>\n    <p>Puede asignar descripciones a los argumentos de entrada y las opciones separando el nombre del argumento de la descripción con dos puntos. Si necesita un poco más de espacio para definir su comando, no dude en difundir la definición en varias líneas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The name and signature of the console command.\n *\n * @var string\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$signature</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'mail:send\n                        {user : The ID of the user}\n                        {--queue= : Whether the job should be queued}'</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"command-io\"><span class=\"link\">E / S de comando</span></h2>\n    <p></p>\n    <h3 id=\"retrieving-input\"><span class=\"link\">Recuperando entrada</span></h3>\n    <p>Mientras se ejecuta su comando, es probable que necesite acceder a los valores de los argumentos y opciones aceptados por su comando. Para hacerlo, puede utilizar los métodos <code>argument</code>y <code>option</code>. Si un argumento u opción no existe, <code>null</code>se devolverá:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Execute the console command.\n *\n * @return int\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$userId</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">argument</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Si necesita recuperar todos los argumentos como un <code>array</code>, llame al <code>arguments</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$arguments</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">arguments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Las opciones se pueden recuperar con la misma facilidad que los argumentos utilizando el <code>option</code>método. Para recuperar todas las opciones como una matriz, llame al <code>options</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Retrieve a specific option...</span>\n<span class=\"token variable\">$queueName</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'queue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Retrieve all options as an array...</span>\n<span class=\"token variable\">$options</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">options</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"prompting-for-input\"><span class=\"link\">Solicitar información</span></h3>\n    <p>Además de mostrar la salida, también puede pedirle al usuario que proporcione información durante la ejecución de su comando. El <code>ask</code>método le pedirá al usuario la pregunta dada, aceptará su entrada y luego devolverá la entrada del usuario a su comando:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Execute the console command.\n *\n * @return mixed\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ask</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'What is your name?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>El <code>secret</code>método es similar a <code>ask</code>, pero la entrada del usuario no será visible para ellos mientras escribe en la consola. Este método es útil cuando se solicita información confidencial, como contraseñas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">secret</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'What is the password?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"asking-for-confirmation\"><span class=\"link\">Pedir confirmación</span></h4>\n    <p>Si necesita pedirle al usuario una simple confirmación de \"sí o no\", puede utilizar el <code>confirm</code>método. De forma predeterminada, este método volverá <code>false</code>. Sin embargo, si el usuario ingresa <code>y</code>o <code>yes</code>responde a la solicitud, el método regresará <code>true</code>.</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Do you wish to continue?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Si es necesario, puede especificar que la solicitud de confirmación debe regresar <code>true</code>por defecto pasando <code>true</code>como segundo argumento al <code>confirm</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Do you wish to continue?'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h4 id=\"auto-completion\"><span class=\"link\">Autocompletar</span></h4>\n    <p>El <code>anticipate</code>método se puede utilizar para proporcionar autocompletado para posibles opciones. El usuario aún puede proporcionar cualquier respuesta, independientemente de las sugerencias de autocompletar:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">anticipate</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'What is your name?'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Dayle'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Alternativamente, puede pasar un cierre como segundo argumento del <code>anticipate</code>método. El cierre se llamará cada vez que el usuario escriba un carácter de entrada. El cierre debe aceptar un parámetro de cadena que contenga la entrada del usuario hasta el momento y devolver una matriz de opciones para autocompletar:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">anticipate</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'What is your address?'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Return auto-completion options...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"multiple-choice-questions\"><span class=\"link\">Preguntas de respuestas múltiples</span></h4>\n    <p>Si necesita darle al usuario un conjunto predefinido de opciones al hacer una pregunta, puede usar el <code>choice</code>método. Puede establecer el índice de matriz del valor predeterminado que se devolverá si no se elige ninguna opción pasando el índice como tercer argumento del método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">choice</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'What is your name?'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Dayle'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$defaultIndex</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Además, el <code>choice</code>método acepta argumentos cuarto y quinto opcionales para determinar el número máximo de intentos para seleccionar una respuesta válida y si se permiten selecciones múltiples:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">choice</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'What is your name?'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Dayle'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$defaultIndex</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$maxAttempts</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$allowMultipleSelections</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">false</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"writing-output\"><span class=\"link\">Salida de escritura</span></h3>\n    <p>Para enviar la salida a la consola, es posible utilizar los <code>line</code>, <code>info</code>, <code>comment</code>, <code>question</code>, <code>warn</code>, y <code>error</code>métodos. Cada uno de estos métodos utilizará colores ANSI apropiados para su propósito. Por ejemplo, mostremos información general al usuario. Normalmente, el <code>info</code>método se mostrará en la consola como texto de color verde:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Execute the console command.\n *\n * @return mixed\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'The command was successful!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Para mostrar un mensaje de error, use el <code>error</code>método. El texto del mensaje de error generalmente se muestra en rojo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Something went wrong!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede utilizar el <code>line</code>método para mostrar texto sin formato y sin colorear:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">line</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Display this on the screen'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede utilizar el <code>newLine</code>método para mostrar una línea en blanco:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Write a single blank line...</span>\n<span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Write three blank lines...</span>\n<span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"tables\"><span class=\"link\">Mesas</span></h4>\n    <p>El <code>table</code>método facilita el formateo correcto de varias filas / columnas de datos. Todo lo que necesita hacer es proporcionar los nombres de las columnas y los datos para la tabla y Laravel calculará automáticamente el ancho y alto apropiados de la tabla para usted:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"progress-bars\"><span class=\"link\">Barras de progreso</span></h4>\n    <p>Para las tareas de ejecución prolongada, puede ser útil mostrar una barra de progreso que informe a los usuarios qué tan completa está la tarea. Usando el <code>withProgressBar</code>método, Laravel mostrará una barra de progreso y avanzará su progreso para cada iteración sobre un valor iterable dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withProgressBar</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">performTask</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>A veces, es posible que necesite más control manual sobre cómo avanza una barra de progreso. Primero, defina el número total de pasos que recorrerá el proceso. Luego, avance la barra de progreso después de procesar cada elemento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> App\\<span class=\"token package\">Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$bar</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">output</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">createProgressBar</span><span class=\"token punctuation\">(</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$bar</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">performTask</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$bar</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">advance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$bar</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Para opciones más avanzadas, consulte la <span class=\"link\">documentación del componente de la barra de progreso de Symfony</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h2 id=\"registering-commands\"><span class=\"link\">Registro de comandos</span></h2>\n    <p>Todos los comandos de su consola están registrados dentro de la <code>App\\Console\\Kernel</code>clase de su aplicación , que es el \"núcleo de la consola\" de su aplicación. Dentro del <code>commands</code>método de esta clase, verá una llamada al <code>load</code>método del kernel . El <code>load</code>método escaneará el <code>app/Console/Commands</code>directorio y registrará automáticamente cada comando que contiene con Artisan. Incluso puede realizar llamadas adicionales al <code>load</code>método para escanear otros directorios en busca de comandos Artisan:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Register the commands for the application.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">commands</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'/Commands'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'/../Domain/Orders/Commands'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Si es necesario, puede registrar comandos manualmente agregando el nombre de la clase del comando a la <code>$commands</code>propiedad de su <code>App\\Console\\Kernel</code>clase. Cuando Artisan arranca, todos los comandos enumerados en esta propiedad serán resueltos por el <span class=\"link\">contenedor de servicios</span> y registrados con Artisan:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">protected</span> <span class=\"token variable\">$commands</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    Commands\\<span class=\"token package\">SendEmails</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"programmatically-executing-commands\"><span class=\"link\">Ejecución de comandos mediante programación</span></h2>\n    <p>A veces, es posible que desee ejecutar un comando Artisan fuera de la CLI. Por ejemplo, es posible que desee ejecutar un comando Artisan desde una ruta o controlador. Puede usar el <code>call</code>método en la <code>Artisan</code>fachada para lograr esto. El <code>call</code>método acepta el nombre de la firma del comando o el nombre de la clase como primer argumento y una matriz de parámetros del comando como segundo argumento. Se devolverá el código de salida:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Artisan</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/{user}/mail'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$exitCode</span> <span class=\"token operator\">=</span> Artisan<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'mail:send'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'--queue'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'default'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Alternativamente, puede pasar todo el comando Artisan al <code>call</code>método como una cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Artisan<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'mail:send 1 --queue=default'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"passing-array-values\"><span class=\"link\">Pasar valores de matriz</span></h4>\n    <p>Si su comando define una opción que acepta una matriz, puede pasar una matriz de valores a esa opción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Artisan</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/mail'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$exitCode</span> <span class=\"token operator\">=</span> Artisan<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'mail:send'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'--id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"passing-boolean-values\"><span class=\"link\">Pasar valores booleanos</span></h4>\n    <p>Si necesita especificar el valor de una opción que no acepta valores de cadena, como la <code>--force</code>bandera en el <code>migrate:refresh</code>comando, debe pasar <code>true</code>o <code>false</code>como el valor de la opción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$exitCode</span> <span class=\"token operator\">=</span> Artisan<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'migrate:refresh'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'--force'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"queueing-artisan-commands\"><span class=\"link\">Colas de comandos artesanales</span></h4>\n    <p>Usando el <code>queue</code>método en la <code>Artisan</code>fachada, incluso puede poner en cola los comandos Artisan para que los <span class=\"link\">trabajadores de la cola los</span> procesen en segundo plano . Antes de usar este método, asegúrese de haber configurado su cola y está ejecutando un detector de cola:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Artisan</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user/{user}/mail'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Artisan<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">queue</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'mail:send'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'--queue'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'default'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Con los métodos <code>onConnection</code>y <code>onQueue</code>, puede especificar la conexión o la cola a la que se debe enviar el comando Artisan:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Artisan<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">queue</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'mail:send'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'--queue'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'default'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">onConnection</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'redis'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">onQueue</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'commands'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"calling-commands-from-other-commands\"><span class=\"link\">Llamada a comandos desde otros comandos</span></h3>\n    <p>A veces, es posible que desee llamar a otros comandos desde un comando Artisan existente. Puede hacerlo utilizando el <code>call</code>método. Este <code>call</code>método acepta el nombre del comando y una matriz de argumentos / opciones del comando:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Execute the console command.\n *\n * @return mixed\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'mail:send'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'--queue'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'default'</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Si desea llamar a otro comando de la consola y suprimir toda su salida, puede usar el <code>callSilently</code>método. El <code>callSilently</code>método tiene la misma firma que el <code>call</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">callSilently</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'mail:send'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'--queue'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'default'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"signal-handling\"><span class=\"link\">Manejo de señales</span></h2>\n    <p>El componente Consola Symfony, que alimenta la consola Artisan, te permite indicar qué señales de proceso (si las hay) maneja tu comando. Por ejemplo, puede indicar que su comando maneja las señales <code>SIGINT</code>y <code>SIGTERM</code>.</p>\n    <p>Para comenzar, debe implementar la <code>Symfony\\Component\\Console\\Command\\SignalableCommandInterface</code>interfaz en su clase de comando Artisan. Esta interfaz requiere que defina dos métodos: <code>getSubscribedSignals</code>y <code>handleSignal</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Symfony<span class=\"token punctuation\">\\</span>Component<span class=\"token punctuation\">\\</span>Console<span class=\"token punctuation\">\\</span>Command<span class=\"token punctuation\">\\</span>SignalableCommandInterface</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StartServer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Command</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SignalableCommandInterface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">/**\n     * Get the list of signals handled by the command.\n     *\n     * @return array\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getSubscribedSignals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">array</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">SIGINT</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SIGTERM</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Handle an incoming signal.\n     *\n     * @param  int  $signal\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleSignal</span><span class=\"token punctuation\">(</span>int <span class=\"token variable\">$signal</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> void\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$signal</span> <span class=\"token operator\">===</span> <span class=\"token constant\">SIGINT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">stopServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Como era de esperar, el <code>getSubscribedSignals</code>método debería devolver una matriz de las señales que su comando puede manejar, mientras que el <code>handleSignal</code>método recibe la señal y puede responder en consecuencia.</p>\n    <p></p>\n    <h2 id=\"stub-customization\"><span class=\"link\">Personalización de stub</span></h2>\n    <p>Los <code>make</code>comandos de la consola Artisan se utilizan para crear una variedad de clases, como controladores, trabajos, migraciones y pruebas. Estas clases se generan utilizando archivos \"stub\" que se rellenan con valores basados \u200B\u200Ben su entrada. Sin embargo, es posible que desee realizar pequeños cambios en los archivos generados por Artisan. Para lograr esto, puede usar el <code>stub:publish</code>comando para publicar los stubs más comunes en su aplicación para que pueda personalizarlos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan stub<span class=\"token punctuation\">:</span>publish</code></pre>\n    <p>Los stubs publicados se ubicarán dentro de un <code>stubs</code>directorio en la raíz de su aplicación. Cualquier cambio que realice en estos stubs se reflejará cuando genere sus clases correspondientes utilizando los <code>make</code>comandos de Artisan .</p>\n    <p></p>\n    <h2 id=\"events\"><span class=\"link\">Eventos</span></h2>\n    <p>Artisan despacha tres eventos cuando se ejecutan comandos: <code>Illuminate\\Console\\Events\\ArtisanStarting</code>, <code>Illuminate\\Console\\Events\\CommandStarting</code>, y <code>Illuminate\\Console\\Events\\CommandFinished</code>. El <code>ArtisanStarting</code>evento se envía inmediatamente cuando Artisan comienza a ejecutarse. A continuación, el <code>CommandStarting</code>evento se envía inmediatamente antes de que se ejecute un comando. Finalmente, el <code>CommandFinished</code>evento se distribuye una vez que finaliza la ejecución de un comando.</p>\n</div>"
    },
    {
        "title": "Cache",
        "subtitle": "LARAVEL AVANZADO",
        "contenido": "<div>\n    <h1>Cache</h1>\n    <p></p>\n    <h2><span class=\"link\">Introducción</span></h2>\n    <p>Algunas de las tareas de recuperación o procesamiento de datos que realiza su aplicación pueden requerir un uso intensivo de la CPU o tardar varios segundos en completarse. Cuando este es el caso, es común almacenar en caché los datos recuperados durante un tiempo para que se puedan recuperar rápidamente en solicitudes posteriores de los mismos datos. Los datos en caché generalmente se almacenan en un almacén de datos muy rápido como <span class=\"link\">Memcached</span> o <span class=\"link\">Redis</span> .</p>\n    <p>Afortunadamente, Laravel proporciona una API unificada y expresiva para varios backends de caché, lo que le permite aprovechar su recuperación de datos ultrarrápida y acelerar su aplicación web.</p>\n    <p></p>\n    <h2 id=\"configuration\"><span class=\"link\">Configuración</span></h2>\n    <p>El archivo de configuración de caché de su aplicación se encuentra en <code>config/cache.php</code>. En este archivo, puede especificar qué controlador de caché le gustaría que se usara de forma predeterminada en toda su aplicación. Laravel admite backends de almacenamiento en caché populares como <span class=\"link\">Memcached</span> , <span class=\"link\">Redis</span> , <span class=\"link\">DynamoDB</span> y bases de datos relacionales <span class=\"link\">listas para usar</span> . Además, hay disponible un controlador de caché basado en archivos, mientras que los <code>array</code>controladores de caché \"nulos\" proporcionan prácticos backends de caché para sus pruebas automatizadas.</p>\n    <p>El archivo de configuración de la caché también contiene varias otras opciones, que están documentadas dentro del archivo, así que asegúrese de leer estas opciones. De forma predeterminada, Laravel está configurado para usar el <code>file</code>controlador de caché, que almacena los objetos en caché serializados en el sistema de archivos del servidor. Para aplicaciones más grandes, se recomienda que utilice un controlador más robusto como Memcached o Redis. Incluso puede configurar varias configuraciones de caché para el mismo controlador.</p>\n    <p></p>\n    <h3 id=\"driver-prerequisites\"><span class=\"link\">Requisitos previos del controlador</span></h3>\n    <p></p>\n    <h4 id=\"prerequisites-database\"><span class=\"link\">Base de datos</span></h4>\n    <p>Cuando utilice el <code>database</code>controlador de caché, deberá configurar una tabla para contener los elementos de la caché. Encontrará una <code>Schema</code>declaración de ejemplo para la tabla siguiente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'cache'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">integer</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'expiration'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>También puede utilizar el <code>php artisan cache:table</code>comando Artisan para generar una migración con el esquema adecuado.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"memcached\"><span class=\"link\">Memcached</span></h4>\n    <p>El uso del controlador Memcached requiere la instalación del <span class=\"link\">paquete Memcached PECL</span> . Puede enumerar todos sus servidores Memcached en el <code>config/cache.php</code>archivo de configuración. Este archivo ya contiene una <code>memcached.servers</code>entrada para comenzar:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'memcached'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'servers'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'host'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'MEMCACHED_HOST'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'127.0.0.1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'port'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'MEMCACHED_PORT'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11211</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'weight'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    <p>Si es necesario, puede establecer la <code>host</code>opción en una ruta de socket UNIX. Si hace esto, la <code>port</code>opción debe establecerse en <code>0</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'memcached'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'host'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'/var/run/memcached/memcached.sock'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'port'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'weight'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    <p></p>\n    <h4 id=\"redis\"><span class=\"link\">Redis</span></h4>\n    <p>Antes de usar un caché de Redis con Laravel, deberá instalar la extensión PHP PhpRedis a través de PECL o instalar el <code>predis/predis</code>paquete (~ 1.0) a través de Composer. <span class=\"link\">Laravel Sail</span> ya incluye esta extensión. Además, las plataformas de implementación oficiales de Laravel como <span class=\"link\">Laravel Forge</span> y <span class=\"link\">Laravel Vapor</span> tienen la extensión PhpRedis instalada por defecto.</p>\n    <p>Para obtener más información sobre la configuración de Redis, consulte su <span class=\"link\">página de documentación de Laravel</span> .</p>\n    <p></p>\n    <h4 id=\"dynamodb\"><span class=\"link\">DynamoDB</span></h4>\n    <p>Antes de usar el <span class=\"link\">controlador de</span> caché de <span class=\"link\">DynamoDB</span> , debe crear una tabla de DynamoDB para almacenar todos los datos en caché. Normalmente, esta tabla debe tener un nombre <code>cache</code>. Sin embargo, debe nombrar la tabla según el valor del valor de <code>stores.dynamodb.table</code>configuración dentro del <code>cache</code>archivo de configuración de su aplicación .</p>\n    <p>Esta tabla también debe tener una clave de partición de cadena con un nombre que corresponda al valor del <code>stores.dynamodb.attributes.key</code>elemento de configuración dentro del <code>cache</code>archivo de configuración de su aplicación . De forma predeterminada, la clave de partición debe tener un nombre <code>key</code>.</p>\n    <p></p>\n    <h2 id=\"cache-usage\"><span class=\"link\">Uso de caché</span></h2>\n    <p></p>\n    <h3 id=\"obtaining-a-cache-instance\"><span class=\"link\">Obtener una instancia de caché</span></h3>\n    <p>Para obtener una instancia de almacenamiento en caché, puede usar la <code>Cache</code>fachada, que es lo que usaremos a lo largo de esta documentación. La <code>Cache</code>fachada proporciona un acceso conveniente y conciso a las implementaciones subyacentes de los contratos de caché de Laravel:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Cache</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Show a list of all users of the application.\n     *\n     * @return Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p></p>\n    <h4 id=\"accessing-multiple-cache-stores\"><span class=\"link\">Acceder a varios almacenes de caché</span></h4>\n    <p>Usando la <code>Cache</code>fachada, puede acceder a varios almacenes de caché a través del <code>store</code>método. La clave pasada al <code>store</code>método debe corresponder a una de las tiendas enumeradas en la <code>stores</code>matriz de configuración en su <code>cache</code>archivo de configuración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'file'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nCache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'redis'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'bar'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'baz'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10 Minutes</span></code></pre>\n    <p></p>\n    <h3 id=\"retrieving-items-from-the-cache\"><span class=\"link\">Recuperar elementos de la caché</span></h3>\n    <p>El método de <code>Cache</code>la fachada <code>get</code>se utiliza para recuperar elementos del caché. Si el elemento no existe en la caché, <code>null</code>se devolverá. Si lo desea, puede pasar un segundo argumento al <code>get</code>método que especifica el valor predeterminado que desea que se le devuelva si el elemento no existe:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'default'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Incluso puede pasar un cierre como valor predeterminado. El resultado del cierre se devolverá si el elemento especificado no existe en la caché. Pasar un cierre le permite diferir la recuperación de valores predeterminados de una base de datos u otro servicio externo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"checking-for-item-existence\"><span class=\"link\">Comprobación de la existencia del artículo</span></h4>\n    <p>El <code>has</code>método puede usarse para determinar si un elemento existe en la caché. Este método también regresará <code>false</code>si el artículo existe pero su valor es <code>null</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h4 id=\"incrementing-decrementing-values\"><span class=\"link\">Incrementar / Decrementar valores</span></h4>\n    <p>Los métodos <code>increment</code>y <code>decrement</code>se pueden usar para ajustar el valor de elementos enteros en la caché. Ambos métodos aceptan un segundo argumento opcional que indica la cantidad en la que aumentar o disminuir el valor del artículo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nCache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$amount</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nCache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nCache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$amount</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"retrieve-store\"><span class=\"link\">Recuperar y almacenar</span></h4>\n    <p>A veces, es posible que desee recuperar un elemento de la caché, pero también almacenar un valor predeterminado si el elemento solicitado no existe. Por ejemplo, es posible que desee recuperar todos los usuarios del caché o, si no existen, recuperarlos de la base de datos y agregarlos al caché. Puede hacer esto usando el <code>Cache::remember</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">remember</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$seconds</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si el elemento no existe en la caché, <code>remember</code>se ejecutará el cierre pasado al método y su resultado se colocará en la caché.</p>\n    <p>Puede utilizar el <code>rememberForever</code>método para recuperar un elemento del caché o almacenarlo para siempre si no existe:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">rememberForever</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"retrieve-delete\"><span class=\"link\">Recuperar y eliminar</span></h4>\n    <p>Si necesita recuperar un elemento de la caché y luego eliminarlo, puede usar el <code>pull</code>método. Al igual que el <code>get</code>método, <code>null</code>se devolverá si el elemento no existe en el caché:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">pull</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"storing-items-in-the-cache\"><span class=\"link\">Almacenamiento de elementos en la caché</span></h3>\n    <p>Puede usar el <code>put</code>método en la <code>Cache</code>fachada para almacenar elementos en el caché:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$seconds</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si el tiempo de almacenamiento no se pasa al <code>put</code>método, el artículo se almacenará indefinidamente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>En lugar de pasar el número de segundos como un número entero, también puede pasar una <code>DateTime</code>instancia que represente el tiempo de vencimiento deseado del elemento almacenado en caché:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">addMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"store-if-not-present\"><span class=\"link\">Almacenar si no está presente</span></h4>\n    <p>El <code>add</code>método solo agregará el elemento al caché si aún no existe en el almacén de caché. El método volverá <code>true</code>si el elemento se agrega realmente a la caché. De lo contrario, el método volverá <code>false</code>. El <code>add</code>método es una operación atómica:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$seconds</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"storing-items-forever\"><span class=\"link\">Almacenar artículos para siempre</span></h4>\n    <p>El <code>forever</code>método se puede utilizar para almacenar un elemento en la caché de forma permanente. Dado que estos elementos no caducarán, deben eliminarse manualmente de la caché mediante el <code>forget</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">forever</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p> Si está utilizando el controlador Memcached, los elementos que se almacenan \"para siempre\" pueden eliminarse cuando la caché alcanza su límite de tamaño.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"removing-items-from-the-cache\"><span class=\"link\">Eliminar elementos de la caché</span></h3>\n    <p>Puede eliminar elementos de la caché usando el <code>forget</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">forget</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede eliminar elementos proporcionando un número cero o negativo de segundos de vencimiento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nCache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede borrar todo el caché usando el <code>flush</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Vaciar la caché no respeta el \"prefijo\" de caché configurado y eliminará todas las entradas de la caché. Considere esto cuidadosamente cuando borre un caché que es compartido por otras aplicaciones.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"the-cache-helper\"><span class=\"link\">El ayudante de caché</span></h3>\n    <p>Además de usar la <code>Cache</code>fachada, también puede usar la <code>cache</code>función global para recuperar y almacenar datos a través de la caché. Cuando <code>cache</code>se llama a la función con un solo argumento de cadena, devolverá el valor de la clave dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token function\">cache</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si proporciona una matriz de pares clave / valor y un tiempo de vencimiento para la función, almacenará valores en la caché durante el tiempo especificado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">cache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'key'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$seconds</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">cache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'key'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">addMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Cuando <code>cache</code>se llama a la función sin ningún argumento, devuelve una instancia de la <code>Illuminate\\Contracts\\Cache\\Factory</code>implementación, lo que le permite llamar a otros métodos de almacenamiento en caché:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">cache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">remember</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$seconds</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Al probar la llamada a la <code>cache</code>función global , puede usar el <code>Cache::shouldReceive</code>método como si estuviera <span class=\"link\">probando la fachada</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h2 id=\"cache-tags\"><span class=\"link\">Etiquetas de caché</span></h2>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Etiquetas de caché no son compatibles cuando se utiliza el <code>file</code>, <code>dynamodb</code>o <code>database</code>los conductores de caché. Además, cuando se utilizan varias etiquetas con cachés que se almacenan \"para siempre\", el rendimiento será mejor con un controlador como <code>memcached</code>, que purga automáticamente los registros obsoletos.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"storing-tagged-cache-items\"><span class=\"link\">Almacenamiento de elementos de caché etiquetados</span></h3>\n    <p>Las etiquetas de caché le permiten etiquetar elementos relacionados en el caché y luego vaciar todos los valores en caché a los que se les ha asignado una etiqueta determinada. Puede acceder a un caché etiquetado pasando una matriz ordenada de nombres de etiquetas. Por ejemplo, accedamos a un caché etiquetado y <code>put</code>un valor en el caché:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">tags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'people'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'artists'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$john</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$seconds</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nCache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">tags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'people'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'authors'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Anne'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$anne</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$seconds</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"accessing-tagged-cache-items\"><span class=\"link\">Acceso a elementos de caché etiquetados</span></h3>\n    <p>Para recuperar un elemento de caché etiquetado, pase la misma lista ordenada de etiquetas al <code>tags</code>método y luego llame al <code>get</code>método con la clave que desea recuperar:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$john</span> <span class=\"token operator\">=</span> Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">tags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'people'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'artists'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'John'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$anne</span> <span class=\"token operator\">=</span> Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">tags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'people'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'authors'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Anne'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"removing-tagged-cache-items\"><span class=\"link\">Eliminación de elementos de caché etiquetados</span></h3>\n    <p>Puede eliminar todos los elementos que tengan asignada una etiqueta o una lista de etiquetas. Por ejemplo, esta declaración eliminaría todas las cachés etiquetados con cualquiera de los dos <code>people</code>, <code>authors</code>o ambos. Entonces, ambos <code>Anne</code>y <code>John</code>se eliminarían del caché:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">tags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'people'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'authors'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Por el contrario, esta declaración eliminaría solo los valores en caché etiquetados con <code>authors</code>, por <code>Anne</code>lo que se eliminaría, pero no <code>John</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">tags</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'authors'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"atomic-locks\"><span class=\"link\">Cerraduras atómicas</span></h2>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Para utilizar esta función, la aplicación debe ser el uso de la <code>memcached</code>, <code>redis</code>, <code>dynamodb</code>, <code>database</code>, <code>file</code>, o <code>array</code>controlador de caché como controlador predeterminado de la caché de la aplicación. Además, todos los servidores deben comunicarse con el mismo servidor de caché central.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"lock-driver-prerequisites\"><span class=\"link\">Requisitos previos del controlador</span></h3>\n    <p></p>\n    <h4 id=\"atomic-locks-prerequisites-database\"><span class=\"link\">Base de datos</span></h4>\n    <p>Cuando utilice el <code>database</code>controlador de caché, deberá configurar una tabla para contener los bloqueos de caché de su aplicación. Encontrará una <code>Schema</code>declaración de ejemplo para la tabla siguiente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'cache_locks'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">primary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'owner'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">integer</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'expiration'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"managing-locks\"><span class=\"link\">Gestión de cerraduras</span></h3>\n    <p>Las cerraduras atómicas permiten la manipulación de cerraduras distribuidas sin preocuparse por las condiciones de carrera. Por ejemplo, <span class=\"link\">Laravel Forge</span> usa bloqueos atómicos para garantizar que solo se ejecute una tarea remota en un servidor a la vez. Puede crear y administrar bloqueos usando el <code>Cache::lock</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Cache</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$lock</span> <span class=\"token operator\">=</span> Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$lock</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Lock acquired for 10 seconds...</span>\n\n    <span class=\"token variable\">$lock</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>El <code>get</code>método también acepta un cierre. Una vez que se ejecuta el cierre, Laravel liberará automáticamente el bloqueo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Lock acquired indefinitely and automatically released...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si el bloqueo no está disponible en el momento en que lo solicitas, puedes indicarle a Laravel que espere un número específico de segundos. Si el bloqueo no se puede adquirir dentro del límite de tiempo especificado, se <code>Illuminate\\Contracts\\Cache\\LockTimeoutException</code>lanzará un :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Cache<span class=\"token punctuation\">\\</span>LockTimeoutException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$lock</span> <span class=\"token operator\">=</span> Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$lock</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Lock acquired after waiting a maximum of 5 seconds...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>LockTimeoutException <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Unable to acquire lock...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$lock</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>El ejemplo anterior se puede simplificar pasando un cierre al <code>block</code>método. Cuando se pasa un cierre a este método, Laravel intentará adquirir el bloqueo durante el número especificado de segundos y lo liberará automáticamente una vez que se haya ejecutado el cierre:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Lock acquired after waiting a maximum of 5 seconds...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"managing-locks-across-processes\"><span class=\"link\">Gestión de bloqueos en procesos</span></h3>\n    <p>A veces, es posible que desee adquirir un bloqueo en un proceso y liberarlo en otro proceso. Por ejemplo, puede adquirir un bloqueo durante una solicitud web y desea liberar el bloqueo al final de un trabajo en cola que se activa con esa solicitud. En este escenario, debe pasar el \"token de propietario\" del candado al trabajo en cola para que el trabajo pueda volver a crear una instancia del bloqueo utilizando el token dado.</p>\n    <p>En el siguiente ejemplo, enviaremos un trabajo en cola si se adquiere un bloqueo con éxito. Además, pasaremos el token de propietario del bloqueo al trabajo en cola a través del <code>owner</code>método del bloqueo :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$podcast</span> <span class=\"token operator\">=</span> Podcast<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$lock</span> <span class=\"token operator\">=</span> Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'processing'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$lock</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ProcessPodcast<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$podcast</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$lock</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">owner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Dentro del <code>ProcessPodcast</code>trabajo de nuestra aplicación , podemos restaurar y liberar el bloqueo usando el token de propietario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">restoreLock</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'processing'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">owner</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea liberar un bloqueo sin respetar a su propietario actual, puede utilizar el <code>forceRelease</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'processing'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">forceRelease</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"adding-custom-cache-drivers\"><span class=\"link\">Agregar controladores de caché personalizados</span></h2>\n    <p></p>\n    <h3 id=\"writing-the-driver\"><span class=\"link\">Escribiendo el controlador</span></h3>\n    <p>Para crear nuestro controlador de caché personalizado, primero debemos implementar el <code>Illuminate\\Contracts\\Cache\\Store</code> <span class=\"link\">contrato</span> . Entonces, una implementación de caché de MongoDB podría verse así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Extensions</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Cache<span class=\"token punctuation\">\\</span>Store</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MongoStore</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Store</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">many</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$keys</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$seconds</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">putMany</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$values</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$seconds</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">forever</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">forget</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getPrefix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Solo necesitamos implementar cada uno de estos métodos usando una conexión MongoDB. Para un ejemplo de cómo poner en práctica cada uno de estos métodos, echar un vistazo a la <code>Illuminate\\Cache\\MemcachedStore</code>en el <span class=\"link\">código fuente marco laravel</span> . Una vez que se completa nuestra implementación, podemos finalizar nuestro registro de controlador personalizado llamando al método de la <code>Cache</code>fachada <code>extend</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'mongo'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$app</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">repository</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MongoStore</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si se pregunta dónde colocar su código de controlador de caché personalizado, puede crear un <code>Extensions</code>espacio de nombres dentro de su <code>app</code>directorio. Sin embargo, tenga en cuenta que Laravel no tiene una estructura de aplicación rígida y usted es libre de organizar su aplicación según sus preferencias.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"registering-the-driver\"><span class=\"link\">Registro del conductor</span></h3>\n    <p>Para registrar el controlador de caché personalizado con Laravel, usaremos el <code>extend</code>método en la <code>Cache</code>fachada. Dado que otros proveedores de servicios pueden intentar leer los valores almacenados en caché dentro de su <code>boot</code>método, registraremos nuestro controlador personalizado dentro de una <code>booting</code>devolución de llamada. Al usar la <code>booting</code>devolución de llamada, podemos asegurarnos de que el controlador personalizado se registre justo antes de <code>boot</code>que se llame al método en los proveedores de servicios de nuestra aplicación, pero después de <code>register</code>que se llame al método en todos los proveedores de servicios. Registraremos nuestra <code>booting</code>devolución de llamada dentro del <code>register</code>método de la <code>App\\Providers\\AppServiceProvider</code>clase de nuestra aplicación :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Extensions<span class=\"token punctuation\">\\</span>MongoStore</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Cache</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>ServiceProvider</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CacheServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Register any application services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">app</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">booting</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'mongo'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$app</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                 <span class=\"token keyword\">return</span> Cache<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">repository</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MongoStore</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>El primer argumento que se pasa al <code>extend</code>método es el nombre del controlador. Esto corresponderá a su <code>driver</code>opción en el <code>config/cache.php</code>archivo de configuración. El segundo argumento es un cierre que debería devolver una <code>Illuminate\\Cache\\Repository</code>instancia. Al cierre se le pasará una <code>$app</code>instancia, que es una instancia del <span class=\"link\">contenedor de servicios</span> .</p>\n    <p>Una vez que su extensión esté registrada, actualice <code>config/cache.php</code>la <code>driver</code>opción de su archivo de configuración al nombre de su extensión.</p>\n    <p></p>\n    <h2 id=\"events\"><span class=\"link\">Eventos</span></h2>\n    <p>Para ejecutar código en cada operación de caché, puede escuchar los <span class=\"link\">eventos</span> disparados por el caché. Por lo general, debes colocar estos detectores de eventos dentro de la <code>App\\Providers\\EventServiceProvider</code>clase de tu aplicación :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The event listener mappings for the application.\n *\n * @var array\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$listen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'Illuminate\\Cache\\Events\\CacheHit'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'App\\Listeners\\LogCacheHit'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token single-quoted-string string\">'Illuminate\\Cache\\Events\\CacheMissed'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'App\\Listeners\\LogCacheMissed'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token single-quoted-string string\">'Illuminate\\Cache\\Events\\KeyForgotten'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'App\\Listeners\\LogKeyForgotten'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token single-quoted-string string\">'Illuminate\\Cache\\Events\\KeyWritten'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'App\\Listeners\\LogKeyWritten'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n</div>"
    },
    {
        "title": "Colecciones",
        "subtitle": "LARAVEL AVANZADO",
        "contenido": "<div>\n    <h1>Colecciones</h1>\n    <p></p>\n    <h2><span class=\"link\">Introducción</span></h2>\n    <p>La <code>Illuminate\\Support\\Collection</code>clase proporciona una envoltura fluida y conveniente para trabajar con matrices de datos. Por ejemplo, consulte el siguiente código. Usaremos el <code>collect</code>ayudante para crear una nueva instancia de colección a partir de la matriz, ejecutaremos la <code>strtoupper</code>función en cada elemento y luego eliminaremos todos los elementos vacíos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'taylor'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'abigail'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">strtoupper</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Como puede ver, la <code>Collection</code>clase le permite encadenar sus métodos para realizar un mapeo fluido y reducir la matriz subyacente. En general, las colecciones son inmutables, lo que significa que cada <code>Collection</code>método devuelve una <code>Collection</code>instancia completamente nueva .</p>\n    <p></p>\n    <h3 id=\"creating-collections\"><span class=\"link\">Creando colecciones</span></h3>\n    <p>Como se mencionó anteriormente, el <code>collect</code>asistente devuelve una nueva <code>Illuminate\\Support\\Collection</code>instancia para la matriz dada. Entonces, crear una colección es tan simple como:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Los resultados de las consultas de <span class=\"link\">Eloquent</span> siempre se devuelven como <code>Collection</code>instancias.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"extending-collections\"><span class=\"link\">Ampliación de colecciones</span></h3>\n    <p>Las colecciones son \"macroable\", lo que le permite agregar métodos adicionales a la <code>Collection</code>clase en tiempo de ejecución. El método de la <code>Illuminate\\Support\\Collection</code>clase <code>macro</code>acepta un cierre que se ejecutará cuando se llame a su macro. El cierre de macro puede acceder a los otros métodos de la colección a través de <code>$this</code>, como si fuera un método real de la clase de colección. Por ejemplo, el siguiente código agrega un <code>toUpper</code>método a la <code>Collection</code>clase:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Collection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\nCollection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">macro</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'toUpper'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">upper</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'first'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'second'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$upper</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">toUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['FIRST', 'SECOND']</span></code></pre>\n    <p>Normalmente, debe declarar macros de colección en el <code>boot</code>método de un <span class=\"link\">proveedor de servicios</span> .</p>\n    <p></p>\n    <h4 id=\"macro-arguments\"><span class=\"link\">Argumentos macro</span></h4>\n    <p>Si es necesario, puede definir macros que acepten argumentos adicionales:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Collection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Lang</span><span class=\"token punctuation\">;</span>\n\nCollection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">macro</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'toLocale'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$locale</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">use</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$locale</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Lang<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$locale</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'first'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'second'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$translated</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">toLocale</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'es'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"available-methods\"><span class=\"link\">Métodos disponibles</span></h2>\n    <p>Para la mayor parte de la documentación de la colección restante, discutiremos cada método disponible en la <code>Collection</code>clase. Recuerde, todos estos métodos se pueden encadenar para manipular con fluidez la matriz subyacente. Además, casi todos los métodos devuelven una nueva <code>Collection</code>instancia, lo que le permite conservar la copia original de la colección cuando sea necesario:</p>\n    <style>\n    #collection-method-list > p {\n        column-count: 3; -moz-column-count: 3; -webkit-column-count: 3;\n        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n    }\n\n    #collection-method-list a {\n        display: block;\n    }\n</style>\n    <div id=\"collection-method-list\">\n        <p><span class=\"link\">todos</span>\n            <span class=\"link\">promedio</span>\n            <span class=\"link\">promedio</span>\n            <span class=\"link\">pedazo</span>\n            <span class=\"link\">chunkMientras</span>\n            <span class=\"link\">colapso</span>\n            <span class=\"link\">recoger</span>\n            <span class=\"link\">combinar</span>\n            <span class=\"link\">concat</span>\n            <span class=\"link\">contiene</span>\n            <span class=\"link\">contieneEstricto</span>\n            <span class=\"link\">contar</span>\n            <span class=\"link\">countBy</span>\n            <span class=\"link\">crossUnirse</span>\n            <span class=\"link\">dd</span>\n            <span class=\"link\">diff</span>\n            <span class=\"link\">diffAssoc</span>\n            <span class=\"link\">diffKeys</span>\n            <span class=\"link\">vertedero</span>\n            <span class=\"link\">duplicados</span>\n            <span class=\"link\">duplicadosEstricto</span>\n            <span class=\"link\">cada</span>\n            <span class=\"link\">cada uno</span>\n            <span class=\"link\">cada</span>\n            <span class=\"link\">excepto</span>\n            <span class=\"link\">filtrar</span>\n            <span class=\"link\">primero</span>\n            <span class=\"link\">primero donde</span>\n            <span class=\"link\">mapa plano</span>\n            <span class=\"link\">aplanar</span>\n            <span class=\"link\">voltear</span>\n            <span class=\"link\">olvidar</span>\n            <span class=\"link\">forPage</span>\n            <span class=\"link\">obtener</span>\n            <span class=\"link\">agrupar por</span>\n            <span class=\"link\">tiene</span>\n            <span class=\"link\">implosionar</span>\n            <span class=\"link\">intersecarse</span>\n            <span class=\"link\">intersectByKeys</span>\n            <span class=\"link\">esta vacio</span>\n            <span class=\"link\">no está vacío</span>\n            <span class=\"link\">entrar</span>\n            <span class=\"link\">keyBy</span>\n            <span class=\"link\">teclas</span>\n            <span class=\"link\">último</span>\n            <span class=\"link\">macro</span>\n            <span class=\"link\">hacer</span>\n            <span class=\"link\">mapa</span>\n            <span class=\"link\">mapInto</span>\n            <span class=\"link\">mapSpread</span>\n            <span class=\"link\">mapToGroups</span>\n            <span class=\"link\">mapWithKeys</span>\n            <span class=\"link\">max</span>\n            <span class=\"link\">mediana</span>\n            <span class=\"link\">unir</span>\n            <span class=\"link\">mergeRecursive</span>\n            <span class=\"link\">min</span>\n            <span class=\"link\">modo</span>\n            <span class=\"link\">enésimo</span>\n            <span class=\"link\">solamente</span>\n            <span class=\"link\">almohadilla</span>\n            <span class=\"link\">dividir</span>\n            <span class=\"link\">tubo</span>\n            <span class=\"link\">pipeInto</span>\n            <span class=\"link\">arrancar</span>\n            <span class=\"link\">música pop</span>\n            <span class=\"link\">anteponer</span>\n            <span class=\"link\">jalar</span>\n            <span class=\"link\">empujar</span>\n            <span class=\"link\">poner</span>\n            <span class=\"link\">aleatorio</span>\n            <span class=\"link\">reducir</span>\n            <span class=\"link\">rechazar</span>\n            <span class=\"link\">reemplazar</span>\n            <span class=\"link\">Reemplazar recursivo</span>\n            <span class=\"link\">marcha atrás</span>\n            <span class=\"link\">buscar</span>\n            <span class=\"link\">cambio</span>\n            <span class=\"link\">barajar</span>\n            <span class=\"link\">corredizo</span>\n            <span class=\"link\">saltar</span>\n            <span class=\"link\">saltarHasta que</span>\n            <span class=\"link\">skipWhile</span>\n            <span class=\"link\">rodaja</span>\n            <span class=\"link\">único</span>\n            <span class=\"link\">algunos</span>\n            <span class=\"link\">clasificar</span>\n            <span class=\"link\">Ordenar por</span>\n            <span class=\"link\">sortByDesc</span>\n            <span class=\"link\">sortDesc</span>\n            <span class=\"link\">sortKeys</span>\n            <span class=\"link\">sortKeysDesc</span>\n            <span class=\"link\">empalme</span>\n            <span class=\"link\">separar</span>\n            <span class=\"link\">splitIn</span>\n            <span class=\"link\">suma</span>\n            <span class=\"link\">llevar</span>\n            <span class=\"link\">tomar hasta</span>\n            <span class=\"link\">tomar mientras</span>\n            <span class=\"link\">grifo</span>\n            <span class=\"link\">veces</span>\n            <span class=\"link\">toArray</span>\n            <span class=\"link\">toJson</span>\n            <span class=\"link\">transformar</span>\n            <span class=\"link\">Unión</span>\n            <span class=\"link\">único</span>\n            <span class=\"link\">uniqueStrict</span>\n            <span class=\"link\">a no ser que</span>\n            <span class=\"link\">a menos que esté vacío</span>\n            <span class=\"link\">a menos que no esté vacío</span>\n            <span class=\"link\">desenvolver</span>\n            <span class=\"link\">valores</span>\n            <span class=\"link\">cuando</span>\n            <span class=\"link\">whenEmpty</span>\n            <span class=\"link\">whenNotEmpty</span>\n            <span class=\"link\">dónde</span>\n            <span class=\"link\">whereStrict</span>\n            <span class=\"link\">whereBetween</span>\n            <span class=\"link\">donde</span>\n            <span class=\"link\">whereInStrict</span>\n            <span class=\"link\">whereInstanceOf</span>\n            <span class=\"link\">whereNotBetween</span>\n            <span class=\"link\">whereNotIn</span>\n            <span class=\"link\">whereNotInStrict</span>\n            <span class=\"link\">whereNotNull</span>\n            <span class=\"link\">whereNull</span>\n            <span class=\"link\">envoltura</span>\n            <span class=\"link\">Código Postal</span></p>\n    </div>\n    <p></p>\n    <h2 id=\"method-listing\"><span class=\"link\">Listado de métodos</span></h2>\n    <style>\n    #collection-method code {\n        font-size: 14px;\n    }\n\n    #collection-method:not(.first-collection-method) {\n        margin-top: 50px;\n    }\n</style>\n    <p></p>\n    <h4 id=\"method-all\" class=\"first-collection-method\"><span class=\"link\"><code>all()</code></span></h4>\n    <p>El <code>all</code>método devuelve la matriz subyacente representada por la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2, 3]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-average\"><span class=\"link\"><code>average()</code></span></h4>\n    <p>Alias \u200B\u200Bdel <span class=\"link\"><code>avg</code></span>método.</p>\n    <p></p>\n    <h4 id=\"method-avg\"><span class=\"link\"><code>avg()</code></span></h4>\n    <p>El <code>avg</code>método devuelve el <span class=\"link\">valor promedio</span> de una clave determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$average</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">avg</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 20</span>\n\n<span class=\"token variable\">$average</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">avg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2</span></code></pre>\n    <p></p>\n    <h4 id=\"method-chunk\"><span class=\"link\"><code>chunk()</code></span></h4>\n    <p>El <code>chunk</code>método divide la colección en varias colecciones más pequeñas de un tamaño determinado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunks</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">chunk</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunks</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [[1, 2, 3, 4], [5, 6, 7]]</span></code></pre>\n    <p>Este método es especialmente útil en <span class=\"link\">vistas</span> cuando se trabaja con un sistema de cuadrícula como <span class=\"link\">Bootstrap</span> . Por ejemplo, imagine que tiene una colección de modelos <span class=\"link\">Eloquent</span> que desea mostrar en una cuadrícula:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">@<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$products</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">chunk</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$chunk</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"row\"</span><span class=\"token operator\">&gt;</span>\n        @<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$chunk</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$product</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"col-xs-4\"</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$product</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n        @<span class=\"token keyword\">endforeach</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">&gt;</span>\n@<span class=\"token keyword\">endforeach</span></code></pre>\n    <p></p>\n    <h4 id=\"method-chunkwhile\"><span class=\"link\"><code>chunkWhile()</code></span></h4>\n    <p>El <code>chunkWhile</code>método divide la colección en varias colecciones más pequeñas según la evaluación de la devolución de llamada dada. La <code>$chunk</code>variable pasada al cierre se puede utilizar para inspeccionar el elemento anterior:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">str_split</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'AABBCCCD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunks</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">chunkWhile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$chunk</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$chunk</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunks</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [['A', 'A'], ['B', 'B'], ['C', 'C', 'C'], ['D']]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-collapse\"><span class=\"link\"><code>collapse()</code></span></h4>\n    <p>El <code>collapse</code>método colapsa una colección de matrices en una única colección plana:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collapsed</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">collapse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collapsed</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-collect\"><span class=\"link\"><code>collect()</code></span></h4>\n    <p>El <code>collect</code>método devuelve una nueva <code>Collection</code>instancia con los elementos que se encuentran actualmente en la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collectionA</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collectionB</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collectionA</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collectionB</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2, 3]</span></code></pre>\n    <p>El <code>collect</code>método es principalmente útil para convertir <span class=\"link\">colecciones diferidas</span> en <code>Collection</code>instancias estándar :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$lazyCollection</span> <span class=\"token operator\">=</span> LazyCollection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$lazyCollection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">get_class</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$collection</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'Illuminate\\Support\\Collection'</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2, 3]</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>El <code>collect</code>método es especialmente útil cuando tiene una instancia de <code>Enumerable</code>y necesita una instancia de recopilación no diferida. Dado que <code>collect()</code>es parte del <code>Enumerable</code>contrato, puede usarlo de manera segura para obtener una <code>Collection</code>instancia.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"method-combine\"><span class=\"link\"><code>combine()</code></span></h4>\n    <p>El <code>combine</code>método combina los valores de la colección, como claves, con los valores de otra matriz o colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$combined</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">combine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'George'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$combined</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['name' =&gt; 'George', 'age' =&gt; 29]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-concat\"><span class=\"link\"><code>concat()</code></span></h4>\n    <p>El <code>concat</code>método agrega los <code>array</code>valores dados o de la colección al final de otra colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'John Doe'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$concatenated</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Jane Doe'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Johnny Doe'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$concatenated</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['John Doe', 'Jane Doe', 'Johnny Doe']</span></code></pre>\n    <p></p>\n    <h4 id=\"method-contains\"><span class=\"link\"><code>contains()</code></span></h4>\n    <p>El <code>contains</code>método determina si la colección contiene un elemento determinado. Puede pasar un cierre al <code>contains</code>método para determinar si existe un elemento en la colección que coincida con una prueba de verdad determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p>Alternativamente, puede pasar una cadena al <code>contains</code>método para determinar si la colección contiene un valor de elemento determinado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'New York'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p>También puede pasar un par clave / valor al <code>contains</code>método, que determinará si el par dado existe en la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'product'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Bookcase'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p>El <code>contains</code>método utiliza comparaciones \"sueltas\" al comprobar los valores de los elementos, lo que significa que una cadena con un valor entero se considerará igual a un número entero del mismo valor. Utilice el <span class=\"link\"><code>containsStrict</code></span>método para filtrar mediante comparaciones \"estrictas\".</p>\n    <p></p>\n    <h4 id=\"method-containsstrict\"><span class=\"link\"><code>containsStrict()</code></span></h4>\n    <p>Este método tiene la misma firma que el <span class=\"link\"><code>contains</code></span>método; sin embargo, todos los valores se comparan mediante comparaciones \"estrictas\".</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>El comportamiento de este método se modifica al utilizar <span class=\"link\">Eloquent Collections</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"method-count\"><span class=\"link\"><code>count()</code></span></h4>\n    <p>El <code>count</code>método devuelve el número total de elementos de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 4</span></code></pre>\n    <p></p>\n    <h4 id=\"method-countBy\"><span class=\"link\"><code>countBy()</code></span></h4>\n    <p>El <code>countBy</code>método cuenta las apariciones de valores en la colección. De forma predeterminada, el método cuenta las apariciones de cada elemento, lo que le permite contar ciertos \"tipos\" de elementos en la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$counted</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">countBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$counted</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1 =&gt; 1, 2 =&gt; 3, 3 =&gt; 1]</span></code></pre>\n    <p>Pasas un cierre al <code>countBy</code>método para contar todos los elementos por un valor personalizado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'alice@gmail.com'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'bob@yahoo.com'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'carlos@gmail.com'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$counted</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">countBy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$email</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token function\">strrchr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$email</span><span class=\"token punctuation\">,</span> <span class=\"token double-quoted-string string\">\"@\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$counted</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['gmail.com' =&gt; 2, 'yahoo.com' =&gt; 1]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-crossjoin\"><span class=\"link\"><code>crossJoin()</code></span></h4>\n    <p>El <code>crossJoin</code>método cruza los valores de la colección entre las matrices o colecciones dadas, devolviendo un producto cartesiano con todas las permutaciones posibles:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$matrix</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">crossJoin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$matrix</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        [1, 'a'],\n        [1, 'b'],\n        [2, 'a'],\n        [2, 'b'],\n    ]\n*/</span>\n\n<span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$matrix</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">crossJoin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'II'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$matrix</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        [1, 'a', 'I'],\n        [1, 'a', 'II'],\n        [1, 'b', 'I'],\n        [1, 'b', 'II'],\n        [2, 'a', 'I'],\n        [2, 'a', 'II'],\n        [2, 'b', 'I'],\n        [2, 'b', 'II'],\n    ]\n*/</span></code></pre>\n    <p></p>\n    <h4 id=\"method-dd\"><span class=\"link\"><code>dd()</code></span></h4>\n    <p>El <code>dd</code>método vuelca los elementos de la colección y finaliza la ejecución del script:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'John Doe'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Jane Doe'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    Collection {\n        #items: array:2 [\n            0 =&gt; \"John Doe\"\n            1 =&gt; \"Jane Doe\"\n        ]\n    }\n*/</span></code></pre>\n    <p>Si no desea dejar de ejecutar el script, utilice el <span class=\"link\"><code>dump</code></span>método en su lugar.</p>\n    <p></p>\n    <h4 id=\"method-diff\"><span class=\"link\"><code>diff()</code></span></h4>\n    <p>El <code>diff</code>método compara la colección con otra colección o un PHP simple en <code>array</code>función de sus valores. Este método devolverá los valores de la colección original que no están presentes en la colección dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$diff</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$diff</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 3, 5]</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>El comportamiento de este método se modifica al utilizar <span class=\"link\">Eloquent Collections</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"method-diffassoc\"><span class=\"link\"><code>diffAssoc()</code></span></h4>\n    <p>El <code>diffAssoc</code>método compara la colección con otra colección o un PHP simple en <code>array</code>función de sus claves y valores. Este método devolverá los pares clave / valor en la colección original que no están presentes en la colección dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'color'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'orange'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'fruit'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'remain'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$diff</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">diffAssoc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'color'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'yellow'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'fruit'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'remain'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'used'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$diff</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['color' =&gt; 'orange', 'remain' =&gt; 6]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-diffkeys\"><span class=\"link\"><code>diffKeys()</code></span></h4>\n    <p>El <code>diffKeys</code>método compara la colección con otra colección o un PHP simple <code>array</code>basado en sus claves. Este método devolverá los pares clave / valor en la colección original que no están presentes en la colección dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'one'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'two'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'three'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'four'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'five'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$diff</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">diffKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'two'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'four'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'six'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'eight'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$diff</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['one' =&gt; 10, 'three' =&gt; 30, 'five' =&gt; 50]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-dump\"><span class=\"link\"><code>dump()</code></span></h4>\n    <p>El <code>dump</code>método vuelca los elementos de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'John Doe'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Jane Doe'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    Collection {\n        #items: array:2 [\n            0 =&gt; \"John Doe\"\n            1 =&gt; \"Jane Doe\"\n        ]\n    }\n*/</span></code></pre>\n    <p>Si desea dejar de ejecutar el script después de volcar la colección, use el <span class=\"link\"><code>dd</code></span>método en su lugar.</p>\n    <p></p>\n    <h4 id=\"method-duplicates\"><span class=\"link\"><code>duplicates()</code></span></h4>\n    <p>El <code>duplicates</code>método recupera y devuelve valores duplicados de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">duplicates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [2 =&gt; 'a', 4 =&gt; 'b']</span></code></pre>\n    <p>Si la colección contiene matrices u objetos, puede pasar la clave de los atributos que desea verificar en busca de valores duplicados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$employees</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'abigail@example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'position'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Developer'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'james@example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'position'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Designer'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'victoria@example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'position'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Developer'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$employees</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">duplicates</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'position'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [2 =&gt; 'Developer']</span></code></pre>\n    <p></p>\n    <h4 id=\"method-duplicatesstrict\"><span class=\"link\"><code>duplicatesStrict()</code></span></h4>\n    <p>Este método tiene la misma firma que el <span class=\"link\"><code>duplicates</code></span>método; sin embargo, todos los valores se comparan mediante comparaciones \"estrictas\".</p>\n    <p></p>\n    <h4 id=\"method-each\"><span class=\"link\"><code>each()</code></span></h4>\n    <p>El <code>each</code>método itera sobre los elementos de la colección y pasa cada elemento a un cierre:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea dejar de iterar a través de los elementos, puede regresar <code>false</code>de su cierre:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* condition */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-eachspread\"><span class=\"link\"><code>eachSpread()</code></span></h4>\n    <p>El <code>eachSpread</code>método itera sobre los elementos de la colección, pasando cada valor de elemento anidado a la devolución de llamada dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'John Doe'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Jane Doe'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">eachSpread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede dejar de iterar a través de los elementos regresando <code>false</code>de la devolución de llamada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">eachSpread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-every\"><span class=\"link\"><code>every()</code></span></h4>\n    <p>El <code>every</code>método puede usarse para verificar que todos los elementos de una colección pasen una prueba de verdad determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p>Si la colección está vacía, el <code>every</code>método devolverá verdadero:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span></code></pre>\n    <p></p>\n    <h4 id=\"method-except\"><span class=\"link\"><code>except()</code></span></h4>\n    <p>El <code>except</code>método devuelve todos los elementos de la colección excepto aquellos con las claves especificadas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'discount'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">except</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'price'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'discount'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['product_id' =&gt; 1]</span></code></pre>\n    <p>Para el inverso de <code>except</code>, vea el <span class=\"link\">único</span> método.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>El comportamiento de este método se modifica al utilizar <span class=\"link\">Eloquent Collections</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"method-filter\"><span class=\"link\"><code>filter()</code></span></h4>\n    <p>El <code>filter</code>método filtra la colección usando la devolución de llamada dada, manteniendo solo aquellos elementos que pasan una prueba de verdad determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [3, 4]</span></code></pre>\n    <p>Si no se proporciona ninguna devolución de llamada, <code>false</code>se eliminarán todas las entradas de la colección que sean equivalentes a :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2, 3]</span></code></pre>\n    <p>Para el inverso de <code>filter</code>, consulte el método de <span class=\"link\">rechazo</span> .</p>\n    <p></p>\n    <h4 id=\"method-first\"><span class=\"link\"><code>first()</code></span></h4>\n    <p>El <code>first</code>método devuelve el primer elemento de la colección que pasa una prueba de verdad determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 3</span></code></pre>\n    <p>También puede llamar al <code>first</code>método sin argumentos para obtener el primer elemento de la colección. Si la colección está vacía, <code>null</code>se devuelve:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1</span></code></pre>\n    <p></p>\n    <h4 id=\"method-first-where\"><span class=\"link\"><code>firstWhere()</code></span></h4>\n    <p>El <code>firstWhere</code>método devuelve el primer elemento de la colección con el par clave / valor dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Regena'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'age'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Linda'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'age'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Diego'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'age'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Linda'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'age'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">84</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">firstWhere</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Linda'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['name' =&gt; 'Linda', 'age' =&gt; 14]</span></code></pre>\n    <p>También puede llamar al <code>firstWhere</code>método con un operador de comparación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">firstWhere</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;='</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['name' =&gt; 'Diego', 'age' =&gt; 23]</span></code></pre>\n    <p>Al igual que el método <span class=\"link\">where</span> , puede pasar un argumento al <code>firstWhere</code>método. En este escenario, el <code>firstWhere</code>método devolverá el primer elemento donde el valor de la clave del elemento dado es \"veraz\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">firstWhere</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['name' =&gt; 'Linda', 'age' =&gt; 14]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-flatmap\"><span class=\"link\"><code>flatMap()</code></span></h4>\n    <p>El <code>flatMap</code>método itera a través de la colección y pasa cada valor al cierre dado. El cierre es libre de modificar el artículo y devolverlo, formando así una nueva colección de artículos modificados. Luego, la matriz se aplana en un nivel:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Sally'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'school'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Arkansas'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'age'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">28</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flattened</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">array_map</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'strtoupper'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$values</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flattened</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['name' =&gt; 'SALLY', 'school' =&gt; 'ARKANSAS', 'age' =&gt; '28'];</span></code></pre>\n    <p></p>\n    <h4 id=\"method-flatten\"><span class=\"link\"><code>flatten()</code></span></h4>\n    <p>El <code>flatten</code>método aplana una colección multidimensional en una sola dimensión:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'taylor'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'languages'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'php'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'javascript'</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flattened</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flattened</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['taylor', 'php', 'javascript'];</span></code></pre>\n    <p>Si es necesario, puede pasar al <code>flatten</code>método un argumento de \"profundidad\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'Apple'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'iPhone 6S'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'brand'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Apple'</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'Samsung'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Galaxy S7'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'brand'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Samsung'</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$products</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$products</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        ['name' =&gt; 'iPhone 6S', 'brand' =&gt; 'Apple'],\n        ['name' =&gt; 'Galaxy S7', 'brand' =&gt; 'Samsung'],\n    ]\n*/</span></code></pre>\n    <p>En este ejemplo, llamar <code>flatten</code>sin proporcionar la profundidad también habría aplanado las matrices anidadas, dando como resultado <code>['iPhone 6S', 'Apple', 'Galaxy S7', 'Samsung']</code>. Proporcionar una profundidad le permite especificar el número de niveles que se aplanarán las matrices anidadas.</p>\n    <p></p>\n    <h4 id=\"method-flip\"><span class=\"link\"><code>flip()</code></span></h4>\n    <p>El <code>flip</code>método intercambia las claves de la colección con sus valores correspondientes:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'taylor'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'framework'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'laravel'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flipped</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flipped</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['taylor' =&gt; 'name', 'laravel' =&gt; 'framework']</span></code></pre>\n    <p></p>\n    <h4 id=\"method-forget\"><span class=\"link\"><code>forget()</code></span></h4>\n    <p>El <code>forget</code>método elimina un elemento de la colección por su clave:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'taylor'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'framework'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'laravel'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">forget</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['framework' =&gt; 'laravel']</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>A diferencia de la mayoría de los otros métodos de recopilación, <code>forget</code>no devuelve una nueva colección modificada; modifica la colección a la que se llama.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"method-forpage\"><span class=\"link\"><code>forPage()</code></span></h4>\n    <p>El <code>forPage</code>método devuelve una nueva colección que contiene los elementos que estarían presentes en un número de página determinado. El método acepta el número de página como primer argumento y el número de elementos a mostrar por página como segundo argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunk</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">forPage</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunk</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [4, 5, 6]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-get\"><span class=\"link\"><code>get()</code></span></h4>\n    <p>El <code>get</code>método devuelve el elemento en una clave determinada. Si la clave no existe, <code>null</code>se devuelve:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'taylor'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'framework'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'laravel'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// taylor</span></code></pre>\n    <p>Opcionalmente, puede pasar un valor predeterminado como segundo argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'taylor'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'framework'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'laravel'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 34</span></code></pre>\n    <p>Incluso puede pasar una devolución de llamada como valor predeterminado del método. El resultado de la devolución de llamada se devolverá si la clave especificada no existe:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'taylor@example.com'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// taylor@example.com</span></code></pre>\n    <p></p>\n    <h4 id=\"method-groupby\"><span class=\"link\"><code>groupBy()</code></span></h4>\n    <p>El <code>groupBy</code>método agrupa los elementos de la colección por una clave determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'account_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'account-x10'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'account_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'account-x10'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Bookcase'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'account_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'account-x11'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$grouped</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'account_id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$grouped</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        'account-x10' =&gt; [\n            ['account_id' =&gt; 'account-x10', 'product' =&gt; 'Chair'],\n            ['account_id' =&gt; 'account-x10', 'product' =&gt; 'Bookcase'],\n        ],\n        'account-x11' =&gt; [\n            ['account_id' =&gt; 'account-x11', 'product' =&gt; 'Desk'],\n        ],\n    ]\n*/</span></code></pre>\n    <p>En lugar de pasar una cadena <code>key</code>, puede pasar una devolución de llamada. La devolución de llamada debe devolver el valor que desea introducir en el grupo mediante:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$grouped</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'account_id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$grouped</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        'x10' =&gt; [\n            ['account_id' =&gt; 'account-x10', 'product' =&gt; 'Chair'],\n            ['account_id' =&gt; 'account-x10', 'product' =&gt; 'Bookcase'],\n        ],\n        'x11' =&gt; [\n            ['account_id' =&gt; 'account-x11', 'product' =&gt; 'Desk'],\n        ],\n    ]\n*/</span></code></pre>\n    <p>Se pueden pasar varios criterios de agrupación como una matriz. Cada elemento de la matriz se aplicará al nivel correspondiente dentro de una matriz multidimensional:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Collection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token number\">10</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'skill'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'roles'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Role_1'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Role_3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">20</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'skill'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'roles'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Role_1'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Role_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">30</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'skill'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'roles'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Role_1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">40</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'skill'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'roles'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Role_2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$data</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'skill'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$item</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'roles'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$preserveKeys</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n[\n    1 =&gt; [\n        'Role_1' =&gt; [\n            10 =&gt; ['user' =&gt; 1, 'skill' =&gt; 1, 'roles' =&gt; ['Role_1', 'Role_3']],\n            20 =&gt; ['user' =&gt; 2, 'skill' =&gt; 1, 'roles' =&gt; ['Role_1', 'Role_2']],\n        ],\n        'Role_2' =&gt; [\n            20 =&gt; ['user' =&gt; 2, 'skill' =&gt; 1, 'roles' =&gt; ['Role_1', 'Role_2']],\n        ],\n        'Role_3' =&gt; [\n            10 =&gt; ['user' =&gt; 1, 'skill' =&gt; 1, 'roles' =&gt; ['Role_1', 'Role_3']],\n        ],\n    ],\n    2 =&gt; [\n        'Role_1' =&gt; [\n            30 =&gt; ['user' =&gt; 3, 'skill' =&gt; 2, 'roles' =&gt; ['Role_1']],\n        ],\n        'Role_2' =&gt; [\n            40 =&gt; ['user' =&gt; 4, 'skill' =&gt; 2, 'roles' =&gt; ['Role_2']],\n        ],\n    ],\n];\n*/</span></code></pre>\n    <p></p>\n    <h4 id=\"method-has\"><span class=\"link\"><code>has()</code></span></h4>\n    <p>El <code>has</code>método determina si existe una clave determinada en la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'account_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'amount'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'product'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'amount'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'amount'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p></p>\n    <h4 id=\"method-implode\"><span class=\"link\"><code>implode()</code></span></h4>\n    <p>El <code>implode</code>método une elementos en una colección. Sus argumentos dependen del tipo de elementos de la colección. Si la colección contiene matrices u objetos, debe pasar la clave de los atributos que desea unir y la cadena de \"pegamento\" que desea colocar entre los valores:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'account_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'account_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">implode</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'product'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Desk, Chair</span></code></pre>\n    <p>Si la colección contiene cadenas simples o valores numéricos, debes pasar el \"pegamento\" como único argumento al método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">implode</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// '1-2-3-4-5'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-intersect\"><span class=\"link\"><code>intersect()</code></span></h4>\n    <p>El <code>intersect</code>método elimina los valores de la colección original que no están presentes en la <code>array</code>colección dada . La colección resultante conservará las claves de la colección original:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Sofa'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$intersect</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">intersect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Bookcase'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$intersect</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [0 =&gt; 'Desk', 2 =&gt; 'Chair']</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>El comportamiento de este método se modifica al utilizar <span class=\"link\">Eloquent Collections</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"method-intersectbykeys\"><span class=\"link\"><code>intersectByKeys()</code></span></h4>\n    <p>El <code>intersectByKeys</code>método elimina las claves y sus valores correspondientes de la colección original que no están presentes en la <code>array</code>colección dada :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'serial'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'UX301'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'screen'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'year'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2009</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$intersect</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">intersectByKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'reference'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'UX404'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'tab'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'year'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2011</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$intersect</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['type' =&gt; 'screen', 'year' =&gt; 2009]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-isempty\"><span class=\"link\"><code>isEmpty()</code></span></h4>\n    <p>El <code>isEmpty</code>método regresa <code>true</code>si la colección está vacía; de lo contrario, <code>false</code>se devuelve:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span></code></pre>\n    <p></p>\n    <h4 id=\"method-isnotempty\"><span class=\"link\"><code>isNotEmpty()</code></span></h4>\n    <p>El <code>isNotEmpty</code>método regresa <code>true</code>si la colección no está vacía; de lo contrario, <code>false</code>se devuelve:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p></p>\n    <h4 id=\"method-join\"><span class=\"link\"><code>join()</code></span></h4>\n    <p>El <code>join</code>método une los valores de la colección con una cadena. Usando el segundo argumento de este método, también puede especificar cómo se debe agregar el elemento final a la cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'a, b, c'</span>\n<span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">', '</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">', and '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'a, b, and c'</span>\n<span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">', '</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">' and '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'a and b'</span>\n<span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">', '</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">' and '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'a'</span>\n<span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">', '</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">' and '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ''</span></code></pre>\n    <p></p>\n    <h4 id=\"method-keyby\"><span class=\"link\"><code>keyBy()</code></span></h4>\n    <p>El <code>keyBy</code>método codifica la colección por la clave dada. Si varios elementos tienen la misma clave, solo el último aparecerá en la nueva colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'prod-100'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'prod-200'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$keyed</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">keyBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'product_id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$keyed</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        'prod-100' =&gt; ['product_id' =&gt; 'prod-100', 'name' =&gt; 'Desk'],\n        'prod-200' =&gt; ['product_id' =&gt; 'prod-200', 'name' =&gt; 'Chair'],\n    ]\n*/</span></code></pre>\n    <p>También puede pasar una devolución de llamada al método. La devolución de llamada debe devolver el valor a la clave de la colección por:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$keyed</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">keyBy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">strtoupper</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product_id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$keyed</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        'PROD-100' =&gt; ['product_id' =&gt; 'prod-100', 'name' =&gt; 'Desk'],\n        'PROD-200' =&gt; ['product_id' =&gt; 'prod-200', 'name' =&gt; 'Chair'],\n    ]\n*/</span></code></pre>\n    <p></p>\n    <h4 id=\"method-keys\"><span class=\"link\"><code>keys()</code></span></h4>\n    <p>El <code>keys</code>método devuelve todas las claves de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'prod-100'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'prod-100'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'prod-200'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'prod-200'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$keys</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$keys</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['prod-100', 'prod-200']</span></code></pre>\n    <p></p>\n    <h4 id=\"method-last\"><span class=\"link\"><code>last()</code></span></h4>\n    <p>El <code>last</code>método devuelve el último elemento de la colección que pasa una prueba de verdad determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2</span></code></pre>\n    <p>También puede llamar al <code>last</code>método sin argumentos para obtener el último elemento de la colección. Si la colección está vacía, <code>null</code>se devuelve:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 4</span></code></pre>\n    <p></p>\n    <h4 id=\"method-macro\"><span class=\"link\"><code>macro()</code></span></h4>\n    <p>El <code>macro</code>método estático le permite agregar métodos a la <code>Collection</code>clase en tiempo de ejecución. Consulte la documentación sobre la <span class=\"link\">ampliación de cobros</span> para obtener más información.</p>\n    <p></p>\n    <h4 id=\"method-make\"><span class=\"link\"><code>make()</code></span></h4>\n    <p>El <code>make</code>método estático crea una nueva instancia de colección. Consulte la sección <span class=\"link\">Creación de colecciones</span> .</p>\n    <p></p>\n    <h4 id=\"method-map\"><span class=\"link\"><code>map()</code></span></h4>\n    <p>El <code>map</code>método itera a través de la colección y pasa cada valor a la devolución de llamada dada. La devolución de llamada es libre de modificar el artículo y devolverlo, formando así una nueva colección de artículos modificados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$multiplied</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$item</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$multiplied</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [2, 4, 6, 8, 10]</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Como la mayoría de los otros métodos de recopilación, <code>map</code>devuelve una nueva instancia de recopilación; no modifica la colección a la que se llama. Si desea transformar la colección original, use el <span class=\"link\"><code>transform</code></span>método.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"method-mapinto\"><span class=\"link\"><code>mapInto()</code></span></h4>\n    <p>El <code>mapInto()</code>método itera sobre la colección, creando una nueva instancia de la clase dada pasando el valor al constructor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Currency</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Create a new currency instance.\n     *\n     * @param  string  $code\n     * @return void\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span>string <span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">code</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$code</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'USD'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'EUR'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'GBP'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$currencies</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">mapInto</span><span class=\"token punctuation\">(</span>Currency<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$currencies</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [Currency('USD'), Currency('EUR'), Currency('GBP')]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-mapspread\"><span class=\"link\"><code>mapSpread()</code></span></h4>\n    <p>El <code>mapSpread</code>método itera sobre los elementos de la colección, pasando cada valor de elemento anidado al cierre dado. El cierre es libre de modificar el artículo y devolverlo, formando así una nueva colección de artículos modificados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunks</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">chunk</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sequence</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$chunks</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">mapSpread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$even</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$odd</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$even</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$odd</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sequence</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 5, 9, 13, 17]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-maptogroups\"><span class=\"link\"><code>mapToGroups()</code></span></h4>\n    <p>El <code>mapToGroups</code>método agrupa los elementos de la colección por el cierre dado. El cierre debe devolver una matriz asociativa que contenga un solo par clave / valor, formando así una nueva colección de valores agrupados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'John Doe'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'department'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Sales'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Jane Doe'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'department'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Sales'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Johnny Doe'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'department'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Marketing'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$grouped</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">mapToGroups</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'department'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$item</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$grouped</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        'Sales' =&gt; ['John Doe', 'Jane Doe'],\n        'Marketing' =&gt; ['Johnny Doe'],\n    ]\n*/</span>\n\n<span class=\"token variable\">$grouped</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Sales'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['John Doe', 'Jane Doe']</span></code></pre>\n    <p></p>\n    <h4 id=\"method-mapwithkeys\"><span class=\"link\"><code>mapWithKeys()</code></span></h4>\n    <p>El <code>mapWithKeys</code>método itera a través de la colección y pasa cada valor a la devolución de llamada dada. La devolución de llamada debe devolver una matriz asociativa que contenga un solo par clave / valor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'John'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'department'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Sales'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'john@example.com'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Jane'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'department'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Marketing'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'jane@example.com'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$keyed</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">mapWithKeys</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$item</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$keyed</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        'john@example.com' =&gt; 'John',\n        'jane@example.com' =&gt; 'Jane',\n    ]\n*/</span></code></pre>\n    <p></p>\n    <h4 id=\"method-max\"><span class=\"link\"><code>max()</code></span></h4>\n    <p>El <code>max</code>método devuelve el valor máximo de una clave determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$max</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 20</span>\n\n<span class=\"token variable\">$max</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 5</span></code></pre>\n    <p></p>\n    <h4 id=\"method-median\"><span class=\"link\"><code>median()</code></span></h4>\n    <p>El <code>median</code>método devuelve el <span class=\"link\">valor mediano</span> de una clave determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$median</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">median</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 15</span>\n\n<span class=\"token variable\">$median</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">median</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1.5</span></code></pre>\n    <p></p>\n    <h4 id=\"method-merge\"><span class=\"link\"><code>merge()</code></span></h4>\n    <p>El <code>merge</code>método fusiona la matriz o colección dada con la colección original. Si una clave de cadena en los elementos dados coincide con una clave de cadena en la colección original, el valor de los elementos dados sobrescribirá el valor en la colección original:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$merged</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'discount'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$merged</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['product_id' =&gt; 1, 'price' =&gt; 200, 'discount' =&gt; false]</span></code></pre>\n    <p>Si las claves de los elementos dados son numéricas, los valores se agregarán al final de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$merged</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Bookcase'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Door'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$merged</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['Desk', 'Chair', 'Bookcase', 'Door']</span></code></pre>\n    <p></p>\n    <h4 id=\"method-mergerecursive\"><span class=\"link\"><code>mergeRecursive()</code></span></h4>\n    <p>El <code>mergeRecursive</code>método fusiona la matriz o colección dada de forma recursiva con la colección original. Si una clave de cadena en los elementos dados coincide con una clave de cadena en la colección original, entonces los valores de estas claves se fusionan en una matriz, y esto se hace de forma recursiva:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$merged</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">mergeRecursive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'product_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'discount'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">false</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$merged</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['product_id' =&gt; [1, 2], 'price' =&gt; [100, 200], 'discount' =&gt; false]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-min\"><span class=\"link\"><code>min()</code></span></h4>\n    <p>El <code>min</code>método devuelve el valor mínimo de una clave determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$min</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 10</span>\n\n<span class=\"token variable\">$min</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1</span></code></pre>\n    <p></p>\n    <h4 id=\"method-mode\"><span class=\"link\"><code>mode()</code></span></h4>\n    <p>El <code>mode</code>método devuelve el <span class=\"link\">valor</span> de <span class=\"link\">modo</span> de una clave determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$mode</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">mode</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [10]</span>\n\n<span class=\"token variable\">$mode</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">mode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1]</span>\n\n<span class=\"token variable\">$mode</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">mode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-nth\"><span class=\"link\"><code>nth()</code></span></h4>\n    <p>El <code>nth</code>método crea una nueva colección que consta de cada elemento n-ésimo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'f'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">nth</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['a', 'e']</span></code></pre>\n    <p>Opcionalmente, puede pasar un desplazamiento inicial como segundo argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">nth</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['b', 'f']</span></code></pre>\n    <p></p>\n    <h4 id=\"method-only\"><span class=\"link\"><code>only()</code></span></h4>\n    <p>El <code>only</code>método devuelve los elementos de la colección con las claves especificadas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'product_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'discount'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">false</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product_id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['product_id' =&gt; 1, 'name' =&gt; 'Desk']</span></code></pre>\n    <p>Para el inverso de <code>only</code>, vea el método <span class=\"link\">except</span> .</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>El comportamiento de este método se modifica al utilizar <span class=\"link\">Eloquent Collections</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"method-pad\"><span class=\"link\"><code>pad()</code></span></h4>\n    <p>El <code>pad</code>método llenará la matriz con el valor dado hasta que la matriz alcance el tamaño especificado. Este método se comporta como la función PHP <span class=\"link\">array_pad</span> .</p>\n    <p>Para rellenar a la izquierda, debe especificar un tamaño negativo. No se realizará ningún relleno si el valor absoluto del tamaño dado es menor o igual que la longitud de la matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pad</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['A', 'B', 'C', 0, 0]</span>\n\n<span class=\"token variable\">$filtered</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pad</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [0, 0, 'A', 'B', 'C']</span></code></pre>\n    <p></p>\n    <h4 id=\"method-partition\"><span class=\"link\"><code>partition()</code></span></h4>\n    <p>El <code>partition</code>método se puede combinar con la desestructuración de matrices de PHP para separar los elementos que pasan una prueba de verdad determinada de los que no:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token variable\">$underThree</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$equalOrAboveThree</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$underThree</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2]</span>\n\n<span class=\"token variable\">$equalOrAboveThree</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [3, 4, 5, 6]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-pipe\"><span class=\"link\"><code>pipe()</code></span></h4>\n    <p>El <code>pipe</code>método pasa la colección al cierre dado y devuelve el resultado del cierre ejecutado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$piped</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$collection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 6</span></code></pre>\n    <p></p>\n    <h4 id=\"method-pipeinto\"><span class=\"link\"><code>pipeInto()</code></span></h4>\n    <p>El <code>pipeInto</code>método crea una nueva instancia de la clase dada y pasa la colección al constructor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ResourceCollection</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The Collection instance.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$collection</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Create a new ResourceCollection instance.\n     *\n     * @param  Collection  $collection\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span>Collection <span class=\"token variable\">$collection</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">collection</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$resource</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pipeInto</span><span class=\"token punctuation\">(</span>ResourceCollection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$resource</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2, 3]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-pluck\"><span class=\"link\"><code>pluck()</code></span></h4>\n    <p>El <code>pluck</code>método recupera todos los valores de una clave determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'prod-100'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'prod-200'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$plucked</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pluck</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$plucked</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['Desk', 'Chair']</span></code></pre>\n    <p>También puede especificar cómo desea que se codifique la colección resultante:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$plucked</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pluck</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'product_id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$plucked</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['prod-100' =&gt; 'Desk', 'prod-200' =&gt; 'Chair']</span></code></pre>\n    <p>El <code>pluck</code>método también admite la recuperación de valores anidados mediante la notación de \"puntos\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'speakers'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'first_day'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Rosa'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Judith'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'second_day'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Angela'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Kathleen'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$plucked</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pluck</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'speakers.first_day'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$plucked</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['Rosa', 'Judith']</span></code></pre>\n    <p>Si existen claves duplicadas, el último elemento coincidente se insertará en la colección extraída:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'brand'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Tesla'</span><span class=\"token punctuation\">,</span>  <span class=\"token single-quoted-string string\">'color'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'red'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'brand'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Pagani'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'color'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'white'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'brand'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Tesla'</span><span class=\"token punctuation\">,</span>  <span class=\"token single-quoted-string string\">'color'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'black'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'brand'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Pagani'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'color'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'orange'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$plucked</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pluck</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'color'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'brand'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$plucked</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['Tesla' =&gt; 'black', 'Pagani' =&gt; 'orange']</span></code></pre>\n    <p></p>\n    <h4 id=\"method-pop\"><span class=\"link\"><code>pop()</code></span></h4>\n    <p>El <code>pop</code>método elimina y devuelve el último elemento de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 5</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2, 3, 4]</span></code></pre>\n    <p>Puede pasar un número entero al <code>pop</code>método para eliminar y devolver varios elementos del final de una colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// collect([5, 4, 3])</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-prepend\"><span class=\"link\"><code>prepend()</code></span></h4>\n    <p>El <code>prepend</code>método agrega un elemento al comienzo de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">prepend</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [0, 1, 2, 3, 4, 5]</span></code></pre>\n    <p>También puede pasar un segundo argumento para especificar la clave del elemento antepuesto:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'one'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'two'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">prepend</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'zero'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['zero' =&gt; 0, 'one' =&gt; 1, 'two' =&gt; 2]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-pull\"><span class=\"link\"><code>pull()</code></span></h4>\n    <p>El <code>pull</code>método elimina y devuelve un elemento de la colección por su clave:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'prod-100'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pull</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'Desk'</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['product_id' =&gt; 'prod-100']</span></code></pre>\n    <p></p>\n    <h4 id=\"method-push\"><span class=\"link\"><code>push()</code></span></h4>\n    <p>El <code>push</code>método agrega un elemento al final de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2, 3, 4, 5]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-put\"><span class=\"link\"><code>put()</code></span></h4>\n    <p>El <code>put</code>método establece la clave y el valor dados en la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'price'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['product_id' =&gt; 1, 'name' =&gt; 'Desk', 'price' =&gt; 100]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-random\"><span class=\"link\"><code>random()</code></span></h4>\n    <p>El <code>random</code>método devuelve un elemento aleatorio de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 4 - (retrieved randomly)</span></code></pre>\n    <p>Puede pasar un número entero a <code>random</code>para especificar cuántos elementos le gustaría recuperar aleatoriamente. Siempre se devuelve una colección de artículos cuando se pasa explícitamente la cantidad de artículos que desea recibir:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$random</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$random</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [2, 4, 5] - (retrieved randomly)</span></code></pre>\n    <p>Si la instancia de la colección tiene menos elementos de los solicitados, el <code>random</code>método arrojará un <code>InvalidArgumentException</code>.</p>\n    <p></p>\n    <h4 id=\"method-reduce\"><span class=\"link\"><code>reduce()</code></span></h4>\n    <p>El <code>reduce</code>método reduce la colección a un solo valor, pasando el resultado de cada iteración a la iteración subsiguiente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$total</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$carry</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$carry</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$item</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 6</span></code></pre>\n    <p>El valor de <code>$carry</code>en la primera iteración es <code>null</code>; sin embargo, puede especificar su valor inicial pasando un segundo argumento a <code>reduce</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$carry</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$carry</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$item</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 10</span></code></pre>\n    <p>El <code>reduce</code>método también pasa claves de matriz en colecciones asociativas a la devolución de llamada dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'usd'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1400</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'gbp'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1200</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'eur'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$ratio</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'usd'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'gbp'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1.37</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'eur'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1.22</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$carry</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">use</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$ratio</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$carry</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span> <span class=\"token operator\">*</span> <span class=\"token variable\">$ratio</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 4264</span></code></pre>\n    <p></p>\n    <h4 id=\"method-reject\"><span class=\"link\"><code>reject()</code></span></h4>\n    <p>El <code>reject</code>método filtra la colección usando el cierre dado. El cierre debe regresar <code>true</code>si el artículo debe ser eliminado de la colección resultante:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2]</span></code></pre>\n    <p>Para el inverso del <code>reject</code>método, vea el <span class=\"link\"><code>filter</code></span>método.</p>\n    <p></p>\n    <h4 id=\"method-replace\"><span class=\"link\"><code>replace()</code></span></h4>\n    <p>El <code>replace</code>método se comporta de manera similar a <code>merge</code>; sin embargo, además de sobrescribir elementos coincidentes que tienen claves de cadena, el <code>replace</code>método también sobrescribirá elementos de la colección que tengan claves numéricas coincidentes:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Abigail'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'James'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$replaced</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Victoria'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Finn'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$replaced</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['Taylor', 'Victoria', 'James', 'Finn']</span></code></pre>\n    <p></p>\n    <h4 id=\"method-replacerecursive\"><span class=\"link\"><code>replaceRecursive()</code></span></h4>\n    <p>Este método funciona como <code>replace</code>, pero se repetirá en matrices y aplicará el mismo proceso de reemplazo a los valores internos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'Abigail'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'James'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'Victoria'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'Finn'</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$replaced</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">replaceRecursive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'Charlie'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'King'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$replaced</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['Charlie', 'Abigail', ['James', 'King', 'Finn']]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-reverse\"><span class=\"link\"><code>reverse()</code></span></h4>\n    <p>El <code>reverse</code>método invierte el orden de los elementos de la colección, conservando las claves originales:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$reversed</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$reversed</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        4 =&gt; 'e',\n        3 =&gt; 'd',\n        2 =&gt; 'c',\n        1 =&gt; 'b',\n        0 =&gt; 'a',\n    ]\n*/</span></code></pre>\n    <p></p>\n    <h4 id=\"method-search\"><span class=\"link\"><code>search()</code></span></h4>\n    <p>El <code>search</code>método busca en la colección el valor dado y devuelve su clave si la encuentra. Si el artículo no se encuentra, <code>false</code>se devuelve:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1</span></code></pre>\n    <p>La búsqueda se realiza mediante una comparación \"suelta\", lo que significa que una cadena con un valor entero se considerará igual a un número entero del mismo valor. Para usar una comparación \"estricta\", pase <code>true</code>como segundo argumento al método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'4'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$strict</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p>Alternativamente, puede proporcionar su propio cierre para buscar el primer elemento que pase una prueba de verdad determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$item</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2</span></code></pre>\n    <p></p>\n    <h4 id=\"method-shift\"><span class=\"link\"><code>shift()</code></span></h4>\n    <p>El <code>shift</code>método elimina y devuelve el primer elemento de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [2, 3, 4, 5]</span></code></pre>\n    <p>Puede pasar un número entero al <code>shift</code>método para eliminar y devolver varios elementos desde el comienzo de una colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// collect([1, 2, 3])</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [4, 5]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-shuffle\"><span class=\"link\"><code>shuffle()</code></span></h4>\n    <p>El <code>shuffle</code>método baraja aleatoriamente los elementos de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$shuffled</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$shuffled</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [3, 2, 5, 1, 4] - (generated randomly)</span></code></pre>\n    <p></p>\n    <h4 id=\"method-sliding\"><span class=\"link\"><code>sliding()</code></span></h4>\n    <p>El <code>sliding</code>método devuelve una nueva colección de fragmentos que representan una vista de \"ventana deslizante\" de los elementos de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunks</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sliding</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunks</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [[1, 2], [2, 3], [3, 4], [4, 5]]</span></code></pre>\n    <p>Esto es especialmente útil junto con el <span class=\"link\"><code>eachSpread</code></span>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$transactions</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sliding</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">eachSpread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$previous</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$current</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$current</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">total</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$previous</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">total</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$current</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">amount</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Opcionalmente, puede pasar un segundo valor de \"paso\", que determina la distancia entre el primer elemento de cada fragmento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunks</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sliding</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> step<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunks</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [[1, 2, 3], [3, 4, 5]]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-skip\"><span class=\"link\"><code>skip()</code></span></h4>\n    <p>El <code>skip</code>método devuelve una nueva colección, con la cantidad dada de elementos eliminados del comienzo de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [5, 6, 7, 8, 9, 10]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-skipuntil\"><span class=\"link\"><code>skipUntil()</code></span></h4>\n    <p>El <code>skipUntil</code>método omite elementos de la colección hasta que la devolución de llamada dada regrese <code>true</code>y luego devuelve los elementos restantes en la colección como una nueva instancia de colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$subset</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">skipUntil</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$item</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$subset</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [3, 4]</span></code></pre>\n    <p>También puede pasar un valor simple al <code>skipUntil</code>método para omitir todos los elementos hasta que se encuentre el valor dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$subset</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">skipUntil</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$subset</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [3, 4]</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si no se encuentra el valor dado o la devolución de llamada nunca regresa <code>true</code>, el <code>skipUntil</code>método devolverá una colección vacía.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"method-skipwhile\"><span class=\"link\"><code>skipWhile()</code></span></h4>\n    <p>El <code>skipWhile</code>método omite elementos de la colección mientras la devolución de llamada dada regresa <code>true</code>y luego devuelve los elementos restantes en la colección como una nueva colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$subset</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">skipWhile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$item</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$subset</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [4]</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si la devolución de llamada nunca regresa <code>true</code>, el <code>skipWhile</code>método devolverá una colección vacía.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"method-slice\"><span class=\"link\"><code>slice()</code></span></h4>\n    <p>El <code>slice</code>método devuelve una porción de la colección comenzando en el índice dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$slice</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$slice</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [5, 6, 7, 8, 9, 10]</span></code></pre>\n    <p>Si desea limitar el tamaño del segmento devuelto, pase el tamaño deseado como segundo argumento del método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$slice</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$slice</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [5, 6]</span></code></pre>\n    <p>El segmento devuelto conservará las claves de forma predeterminada. Si no desea conservar las claves originales, puede utilizar el <span class=\"link\"><code>values</code></span>método para volver a indexarlas.</p>\n    <p></p>\n    <h4 id=\"method-sole\"><span class=\"link\"><code>sole()</code></span></h4>\n    <p>El <code>sole</code>método devuelve el primer elemento de la colección que pasa una prueba de verdad determinada, pero solo si la prueba de verdad coincide exactamente con un elemento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sole</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2</span></code></pre>\n    <p>También puede pasar un par clave / valor al <code>sole</code>método, que devolverá el primer elemento de la colección que coincida con el par dado, pero solo si coincide exactamente con un elemento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sole</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'product'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['product' =&gt; 'Chair', 'price' =&gt; 100]</span></code></pre>\n    <p>Alternativamente, también puede llamar al <code>sole</code>método sin argumento para obtener el primer elemento de la colección si solo hay un elemento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['product' =&gt; 'Desk', 'price' =&gt; 200]</span></code></pre>\n    <p>Si no hay elementos en la colección que el <code>sole</code>método deba devolver , se <code>\\Illuminate\\Collections\\ItemNotFoundException</code>lanzará una excepción. Si hay más de un elemento que debe devolverse, se <code>\\Illuminate\\Collections\\MultipleItemsFoundException</code>lanzará un .</p>\n    <p></p>\n    <h4 id=\"method-some\"><span class=\"link\"><code>some()</code></span></h4>\n    <p>Alias \u200B\u200Bdel <span class=\"link\"><code>contains</code></span>método.</p>\n    <p></p>\n    <h4 id=\"method-sort\"><span class=\"link\"><code>sort()</code></span></h4>\n    <p>El <code>sort</code>método ordena la colección. La colección ordenada mantiene las claves de matriz originales, por lo que en el siguiente ejemplo usaremos el <span class=\"link\"><code>values</code></span>método para restablecer las claves a índices numerados consecutivamente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sorted</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sorted</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2, 3, 4, 5]</span></code></pre>\n    <p>Si sus necesidades de clasificación son más avanzadas, puede pasar una devolución de llamada <code>sort</code>con su propio algoritmo. Consulte la documentación de PHP en <span class=\"link\"><code>uasort</code></span>, que es lo que las <code>sort</code>llamadas al método de la colección utilizan internamente.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si necesita ordenar una colección de matrices u objetos anidados, consulte los métodos <span class=\"link\"><code>sortBy</code></span>y <span class=\"link\"><code>sortByDesc</code></span>.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"method-sortby\"><span class=\"link\"><code>sortBy()</code></span></h4>\n    <p>El <code>sortBy</code>método ordena la colección por la clave dada. La colección ordenada mantiene las claves de matriz originales, por lo que en el siguiente ejemplo usaremos el <span class=\"link\"><code>values</code></span>método para restablecer las claves a índices numerados consecutivamente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Bookcase'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">150</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sorted</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sortBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'price'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sorted</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        ['name' =&gt; 'Chair', 'price' =&gt; 100],\n        ['name' =&gt; 'Bookcase', 'price' =&gt; 150],\n        ['name' =&gt; 'Desk', 'price' =&gt; 200],\n    ]\n*/</span></code></pre>\n    <p>El <code>sort</code>método acepta <span class=\"link\">indicadores de ordenación</span> como segundo argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Item 1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Item 12'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Item 3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sorted</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sortBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SORT_NATURAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sorted</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        ['title' =&gt; 'Item 1'],\n        ['title' =&gt; 'Item 3'],\n        ['title' =&gt; 'Item 12'],\n    ]\n*/</span></code></pre>\n    <p>Alternativamente, puede pasar su propio cierre para determinar cómo ordenar los valores de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'colors'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Black'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Mahogany'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'colors'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Black'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Bookcase'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'colors'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Red'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Beige'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Brown'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sorted</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sortBy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$product</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$product</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'colors'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sorted</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        ['name' =&gt; 'Chair', 'colors' =&gt; ['Black']],\n        ['name' =&gt; 'Desk', 'colors' =&gt; ['Black', 'Mahogany']],\n        ['name' =&gt; 'Bookcase', 'colors' =&gt; ['Red', 'Beige', 'Brown']],\n    ]\n*/</span></code></pre>\n    <p>Si desea ordenar su colección por múltiples atributos, puede pasar una matriz de operaciones de ordenación al <code>sortBy</code>método. Cada operación de clasificación debe ser una matriz que consta del atributo por el que desea ordenar y la dirección de la clasificación deseada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor Otwell'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'age'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">34</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Abigail Otwell'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'age'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor Otwell'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'age'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">36</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Abigail Otwell'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'age'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sorted</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sortBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'asc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'desc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sorted</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        ['name' =&gt; 'Abigail Otwell', 'age' =&gt; 32],\n        ['name' =&gt; 'Abigail Otwell', 'age' =&gt; 30],\n        ['name' =&gt; 'Taylor Otwell', 'age' =&gt; 36],\n        ['name' =&gt; 'Taylor Otwell', 'age' =&gt; 34],\n    ]\n*/</span></code></pre>\n    <p>Al ordenar una colección por múltiples atributos, también puede proporcionar cierres que definan cada operación de ordenación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor Otwell'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'age'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">34</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Abigail Otwell'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'age'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor Otwell'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'age'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">36</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Abigail Otwell'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'age'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sorted</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sortBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    fn <span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    fn <span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'age'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sorted</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        ['name' =&gt; 'Abigail Otwell', 'age' =&gt; 32],\n        ['name' =&gt; 'Abigail Otwell', 'age' =&gt; 30],\n        ['name' =&gt; 'Taylor Otwell', 'age' =&gt; 36],\n        ['name' =&gt; 'Taylor Otwell', 'age' =&gt; 34],\n    ]\n*/</span></code></pre>\n    <p></p>\n    <h4 id=\"method-sortbydesc\"><span class=\"link\"><code>sortByDesc()</code></span></h4>\n    <p>Este método tiene la misma firma que el <span class=\"link\"><code>sortBy</code></span>método, pero clasificará la colección en el orden opuesto.</p>\n    <p></p>\n    <h4 id=\"method-sortdesc\"><span class=\"link\"><code>sortDesc()</code></span></h4>\n    <p>Este método ordenará la colección en el orden opuesto al <span class=\"link\"><code>sort</code></span>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sorted</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sortDesc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sorted</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [5, 4, 3, 2, 1]</span></code></pre>\n    <p>A diferencia <code>sort</code>, no puede pasar un cierre a <code>sortDesc</code>. En su lugar, debe utilizar el <span class=\"link\"><code>sort</code></span>método e invertir su comparación.</p>\n    <p></p>\n    <h4 id=\"method-sortkeys\"><span class=\"link\"><code>sortKeys()</code></span></h4>\n    <p>El <code>sortKeys</code>método ordena la colección por las claves de la matriz asociativa subyacente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">22345</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'first'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'John'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'last'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Doe'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sorted</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sortKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sorted</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        'first' =&gt; 'John',\n        'id' =&gt; 22345,\n        'last' =&gt; 'Doe',\n    ]\n*/</span></code></pre>\n    <p></p>\n    <h4 id=\"method-sortkeysdesc\"><span class=\"link\"><code>sortKeysDesc()</code></span></h4>\n    <p>Este método tiene la misma firma que el <span class=\"link\"><code>sortKeys</code></span>método, pero clasificará la colección en el orden opuesto.</p>\n    <p></p>\n    <h4 id=\"method-splice\"><span class=\"link\"><code>splice()</code></span></h4>\n    <p>El <code>splice</code>método elimina y devuelve una porción de elementos que comienzan en el índice especificado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunk</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunk</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [3, 4, 5]</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2]</span></code></pre>\n    <p>Puede pasar un segundo argumento para limitar el tamaño de la colección resultante:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunk</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunk</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [3]</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2, 4, 5]</span></code></pre>\n    <p>Además, puede pasar un tercer argumento que contenga los nuevos elementos para reemplazar los elementos eliminados de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunk</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunk</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [3]</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2, 10, 11, 4, 5]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-split\"><span class=\"link\"><code>split()</code></span></h4>\n    <p>El <code>split</code>método divide una colección en el número dado de grupos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$groups</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$groups</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [[1, 2], [3, 4], [5]]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-splitin\"><span class=\"link\"><code>splitIn()</code></span></h4>\n    <p>El <code>splitIn</code>método divide una colección en el número dado de grupos, llenando los grupos no terminales por completo antes de asignar el resto al grupo final:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$groups</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">splitIn</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$groups</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-sum\"><span class=\"link\"><code>sum()</code></span></h4>\n    <p>El <code>sum</code>método devuelve la suma de todos los elementos de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 15</span></code></pre>\n    <p>Si la colección contiene matrices u objetos anidados, debe pasar una clave que se utilizará para determinar qué valores sumar:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'JavaScript: The Good Parts'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'pages'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">176</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'JavaScript: The Definitive Guide'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'pages'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1096</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'pages'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1272</span></code></pre>\n    <p>Además, puede pasar su propio cierre para determinar qué valores de la colección sumarán:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'colors'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Black'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'colors'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Black'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Mahogany'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Bookcase'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'colors'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Red'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Beige'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Brown'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$product</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$product</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'colors'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 6</span></code></pre>\n    <p></p>\n    <h4 id=\"method-take\"><span class=\"link\"><code>take()</code></span></h4>\n    <p>El <code>take</code>método devuelve una nueva colección con el número especificado de elementos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunk</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunk</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [0, 1, 2]</span></code></pre>\n    <p>También puede pasar un número entero negativo para tomar el número especificado de elementos del final de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunk</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$chunk</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [4, 5]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-takeuntil\"><span class=\"link\"><code>takeUntil()</code></span></h4>\n    <p>El <code>takeUntil</code>método devuelve elementos de la colección hasta que la devolución de llamada dada devuelve <code>true</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$subset</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">takeUntil</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$item</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$subset</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2]</span></code></pre>\n    <p>También puede pasar un valor simple al <code>takeUntil</code>método para obtener los elementos hasta que se encuentre el valor dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$subset</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">takeUntil</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$subset</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2]</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si no se encuentra el valor dado o la devolución de llamada nunca regresa <code>true</code>, el <code>takeUntil</code>método devolverá todos los elementos de la colección.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"method-takewhile\"><span class=\"link\"><code>takeWhile()</code></span></h4>\n    <p>El <code>takeWhile</code>método devuelve elementos de la colección hasta que la devolución de llamada dada devuelve <code>false</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$subset</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">takeWhile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$item</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$subset</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2]</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si la devolución de llamada nunca regresa <code>false</code>, el <code>takeWhile</code>método devolverá todos los elementos de la colección.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"method-tap\"><span class=\"link\"><code>tap()</code></span></h4>\n    <p>El <code>tap</code>método pasa la colección a la devolución de llamada dada, lo que le permite \"tocar\" en la colección en un punto específico y hacer algo con los elementos sin afectar la colección en sí. Luego, la colección es devuelta por el <code>tap</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$collection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Log<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Values after sorting'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1</span></code></pre>\n    <p></p>\n    <h4 id=\"method-times\"><span class=\"link\"><code>times()</code></span></h4>\n    <p>El <code>times</code>método estático crea una nueva colección invocando el cierre dado un número específico de veces:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> Collection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">times</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$number</span> <span class=\"token operator\">*</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [9, 18, 27, 36, 45, 54, 63, 72, 81, 90]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-toarray\"><span class=\"link\"><code>toArray()</code></span></h4>\n    <p>El <code>toArray</code>método convierte la colección en PHP simple <code>array</code>. Si los valores de la colección son modelos <span class=\"link\">Eloquent</span> , los modelos también se convertirán en matrices:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        ['name' =&gt; 'Desk', 'price' =&gt; 200],\n    ]\n*/</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p> <code>toArray</code>también convierte todos los objetos anidados de la colección que son una instancia de <code>Arrayable</code>en una matriz. Si desea obtener la matriz sin procesar subyacente a la colección, utilice el <span class=\"link\"><code>all</code></span>método en su lugar.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"method-tojson\"><span class=\"link\"><code>toJson()</code></span></h4>\n    <p>El <code>toJson</code>método convierte la colección en una cadena serializada JSON:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// '{\"name\":\"Desk\", \"price\":200}'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-transform\"><span class=\"link\"><code>transform()</code></span></h4>\n    <p>El <code>transform</code>método itera sobre la colección y llama a la devolución de llamada dada con cada elemento de la colección. Los elementos de la colección serán reemplazados por los valores devueltos por la devolución de llamada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$item</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [2, 4, 6, 8, 10]</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>A diferencia de la mayoría de los otros métodos de recopilación, <code>transform</code>modifica la propia recopilación. Si desea crear una nueva colección en su lugar, use el <span class=\"link\"><code>map</code></span>método.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"method-union\"><span class=\"link\"><code>union()</code></span></h4>\n    <p>El <code>union</code>método agrega la matriz dada a la colección. Si la matriz dada contiene claves que ya están en la colección original, se preferirán los valores de la colección original:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$union</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$union</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1 =&gt; ['a'], 2 =&gt; ['b'], 3 =&gt; ['c']]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-unique\"><span class=\"link\"><code>unique()</code></span></h4>\n    <p>El <code>unique</code>método devuelve todos los elementos únicos de la colección. La colección devuelta mantiene las claves de matriz originales, por lo que en el siguiente ejemplo usaremos el <span class=\"link\"><code>values</code></span>método para restablecer las claves a índices numerados consecutivamente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$unique</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$unique</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2, 3, 4]</span></code></pre>\n    <p>Cuando se trata de matrices u objetos anidados, puede especificar la clave utilizada para determinar la unicidad:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'iPhone 6'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'brand'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Apple'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'phone'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'iPhone 5'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'brand'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Apple'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'phone'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Apple Watch'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'brand'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Apple'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'watch'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Galaxy S6'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'brand'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Samsung'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'phone'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Galaxy Gear'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'brand'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Samsung'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'watch'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$unique</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'brand'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$unique</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        ['name' =&gt; 'iPhone 6', 'brand' =&gt; 'Apple', 'type' =&gt; 'phone'],\n        ['name' =&gt; 'Galaxy S6', 'brand' =&gt; 'Samsung', 'type' =&gt; 'phone'],\n    ]\n*/</span></code></pre>\n    <p>Finalmente, también puede pasar su propio cierre al <code>unique</code>método para especificar qué valor debe determinar la singularidad de un elemento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$unique</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$item</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'brand'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$item</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'type'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$unique</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        ['name' =&gt; 'iPhone 6', 'brand' =&gt; 'Apple', 'type' =&gt; 'phone'],\n        ['name' =&gt; 'Apple Watch', 'brand' =&gt; 'Apple', 'type' =&gt; 'watch'],\n        ['name' =&gt; 'Galaxy S6', 'brand' =&gt; 'Samsung', 'type' =&gt; 'phone'],\n        ['name' =&gt; 'Galaxy Gear', 'brand' =&gt; 'Samsung', 'type' =&gt; 'watch'],\n    ]\n*/</span></code></pre>\n    <p>El <code>unique</code>método utiliza comparaciones \"sueltas\" al comprobar los valores de los elementos, lo que significa que una cadena con un valor entero se considerará igual a un número entero del mismo valor. Utilice el <span class=\"link\"><code>uniqueStrict</code></span>método para filtrar mediante comparaciones \"estrictas\".</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>El comportamiento de este método se modifica al utilizar <span class=\"link\">Eloquent Collections</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"method-uniquestrict\"><span class=\"link\"><code>uniqueStrict()</code></span></h4>\n    <p>Este método tiene la misma firma que el <span class=\"link\"><code>unique</code></span>método; sin embargo, todos los valores se comparan mediante comparaciones \"estrictas\".</p>\n    <p></p>\n    <h4 id=\"method-unless\"><span class=\"link\"><code>unless()</code></span></h4>\n    <p>El <code>unless</code>método ejecutará la devolución de llamada dada a menos que el primer argumento dado al método se evalúe como <code>true</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">unless</span><span class=\"token punctuation\">(</span><span class=\"token boolean constant\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$collection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">unless</span><span class=\"token punctuation\">(</span><span class=\"token boolean constant\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$collection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2, 3, 5]</span></code></pre>\n    <p>Para el inverso de <code>unless</code>, vea el <span class=\"link\"><code>when</code></span>método.</p>\n    <p></p>\n    <h4 id=\"method-unlessempty\"><span class=\"link\"><code>unlessEmpty()</code></span></h4>\n    <p>Alias \u200B\u200Bdel <span class=\"link\"><code>whenNotEmpty</code></span>método.</p>\n    <p></p>\n    <h4 id=\"method-unlessnotempty\"><span class=\"link\"><code>unlessNotEmpty()</code></span></h4>\n    <p>Alias \u200B\u200Bdel <span class=\"link\"><code>whenEmpty</code></span>método.</p>\n    <p></p>\n    <h4 id=\"method-unwrap\"><span class=\"link\"><code>unwrap()</code></span></h4>\n    <p>El <code>unwrap</code>método estático devuelve los elementos subyacentes de la colección a partir del valor dado cuando corresponde:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Collection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'John Doe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['John Doe']</span>\n\nCollection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'John Doe'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['John Doe']</span>\n\nCollection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'John Doe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'John Doe'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-values\"><span class=\"link\"><code>values()</code></span></h4>\n    <p>El <code>values</code>método devuelve una nueva colección con las claves restablecidas a enteros consecutivos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token number\">10</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">11</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$values</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$values</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        0 =&gt; ['product' =&gt; 'Desk', 'price' =&gt; 200],\n        1 =&gt; ['product' =&gt; 'Desk', 'price' =&gt; 200],\n    ]\n*/</span></code></pre>\n    <p></p>\n    <h4 id=\"method-when\"><span class=\"link\"><code>when()</code></span></h4>\n    <p>El <code>when</code>método ejecutará la devolución de llamada dada cuando el primer argumento dado al método se evalúe como <code>true</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token boolean constant\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$collection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token boolean constant\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$collection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2, 3, 4]</span></code></pre>\n    <p>Para el inverso de <code>when</code>, vea el <span class=\"link\"><code>unless</code></span>método.</p>\n    <p></p>\n    <h4 id=\"method-whenempty\"><span class=\"link\"><code>whenEmpty()</code></span></h4>\n    <p>El <code>whenEmpty</code>método ejecutará la devolución de llamada dada cuando la colección esté vacía:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Michael'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Tom'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whenEmpty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$collection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Adam'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['Michael', 'Tom']</span>\n\n<span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whenEmpty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$collection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Adam'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['Adam']</span></code></pre>\n    <p>Se puede pasar un segundo cierre al <code>whenEmpty</code>método que se ejecutará cuando la colección no esté vacía:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Michael'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Tom'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whenEmpty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$collection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Adam'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$collection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['Michael', 'Tom', 'Taylor']</span></code></pre>\n    <p>Para el inverso de <code>whenEmpty</code>, vea el <span class=\"link\"><code>whenNotEmpty</code></span>método.</p>\n    <p></p>\n    <h4 id=\"method-whennotempty\"><span class=\"link\"><code>whenNotEmpty()</code></span></h4>\n    <p>El <code>whenNotEmpty</code>método ejecutará la devolución de llamada dada cuando la colección no esté vacía:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'michael'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'tom'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whenNotEmpty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$collection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'adam'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['michael', 'tom', 'adam']</span>\n\n<span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whenNotEmpty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$collection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'adam'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// []</span></code></pre>\n    <p>Se puede pasar un segundo cierre al <code>whenNotEmpty</code>método que se ejecutará cuando la colección esté vacía:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whenNotEmpty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$collection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'adam'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$collection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'taylor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['taylor']</span></code></pre>\n    <p>Para el inverso de <code>whenNotEmpty</code>, vea el <span class=\"link\"><code>whenEmpty</code></span>método.</p>\n    <p></p>\n    <h4 id=\"method-where\"><span class=\"link\"><code>where()</code></span></h4>\n    <p>El <code>where</code>método filtra la colección por un par clave / valor dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Bookcase'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">150</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Door'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'price'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        ['product' =&gt; 'Chair', 'price' =&gt; 100],\n        ['product' =&gt; 'Door', 'price' =&gt; 100],\n    ]\n*/</span></code></pre>\n    <p>El <code>where</code>método utiliza comparaciones \"sueltas\" al comprobar los valores de los elementos, lo que significa que una cadena con un valor entero se considerará igual a un número entero del mismo valor. Utilice el <span class=\"link\"><code>whereStrict</code></span>método para filtrar mediante comparaciones \"estrictas\".</p>\n    <p>Opcionalmente, puede pasar un operador de comparación como segundo parámetro.</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Jim'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'deleted_at'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'2019-01-01 00:00:00'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Sally'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'deleted_at'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'2019-01-02 00:00:00'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Sue'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'deleted_at'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'deleted_at'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'!='</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        ['name' =&gt; 'Jim', 'deleted_at' =&gt; '2019-01-01 00:00:00'],\n        ['name' =&gt; 'Sally', 'deleted_at' =&gt; '2019-01-02 00:00:00'],\n    ]\n*/</span></code></pre>\n    <p></p>\n    <h4 id=\"method-wherestrict\"><span class=\"link\"><code>whereStrict()</code></span></h4>\n    <p>Este método tiene la misma firma que el <span class=\"link\"><code>where</code></span>método; sin embargo, todos los valores se comparan mediante comparaciones \"estrictas\".</p>\n    <p></p>\n    <h4 id=\"method-wherebetween\"><span class=\"link\"><code>whereBetween()</code></span></h4>\n    <p>El <code>whereBetween</code>método filtra la colección determinando si el valor de un elemento específico está dentro de un rango determinado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">80</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Bookcase'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">150</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Pencil'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Door'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereBetween</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'price'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        ['product' =&gt; 'Desk', 'price' =&gt; 200],\n        ['product' =&gt; 'Bookcase', 'price' =&gt; 150],\n        ['product' =&gt; 'Door', 'price' =&gt; 100],\n    ]\n*/</span></code></pre>\n    <p></p>\n    <h4 id=\"method-wherein\"><span class=\"link\"><code>whereIn()</code></span></h4>\n    <p>El <code>whereIn</code>método elimina elementos de la colección que no tienen un valor de elemento especificado que está contenido dentro de la matriz dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Bookcase'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">150</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Door'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereIn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'price'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        ['product' =&gt; 'Desk', 'price' =&gt; 200],\n        ['product' =&gt; 'Bookcase', 'price' =&gt; 150],\n    ]\n*/</span></code></pre>\n    <p>El <code>whereIn</code>método utiliza comparaciones \"sueltas\" al comprobar los valores de los elementos, lo que significa que una cadena con un valor entero se considerará igual a un número entero del mismo valor. Utilice el <span class=\"link\"><code>whereInStrict</code></span>método para filtrar mediante comparaciones \"estrictas\".</p>\n    <p></p>\n    <h4 id=\"method-whereinstrict\"><span class=\"link\"><code>whereInStrict()</code></span></h4>\n    <p>Este método tiene la misma firma que el <span class=\"link\"><code>whereIn</code></span>método; sin embargo, todos los valores se comparan mediante comparaciones \"estrictas\".</p>\n    <p></p>\n    <h4 id=\"method-whereinstanceof\"><span class=\"link\"><code>whereInstanceOf()</code></span></h4>\n    <p>El <code>whereInstanceOf</code>método filtra la colección por un tipo de clase determinado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Post</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereInstanceOf</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [App\\Models\\User, App\\Models\\User]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-wherenotbetween\"><span class=\"link\"><code>whereNotBetween()</code></span></h4>\n    <p>El <code>whereNotBetween</code>método filtra la colección determinando si el valor de un elemento especificado está fuera de un rango determinado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">80</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Bookcase'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">150</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Pencil'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Door'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereNotBetween</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'price'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        ['product' =&gt; 'Chair', 'price' =&gt; 80],\n        ['product' =&gt; 'Pencil', 'price' =&gt; 30],\n    ]\n*/</span></code></pre>\n    <p></p>\n    <h4 id=\"method-wherenotin\"><span class=\"link\"><code>whereNotIn()</code></span></h4>\n    <p>El <code>whereNotIn</code>método elimina elementos de la colección que tienen un valor de elemento especificado que no está contenido en la matriz dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Bookcase'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">150</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Door'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereNotIn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'price'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        ['product' =&gt; 'Chair', 'price' =&gt; 100],\n        ['product' =&gt; 'Door', 'price' =&gt; 100],\n    ]\n*/</span></code></pre>\n    <p>El <code>whereNotIn</code>método utiliza comparaciones \"sueltas\" al comprobar los valores de los elementos, lo que significa que una cadena con un valor entero se considerará igual a un número entero del mismo valor. Utilice el <span class=\"link\"><code>whereNotInStrict</code></span>método para filtrar mediante comparaciones \"estrictas\".</p>\n    <p></p>\n    <h4 id=\"method-wherenotinstrict\"><span class=\"link\"><code>whereNotInStrict()</code></span></h4>\n    <p>Este método tiene la misma firma que el <span class=\"link\"><code>whereNotIn</code></span>método; sin embargo, todos los valores se comparan mediante comparaciones \"estrictas\".</p>\n    <p></p>\n    <h4 id=\"method-wherenotnull\"><span class=\"link\"><code>whereNotNull()</code></span></h4>\n    <p>El <code>whereNotNull</code>método devuelve elementos de la colección donde la clave dada no es <code>null</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Bookcase'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereNotNull</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        ['name' =&gt; 'Desk'],\n        ['name' =&gt; 'Bookcase'],\n    ]\n*/</span></code></pre>\n    <p></p>\n    <h4 id=\"method-wherenull\"><span class=\"link\"><code>whereNull()</code></span></h4>\n    <p>El <code>whereNull</code>método devuelve elementos de la colección donde la clave dada es <code>null</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Bookcase'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereNull</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        ['name' =&gt; null],\n    ]\n*/</span></code></pre>\n    <p></p>\n    <h4 id=\"method-wrap\"><span class=\"link\"><code>wrap()</code></span></h4>\n    <p>El <code>wrap</code>método estático envuelve el valor dado en una colección cuando corresponde:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Collection</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> Collection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'John Doe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['John Doe']</span>\n\n<span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> Collection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'John Doe'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['John Doe']</span>\n\n<span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> Collection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'John Doe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['John Doe']</span></code></pre>\n    <p></p>\n    <h4 id=\"method-zip\"><span class=\"link\"><code>zip()</code></span></h4>\n    <p>El <code>zip</code>método fusiona los valores de la matriz dada con los valores de la colección original en su índice correspondiente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$zipped</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$collection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">zip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$zipped</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [['Chair', 100], ['Desk', 200]]</span></code></pre>\n    <p></p>\n    <h2 id=\"higher-order-messages\"><span class=\"link\">Mensajes de orden superior</span></h2>\n    <p>Las colecciones también brindan soporte para \"mensajes de orden superior\", que son atajos para realizar acciones comunes en las colecciones. Los métodos de recolección que proporcionan mensajes de orden superior son: <span class=\"link\"><code>average</code></span>, <span class=\"link\"><code>avg</code></span>, <span class=\"link\"><code>contains</code></span>, <span class=\"link\"><code>each</code></span>, <span class=\"link\"><code>every</code></span>, <span class=\"link\"><code>filter</code></span>, <span class=\"link\"><code>first</code></span>, <span class=\"link\"><code>flatMap</code></span>, <span class=\"link\"><code>groupBy</code></span>, <span class=\"link\"><code>keyBy</code></span>, <span class=\"link\"><code>map</code></span>, <span class=\"link\"><code>max</code></span>, <span class=\"link\"><code>min</code></span>, <span class=\"link\"><code>partition</code></span>, <span class=\"link\"><code>reject</code></span>, <span class=\"link\"><code>skipUntil</code></span>, <span class=\"link\"><code>skipWhile</code></span>, <span class=\"link\"><code>some</code></span>, <span class=\"link\"><code>sortBy</code></span>, <span class=\"link\"><code>sortByDesc</code></span>, <span class=\"link\"><code>sum</code></span>, <span class=\"link\"><code>takeUntil</code></span>, <span class=\"link\"><code>takeWhile</code></span>, y <span class=\"link\"><code>unique</code></span>.</p>\n    <p>Se puede acceder a cada mensaje de orden superior como una propiedad dinámica en una instancia de colección. Por ejemplo, usemos el <code>each</code>mensaje de orden superior para llamar a un método en cada objeto dentro de una colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">each</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">markAsVip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Del mismo modo, podemos usar el <code>sum</code>mensaje de orden superior para recopilar el número total de \"votos\" para una colección de usuarios:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'group'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Development'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">sum</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">votes</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"lazy-collections\"><span class=\"link\">Colecciones perezosas</span></h2>\n    <p></p>\n    <h3 id=\"lazy-collection-introduction\"><span class=\"link\">Introducción</span></h3>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Antes de aprender más sobre las colecciones perezosas de Laravel, tómate un tiempo para familiarizarte con los <span class=\"link\">generadores de PHP</span> .</p></p></div>\n    </blockquote>\n    <p>Para complementar la <code>Collection</code>clase ya poderosa , la <code>LazyCollection</code>clase aprovecha los <span class=\"link\">generadores</span> de PHP para permitirle trabajar con conjuntos de datos muy grandes mientras mantiene bajo el uso de memoria.</p>\n    <p>Por ejemplo, imagine que su aplicación necesita procesar un archivo de registro de varios gigabytes mientras aprovecha los métodos de recopilación de Laravel para analizar los registros. En lugar de leer todo el archivo en la memoria a la vez, se pueden usar colecciones diferidas para mantener solo una pequeña parte del archivo en la memoria en un momento dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>LogEntry</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>LazyCollection</span><span class=\"token punctuation\">;</span>\n\nLazyCollection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$handle</span> <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'log.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$line</span> <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$handle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token variable\">$line</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">chunk</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$lines</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> LogEntry<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">fromLines</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$lines</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>LogEntry <span class=\"token variable\">$logEntry</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Process the log entry...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>O imagina que necesitas iterar a través de 10,000 modelos Eloquent. Al usar colecciones tradicionales de Laravel, todos los 10,000 modelos de Eloquent deben cargarse en la memoria al mismo tiempo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Sin embargo, el <code>cursor</code>método del generador de consultas devuelve una <code>LazyCollection</code>instancia. Esto le permite seguir ejecutando una única consulta en la base de datos, pero también mantener solo un modelo Eloquent cargado en la memoria a la vez. En este ejemplo, la <code>filter</code>devolución de llamada no se ejecuta hasta que iteramos sobre cada usuario individualmente, lo que permite una reducción drástica en el uso de la memoria:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">cursor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h3 id=\"creating-lazy-collections\"><span class=\"link\">Crear colecciones perezosas</span></h3>\n    <p>Para crear una instancia de colección perezosa, debe pasar una función generadora de PHP al <code>make</code>método de la colección :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>LazyCollection</span><span class=\"token punctuation\">;</span>\n\nLazyCollection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$handle</span> <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'log.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$line</span> <span class=\"token operator\">=</span> <span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$handle</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token variable\">$line</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"the-enumerable-contract\"><span class=\"link\">El contrato enumerable</span></h3>\n    <p>Casi todos los métodos disponibles en la <code>Collection</code>clase también están disponibles en la <code>LazyCollection</code>clase. Ambas clases implementan el <code>Illuminate\\Support\\Enumerable</code>contrato, que define los siguientes métodos:</p>\n    <div id=\"collection-method-list\">\n        <p><span class=\"link\">todos</span>\n            <span class=\"link\">promedio</span>\n            <span class=\"link\">promedio</span>\n            <span class=\"link\">pedazo</span>\n            <span class=\"link\">chunkMientras</span>\n            <span class=\"link\">colapso</span>\n            <span class=\"link\">recoger</span>\n            <span class=\"link\">combinar</span>\n            <span class=\"link\">concat</span>\n            <span class=\"link\">contiene</span>\n            <span class=\"link\">contieneEstricto</span>\n            <span class=\"link\">contar</span>\n            <span class=\"link\">countBy</span>\n            <span class=\"link\">crossUnirse</span>\n            <span class=\"link\">dd</span>\n            <span class=\"link\">diff</span>\n            <span class=\"link\">diffAssoc</span>\n            <span class=\"link\">diffKeys</span>\n            <span class=\"link\">vertedero</span>\n            <span class=\"link\">duplicados</span>\n            <span class=\"link\">duplicadosEstricto</span>\n            <span class=\"link\">cada</span>\n            <span class=\"link\">cada uno</span>\n            <span class=\"link\">cada</span>\n            <span class=\"link\">excepto</span>\n            <span class=\"link\">filtrar</span>\n            <span class=\"link\">primero</span>\n            <span class=\"link\">primero donde</span>\n            <span class=\"link\">mapa plano</span>\n            <span class=\"link\">aplanar</span>\n            <span class=\"link\">voltear</span>\n            <span class=\"link\">forPage</span>\n            <span class=\"link\">obtener</span>\n            <span class=\"link\">agrupar por</span>\n            <span class=\"link\">tiene</span>\n            <span class=\"link\">implosionar</span>\n            <span class=\"link\">intersecarse</span>\n            <span class=\"link\">intersectByKeys</span>\n            <span class=\"link\">esta vacio</span>\n            <span class=\"link\">no está vacío</span>\n            <span class=\"link\">entrar</span>\n            <span class=\"link\">keyBy</span>\n            <span class=\"link\">teclas</span>\n            <span class=\"link\">último</span>\n            <span class=\"link\">macro</span>\n            <span class=\"link\">hacer</span>\n            <span class=\"link\">mapa</span>\n            <span class=\"link\">mapInto</span>\n            <span class=\"link\">mapSpread</span>\n            <span class=\"link\">mapToGroups</span>\n            <span class=\"link\">mapWithKeys</span>\n            <span class=\"link\">max</span>\n            <span class=\"link\">mediana</span>\n            <span class=\"link\">unir</span>\n            <span class=\"link\">mergeRecursive</span>\n            <span class=\"link\">min</span>\n            <span class=\"link\">modo</span>\n            <span class=\"link\">enésimo</span>\n            <span class=\"link\">solamente</span>\n            <span class=\"link\">almohadilla</span>\n            <span class=\"link\">dividir</span>\n            <span class=\"link\">tubo</span>\n            <span class=\"link\">arrancar</span>\n            <span class=\"link\">aleatorio</span>\n            <span class=\"link\">reducir</span>\n            <span class=\"link\">rechazar</span>\n            <span class=\"link\">reemplazar</span>\n            <span class=\"link\">Reemplazar recursivo</span>\n            <span class=\"link\">marcha atrás</span>\n            <span class=\"link\">buscar</span>\n            <span class=\"link\">barajar</span>\n            <span class=\"link\">saltar</span>\n            <span class=\"link\">rodaja</span>\n            <span class=\"link\">algunos</span>\n            <span class=\"link\">clasificar</span>\n            <span class=\"link\">Ordenar por</span>\n            <span class=\"link\">sortByDesc</span>\n            <span class=\"link\">sortKeys</span>\n            <span class=\"link\">sortKeysDesc</span>\n            <span class=\"link\">separar</span>\n            <span class=\"link\">suma</span>\n            <span class=\"link\">llevar</span>\n            <span class=\"link\">grifo</span>\n            <span class=\"link\">veces</span>\n            <span class=\"link\">toArray</span>\n            <span class=\"link\">toJson</span>\n            <span class=\"link\">Unión</span>\n            <span class=\"link\">único</span>\n            <span class=\"link\">uniqueStrict</span>\n            <span class=\"link\">a no ser que</span>\n            <span class=\"link\">a menos que esté vacío</span>\n            <span class=\"link\">a menos que no esté vacío</span>\n            <span class=\"link\">desenvolver</span>\n            <span class=\"link\">valores</span>\n            <span class=\"link\">cuando</span>\n            <span class=\"link\">whenEmpty</span>\n            <span class=\"link\">whenNotEmpty</span>\n            <span class=\"link\">dónde</span>\n            <span class=\"link\">whereStrict</span>\n            <span class=\"link\">whereBetween</span>\n            <span class=\"link\">donde</span>\n            <span class=\"link\">whereInStrict</span>\n            <span class=\"link\">whereInstanceOf</span>\n            <span class=\"link\">whereNotBetween</span>\n            <span class=\"link\">whereNotIn</span>\n            <span class=\"link\">whereNotInStrict</span>\n            <span class=\"link\">envoltura</span>\n            <span class=\"link\">Código Postal</span></p>\n    </div>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Métodos que mutan la colección (tales como <code>shift</code>, <code>pop</code>, <code>prepend</code>etc.) son <strong>no</strong> disponibles en la <code>LazyCollection</code>clase.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"lazy-collection-methods\"><span class=\"link\">Métodos de recolección perezosos</span></h3>\n    <p>Además de los métodos definidos en el <code>Enumerable</code>contrato, la <code>LazyCollection</code>clase contiene los siguientes métodos:</p>\n    <p></p>\n    <h4 id=\"method-takeUntilTimeout\"><span class=\"link\"><code>takeUntilTimeout()</code></span></h4>\n    <p>El <code>takeUntilTimeout</code>método devuelve una nueva colección diferida que enumerará los valores hasta el momento especificado. Después de ese tiempo, la colección dejará de enumerar:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$lazyCollection</span> <span class=\"token operator\">=</span> LazyCollection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">times</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INF</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">takeUntilTimeout</span><span class=\"token punctuation\">(</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">addMinute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$lazyCollection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token comment\">// 58</span>\n<span class=\"token comment\">// 59</span></code></pre>\n    <p>Para ilustrar el uso de este método, imagine una aplicación que envía facturas desde la base de datos usando un cursor. Puede definir una <span class=\"link\">tarea programada</span> que se ejecute cada 15 minutos y solo procese facturas durante un máximo de 14 minutos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Invoice</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Carbon</span><span class=\"token punctuation\">;</span>\n\nInvoice<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">pending</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">cursor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">takeUntilTimeout</span><span class=\"token punctuation\">(</span>\n        Carbon<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">createFromTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LARAVEL_START</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'minutes'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span>fn <span class=\"token punctuation\">(</span><span class=\"token variable\">$invoice</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$invoice</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-tapEach\"><span class=\"link\"><code>tapEach()</code></span></h4>\n    <p>Si bien el <code>each</code>método llama a la devolución de llamada dada para cada elemento de la colección de inmediato, el <code>tapEach</code>método solo llama a la devolución de llamada dada a medida que los elementos se extraen de la lista uno por uno:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Nothing has been dumped so far...</span>\n<span class=\"token variable\">$lazyCollection</span> <span class=\"token operator\">=</span> LazyCollection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">times</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INF</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">tapEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Three items are dumped...</span>\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$lazyCollection</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span></code></pre>\n    <p></p>\n    <h4 id=\"method-remember\"><span class=\"link\"><code>remember()</code></span></h4>\n    <p>El <code>remember</code>método devuelve una nueva colección diferida que recordará los valores que ya se han enumerado y no los recuperará de nuevo en las enumeraciones de colecciones posteriores:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// No query has been executed yet...</span>\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">cursor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">remember</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The query is executed...</span>\n<span class=\"token comment\">// The first 5 users are hydrated from the database...</span>\n<span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// First 5 users come from the collection's cache...</span>\n<span class=\"token comment\">// The rest are hydrated from the database...</span>\n<span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div>"
    },
    {
        "title": "Compilación de activos",
        "subtitle": "LARAVEL AVANZADO",
        "contenido": "<div>\n    <h1>Compilación de activos (mezcla)</h1>\n    <p></p>\n    <h2><span class=\"link\">Introducción</span></h2>\n    <p><span class=\"link\">Laravel Mix</span> , un paquete desarrollado por el creador de <span class=\"link\">Laracasts</span> Jeffrey Way, proporciona una API fluida para definir los pasos de compilación del <span class=\"link\">paquete web</span> para su aplicación Laravel utilizando varios preprocesadores CSS y JavaScript comunes.</p>\n    <p>En otras palabras, Mix hace que sea muy fácil compilar y minimizar los archivos CSS y JavaScript de su aplicación. A través del encadenamiento de métodos simple, puede definir con fluidez su canalización de activos. Por ejemplo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mix<span class=\"token punctuation\">.</span><span class=\"token function\">js</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'resources/js/app.js'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'public/js'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">postCss</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'resources/css/app.css'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'public/css'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si alguna vez ha estado confundido y abrumado por comenzar con la compilación de paquetes web y activos, le encantará Laravel Mix. Sin embargo, no es necesario que lo utilice mientras desarrolla su aplicación; puede utilizar cualquier herramienta de canalización de activos que desee, o incluso ninguna.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si necesita una ventaja para comenzar a construir su aplicación con Laravel y <span class=\"link\">Tailwind CSS</span> , consulte uno de nuestros <span class=\"link\">kits de inicio de aplicaciones</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h2 id=\"installation\"><span class=\"link\">Instalación y configuración</span></h2>\n    <p></p>\n    <h4 id=\"installing-node\"><span class=\"link\">Instalando Node</span></h4>\n    <p>Antes de ejecutar Mix, primero debe asegurarse de que Node.js y NPM estén instalados en su máquina:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">node <span class=\"token operator\">-</span>v\nnpm <span class=\"token operator\">-</span>v</code></pre>\n    <p>Puede instalar fácilmente la última versión de Node y NPM utilizando instaladores gráficos simples <span class=\"link\">del sitio web oficial de Node</span> . O, si está utilizando <span class=\"link\">Laravel Sail</span> , puede invocar Node y NPM a través de Sail:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>sail node <span class=\"token operator\">-</span>v\n<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>sail npm <span class=\"token operator\">-</span>v</code></pre>\n    <p></p>\n    <h4 id=\"installing-laravel-mix\"><span class=\"link\">Instalación de Laravel Mix</span></h4>\n    <p>El único paso restante es instalar Laravel Mix. Dentro de una nueva instalación de Laravel, encontrará un <code>package.json</code>archivo en la raíz de la estructura de su directorio. El <code>package.json</code>archivo predeterminado ya incluye todo lo que necesita para comenzar a usar Laravel Mix. Piense en este archivo como su <code>composer.json</code>archivo, excepto que define dependencias de nodo en lugar de dependencias de PHP. Puede instalar las dependencias a las que hace referencia ejecutando:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">npm install</code></pre>\n    <p></p>\n    <h2 id=\"running-mix\"><span class=\"link\">Mezcla de ejecución</span></h2>\n    <p>Mix es una capa de configuración en la parte superior del <span class=\"link\">paquete web</span> , por lo que para ejecutar sus tareas de Mix solo necesita ejecutar uno de los scripts NPM que se incluyen en el <code>package.json</code>archivo Laravel predeterminado . Cuando ejecute los scripts <code>dev</code>o <code>production</code>, todos los activos de CSS y JavaScript de su aplicación se compilarán y colocarán en el <code>public</code>directorio de su aplicación :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Run all Mix tasks...</span>\nnpm run dev\n\n<span class=\"token comment\">// Run all Mix tasks and minify output...</span>\nnpm run prod</code></pre>\n    <p></p>\n    <h4 id=\"watching-assets-for-changes\"><span class=\"link\">Observando los activos en busca de cambios</span></h4>\n    <p>El <code>npm run watch</code>comando continuará ejecutándose en su terminal y observará todos los archivos CSS y JavaScript relevantes para ver si hay cambios. Webpack recompilará automáticamente sus activos cuando detecte un cambio en uno de estos archivos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">npm run watch</code></pre>\n    <p>Es posible que Webpack no pueda detectar los cambios en sus archivos en ciertos entornos de desarrollo local. Si este es el caso en su sistema, considere usar el <code>watch-poll</code>comando:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">npm run watch<span class=\"token operator\">-</span>poll</code></pre>\n    <p></p>\n    <h2 id=\"working-with-stylesheets\"><span class=\"link\">Trabajar con hojas de estilo</span></h2>\n    <p>El <code>webpack.mix.js</code>archivo de su aplicación es su punto de entrada para toda la compilación de activos. Piense en ello como un envoltorio de configuración ligero alrededor del <span class=\"link\">paquete web</span> . Las tareas mixtas se pueden encadenar para definir exactamente cómo se deben compilar sus activos.</p>\n    <p></p>\n    <h3 id=\"tailwindcss\"><span class=\"link\">Tailwind CSS</span></h3>\n    <p><span class=\"link\">Tailwind CSS</span> es un marco moderno y de utilidad para crear sitios increíbles sin tener que abandonar su HTML. Veamos cómo comenzar a usarlo en un proyecto de Laravel con Laravel Mix. Primero, deberíamos instalar Tailwind usando NPM y generar nuestro archivo de configuración Tailwind:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">npm install\n\nnpm install <span class=\"token operator\">-</span><span class=\"token constant\">D</span> tailwindcss\n\nnpx tailwindcss init</code></pre>\n    <p>El <code>init</code>comando generará un <code>tailwind.config.js</code>archivo. Dentro de este archivo, puede configurar las rutas a todas las plantillas de su aplicación y JavaScript para que Tailwind pueda modificar los estilos no utilizados al optimizar su CSS para la producción:</p>\n    <pre class=\" language-js\"><code class=\" language-js\">purge<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'./storage/framework/views/*.php'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'./resources/**/*.blade.php'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'./resources/**/*.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'./resources/**/*.vue'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    <p>A continuación, debe agregar cada una de las \"capas\" de Tailwind al <code>resources/css/app.css</code>archivo de su aplicación :</p>\n    <pre class=\" language-css\"><code class=\" language-css\"><span class=\"token atrule\"><span class=\"token rule\">@tailwind</span> base<span class=\"token punctuation\">;</span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@tailwind</span> components<span class=\"token punctuation\">;</span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@tailwind</span> utilities<span class=\"token punctuation\">;</span></span></code></pre>\n    <p>Una vez que haya configurado las capas de Tailwind, estará listo para actualizar el <code>webpack.mix.js</code>archivo de su aplicación para compilar su CSS con tecnología Tailwind:</p>\n    <pre class=\" language-js\"><code class=\" language-js\">mix<span class=\"token punctuation\">.</span><span class=\"token function\">js</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resources/js/app.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'public/js'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">postCss</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resources/css/app.css'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'public/css'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tailwindcss'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Finalmente, debe hacer referencia a su hoja de estilo en la plantilla de diseño principal de su aplicación. Muchas aplicaciones optan por almacenar esta plantilla en <code>resources/views/layouts/app.blade.php</code>. Además, asegúrese de agregar la <code>meta</code>etiqueta de ventana gráfica receptiva si aún no está presente:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/css/app.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    <p></p>\n    <h3 id=\"postcss\"><span class=\"link\">PostCSS</span></h3>\n    <p><span class=\"link\">PostCSS</span> , una poderosa herramienta para transformar su CSS, se incluye con Laravel Mix <span class=\"link\">listo para usar</span> . De forma predeterminada, Mix aprovecha el popular complemento <span class=\"link\">Autoprefixer</span> para aplicar automáticamente todos los prefijos de proveedores CSS3 necesarios. Sin embargo, puede agregar cualquier complemento adicional que sea apropiado para su aplicación.</p>\n    <p>Primero, instale el complemento deseado a través de NPM e inclúyalo en su matriz de complementos cuando llame al <code>postCss</code>método de Mix . El <code>postCss</code>método acepta la ruta a su archivo CSS como su primer argumento y el directorio donde se debe colocar el archivo compilado como su segundo argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mix<span class=\"token punctuation\">.</span><span class=\"token function\">postCss</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'resources/css/app.css'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'public/css'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'postcss-custom-properties'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>O puede ejecutar <code>postCss</code>sin complementos adicionales para lograr una compilación y minificación simple de CSS:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mix<span class=\"token punctuation\">.</span><span class=\"token function\">postCss</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'resources/css/app.css'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'public/css'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"sass\"><span class=\"link\">Hablar con descaro a</span></h3>\n    <p>El <code>sass</code>método le permite compilar <span class=\"link\">Sass</span> en CSS que los navegadores web puedan entender. El <code>sass</code>método acepta la ruta a su archivo Sass como su primer argumento y el directorio donde se debe colocar el archivo compilado como su segundo argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mix<span class=\"token punctuation\">.</span><span class=\"token function\">sass</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'resources/sass/app.scss'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'public/css'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede compilar varios archivos Sass en sus propios archivos CSS respectivos e incluso personalizar el directorio de salida del CSS resultante llamando al <code>sass</code>método varias veces:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mix<span class=\"token punctuation\">.</span><span class=\"token function\">sass</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'resources/sass/app.sass'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'public/css'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">sass</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'resources/sass/admin.sass'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'public/css/admin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"url-processing\"><span class=\"link\">Procesamiento de URL</span></h3>\n    <p>Debido a que Laravel Mix se basa en el paquete web, es importante comprender algunos conceptos del paquete web. Para la compilación de CSS, webpack reescribirá y optimizará cualquier <code>url()</code>llamada dentro de sus hojas de estilo. Si bien esto inicialmente puede sonar extraño, es una funcionalidad increíblemente poderosa. Imagina que queremos compilar Sass que incluye una URL relativa a una imagen:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token punctuation\">.</span>example <span class=\"token punctuation\">{</span>\n    background<span class=\"token punctuation\">:</span> <span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'../images/example.png'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Las rutas absolutas para cualquier dado <code>url()</code>se excluirán de la reescritura de URL. Por ejemplo, <code>url('/images/thing.png')</code>o <code>url('http://example.com/images/thing.png')</code>no se modificará.</p></p></div>\n    </blockquote>\n    <p>De forma predeterminada, Laravel Mix y el paquete web lo encontrarán <code>example.png</code>, lo copiarán en su <code>public/images</code>carpeta y luego lo reescribirán <code>url()</code>dentro de su hoja de estilo generada. Como tal, su CSS compilado será:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token punctuation\">.</span>example <span class=\"token punctuation\">{</span>\n    background<span class=\"token punctuation\">:</span> <span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token operator\">/</span>images<span class=\"token operator\">/</span>example<span class=\"token punctuation\">.</span>png<span class=\"token operator\">?</span>d41d8cd98f00b204e9800998ecf8427e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Por muy útil que sea esta función, es posible que su estructura de carpetas existente ya esté configurada de la manera que desee. Si este es el caso, puede deshabilitar la <code>url()</code>reescritura de esta manera:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mix<span class=\"token punctuation\">.</span><span class=\"token function\">sass</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'resources/sass/app.scss'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'public/css'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">options</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    processCssUrls<span class=\"token punctuation\">:</span> <span class=\"token boolean constant\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Con esta adición a su <code>webpack.mix.js</code>archivo, Mix ya no coincidirá con ninguno <code>url()</code>o copiará activos en su directorio público. En otras palabras, el CSS compilado se verá exactamente como lo escribió originalmente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token punctuation\">.</span>example <span class=\"token punctuation\">{</span>\n    background<span class=\"token punctuation\">:</span> <span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"../images/thing.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h3 id=\"css-source-maps\"><span class=\"link\">Mapas de origen</span></h3>\n    <p>Aunque están deshabilitados de forma predeterminada, los mapas de origen se pueden activar llamando al <code>mix.sourceMaps()</code>método en su <code>webpack.mix.js</code>archivo. Aunque viene con un costo de compilación / rendimiento, esto proporcionará información de depuración adicional a las herramientas de desarrollo de su navegador cuando utilice activos compilados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mix<span class=\"token punctuation\">.</span><span class=\"token function\">js</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'resources/js/app.js'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'public/js'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">sourceMaps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"style-of-source-mapping\"><span class=\"link\">Estilo de mapeo de fuentes</span></h4>\n    <p>Webpack ofrece una variedad de <span class=\"link\">estilos de mapeo</span> de <span class=\"link\">fuentes</span> . De forma predeterminada, el estilo de mapeo de origen de Mix está configurado en <code>eval-source-map</code>, lo que proporciona un tiempo de reconstrucción rápido. Si desea cambiar el estilo de mapeo, puede hacerlo usando el <code>sourceMaps</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">let productionSourceMaps <span class=\"token operator\">=</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">;</span>\n\nmix<span class=\"token punctuation\">.</span><span class=\"token function\">js</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'resources/js/app.js'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'public/js'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">sourceMaps</span><span class=\"token punctuation\">(</span>productionSourceMaps<span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'source-map'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"working-with-scripts\"><span class=\"link\">Trabajando con JavaScript</span></h2>\n    <p>Mix proporciona varias funciones para ayudarlo a trabajar con sus archivos JavaScript, como la compilación de ECMAScript moderno, la agrupación de módulos, la minificación y la concatenación de archivos JavaScript sin formato. Aún mejor, todo esto funciona a la perfección, sin requerir una onza de configuración personalizada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mix<span class=\"token punctuation\">.</span><span class=\"token function\">js</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'resources/js/app.js'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'public/js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Con esta única línea de código, ahora puede aprovechar:</p>\n    <div class=\"content-list\">\n        <ul>\n            <li>La última sintaxis de EcmaScript.</li>\n            <li>Módulos</li>\n            <li>Minificación para entornos de producción.</li>\n        </ul>\n    </div>\n    <p></p>\n    <h3 id=\"vue\"><span class=\"link\">Vue</span></h3>\n    <p>Mix instalará automáticamente los complementos de Babel necesarios para el soporte de compilación de componentes de un solo archivo de Vue cuando se utiliza el <code>vue</code>método. No se requiere más configuración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mix<span class=\"token punctuation\">.</span><span class=\"token function\">js</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'resources/js/app.js'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'public/js'</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Una vez que se haya compilado su JavaScript, puede hacer referencia a él en su aplicación:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- ... --&gt;</span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/js/app.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    <p></p>\n    <h3 id=\"react\"><span class=\"link\">Reaccionar</span></h3>\n    <p>Mix puede instalar automáticamente los complementos de Babel necesarios para el soporte de React. Para comenzar, agregue una llamada al <code>react</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mix<span class=\"token punctuation\">.</span><span class=\"token function\">js</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'resources/js/app.jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'public/js'</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">react</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Detrás de escena, Mix descargará e incluirá el <code>babel-preset-react</code>complemento de Babel apropiado . Una vez que se haya compilado su JavaScript, puede hacer referencia a él en su aplicación:</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- ... --&gt;</span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/js/app.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span></code></pre>\n    <p></p>\n    <h3 id=\"vendor-extraction\"><span class=\"link\">Extracción de proveedores</span></h3>\n    <p>Una posible desventaja de agrupar todo el JavaScript específico de su aplicación con las bibliotecas de su proveedor, como React y Vue, es que dificulta el almacenamiento en caché a largo plazo. Por ejemplo, una sola actualización del código de su aplicación obligará al navegador a volver a descargar todas las bibliotecas de su proveedor, incluso si no han cambiado.</p>\n    <p>Si tiene la intención de realizar actualizaciones frecuentes en el JavaScript de su aplicación, debería considerar la posibilidad de extraer todas las bibliotecas de su proveedor en su propio archivo. De esta manera, un cambio en el código de su aplicación no afectará el almacenamiento en caché de su <code>vendor.js</code>archivo grande . El <code>extract</code>método de Mix hace que esto sea muy sencillo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mix<span class=\"token punctuation\">.</span><span class=\"token function\">js</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'resources/js/app.js'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'public/js'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">extract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'vue'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n    <p>El <code>extract</code>método acepta una matriz de todas las bibliotecas o módulos que desea extraer en un <code>vendor.js</code>archivo. Usando el fragmento de arriba como ejemplo, Mix generará los siguientes archivos:</p>\n    <div class=\"content-list\">\n        <ul>\n            <li><code>public/js/manifest.js</code>: <em>El tiempo de ejecución del manifiesto de Webpack</em></li>\n            <li><code>public/js/vendor.js</code>: Las <em>bibliotecas de su proveedor</em></li>\n            <li><code>public/js/app.js</code>: <em>Su código de aplicación</em></li>\n        </ul>\n    </div>\n    <p>Para evitar errores de JavaScript, asegúrese de cargar estos archivos en el orden correcto:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"/js/manifest.js\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"/js/vendor.js\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"/js/app.js\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span></code></pre>\n    <p></p>\n    <h3 id=\"custom-webpack-configuration\"><span class=\"link\">Configuración de paquete web personalizado</span></h3>\n    <p>Ocasionalmente, es posible que deba modificar manualmente la configuración del paquete web subyacente. Por ejemplo, es posible que tenga un cargador o complemento especial al que se debe hacer referencia.</p>\n    <p>Mix proporciona un <code>webpackConfig</code>método útil que le permite fusionar cualquier modificación breve de configuración de Webpack. Esto es particularmente atractivo, ya que no requiere que copie y mantenga su propia copia del <code>webpack.config.js</code>archivo. El <code>webpackConfig</code>método acepta un objeto, que debe contener cualquier <span class=\"link\">configuración específica de Webpack</span> que desee aplicar.</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mix<span class=\"token punctuation\">.</span><span class=\"token function\">webpackConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'vendor/laravel/spark/resources/assets/js'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"versioning-and-cache-busting\"><span class=\"link\">Control de versiones / Cache Busting</span></h2>\n    <p>Muchos desarrolladores agregan un sufijo a sus activos compilados con una marca de tiempo o un token único para obligar a los navegadores a cargar los activos nuevos en lugar de entregar copias obsoletas del código. Mix puede manejar esto automáticamente por usted usando el <code>version</code>método.</p>\n    <p>El <code>version</code>método agregará un hash único a los nombres de archivo de todos los archivos compilados, lo que permite una eliminación de caché más conveniente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mix<span class=\"token punctuation\">.</span><span class=\"token function\">js</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'resources/js/app.js'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'public/js'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Después de generar el archivo versionado, no sabrá el nombre exacto del archivo. Por lo tanto, debe usar la <code>mix</code>función global de Laravel dentro de sus <span class=\"link\">vistas</span> para cargar el activo con el hash apropiado. La <code>mix</code>función determinará automáticamente el nombre actual del archivo hash:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"{{ mix('/js/app.js') }}\"</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span></code></pre>\n    <p>Debido a que los archivos versionados generalmente no son necesarios en el desarrollo, puede indicarle al proceso de versionado que solo se ejecute durante <code>npm run prod</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mix<span class=\"token punctuation\">.</span><span class=\"token function\">js</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'resources/js/app.js'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'public/js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mix<span class=\"token punctuation\">.</span><span class=\"token function\">inProduction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mix<span class=\"token punctuation\">.</span><span class=\"token function\">version</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h4 id=\"custom-mix-base-urls\"><span class=\"link\">URL de base de mezcla personalizada</span></h4>\n    <p>Si sus activos compilados de Mix se implementan en una CDN separada de su aplicación, deberá cambiar la URL base generada por la <code>mix</code>función. Puede hacerlo agregando una <code>mix_url</code>opción de <code>config/app.php</code>configuración al archivo de configuración de su aplicación :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'mix_url'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'MIX_ASSET_URL'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span></code></pre>\n    <p>Después de configurar la URL mixta, la <code>mix</code>función agregará un prefijo a la URL configurada al generar URL para activos:</p>\n    <pre class=\" language-bash\"><code class=\" language-bash\">https://cdn.example.com/js/app.js?id<span class=\"token operator\">=</span>1964becbdd96414518cd</code></pre>\n    <p></p>\n    <h2 id=\"browsersync-reloading\"><span class=\"link\">Recarga de Browsersync</span></h2>\n    <p><span class=\"link\">BrowserSync</span> puede monitorear automáticamente sus archivos en busca de cambios e inyectar sus cambios en el navegador sin requerir una actualización manual. Puede habilitar el soporte para esto llamando al <code>mix.browserSync()</code>método:</p>\n    <pre class=\" language-js\"><code class=\" language-js\">mix<span class=\"token punctuation\">.</span><span class=\"token function\">browserSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'laravel.test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p><span class=\"link\">Las opciones de BrowserSync</span> se pueden especificar pasando un objeto JavaScript al <code>browserSync</code>método:</p>\n    <pre class=\" language-js\"><code class=\" language-js\">mix<span class=\"token punctuation\">.</span><span class=\"token function\">browserSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    proxy<span class=\"token operator\">:</span> <span class=\"token string\">'laravel.test'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>A continuación, inicie el servidor de desarrollo de webpack usando el <code>npm run watch</code>comando. Ahora, cuando modifica una secuencia de comandos o un archivo PHP, puede ver cómo el navegador actualiza instantáneamente la página para reflejar sus cambios.</p>\n    <p></p>\n    <h2 id=\"environment-variables\"><span class=\"link\">Variables de entorno</span></h2>\n    <p>Puede inyectar variables de entorno en su <code>webpack.mix.js</code>secuencia de comandos prefijando una de las variables de entorno en su <code>.env</code>archivo con <code>MIX_</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">MIX_SENTRY_DSN_PUBLIC</span><span class=\"token operator\">=</span>http<span class=\"token punctuation\">:</span><span class=\"token comment\">//example.com</span></code></pre>\n    <p>Una vez definida la variable en su <code>.env</code>archivo, puede acceder a ella a través del <code>process.env</code>objeto. Sin embargo, deberá reiniciar la tarea si el valor de la variable de entorno cambia mientras la tarea se está ejecutando:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">MIX_SENTRY_DSN_PUBLIC</span></code></pre>\n    <p></p>\n    <h2 id=\"notifications\"><span class=\"link\">Notificaciones</span></h2>\n    <p>Cuando esté disponible, Mix mostrará automáticamente las notificaciones del sistema operativo al compilar, lo que le proporcionará información instantánea sobre si la compilación fue exitosa o no. Sin embargo, puede haber casos en los que prefiera deshabilitar estas notificaciones. Un ejemplo de ello podría ser la activación de Mix en su servidor de producción. Las notificaciones se pueden desactivar mediante el <code>disableNotifications</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mix<span class=\"token punctuation\">.</span><span class=\"token function\">disableNotifications</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div>"
    },
    {
        "title": "Eventos",
        "subtitle": "LARAVEL AVANZADO",
        "contenido": "<div>\n    <h1>Eventos</h1>\n    <p></p>\n    <h2><span class=\"link\">Introducción</span></h2>\n    <p>Los eventos de Laravel proporcionan una implementación de patrón de observador simple, lo que le permite suscribirse y escuchar varios eventos que ocurren dentro de su aplicación. Las clases de eventos generalmente se almacenan en el <code>app/Events</code>directorio, mientras que sus oyentes se almacenan en <code>app/Listeners</code>. No se preocupe si no ve estos directorios en su aplicación, ya que se crearán para usted a medida que genere eventos y oyentes mediante los comandos de la consola Artisan.</p>\n    <p>Los eventos sirven como una excelente manera de desacoplar varios aspectos de su aplicación, ya que un solo evento puede tener múltiples oyentes que no dependen unos de otros. Por ejemplo, es posible que desee enviar una notificación de Slack a su usuario cada vez que se envíe un pedido. En lugar de acoplar su código de procesamiento de pedidos a su código de notificación de Slack, puede generar un <code>App\\Events\\OrderShipped</code>evento que un oyente puede recibir y utilizar para enviar una notificación de Slack.</p>\n    <p></p>\n    <h2 id=\"registering-events-and-listeners\"><span class=\"link\">Registro de eventos y oyentes</span></h2>\n    <p>El <code>App\\Providers\\EventServiceProvider</code>incluido con su aplicación Laravel proporciona un lugar conveniente para registrar todos los oyentes de eventos de su aplicación. La <code>listen</code>propiedad contiene una matriz de todos los eventos (claves) y sus oyentes (valores). Puede agregar tantos eventos a esta matriz como requiera su aplicación. Por ejemplo, agreguemos un <code>OrderShipped</code>evento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>OrderShipped</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Listeners<span class=\"token punctuation\">\\</span>SendShipmentNotification</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * The event listener mappings for the application.\n *\n * @var array\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$listen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    OrderShipped<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        SendShipmentNotification<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>El <code>event:list</code>comando puede usarse para mostrar una lista de todos los eventos y oyentes registrados por su aplicación.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"generating-events-and-listeners\"><span class=\"link\">Generación de eventos y oyentes</span></h3>\n    <p>Por supuesto, la creación manual de archivos para cada evento y oyente es engorrosa. En su lugar, agregue oyentes y eventos a su <code>EventServiceProvider</code>y use el <code>event:generate</code>comando Artisan. Este comando generará cualquier evento u oyente que se enumere en su <code>EventServiceProvider</code>que aún no exista:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan event<span class=\"token punctuation\">:</span>generate</code></pre>\n    <p>Alternativamente, puede usar los comandos <code>make:event</code>y <code>make:listener</code>Artisan para generar eventos y oyentes individuales:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>event PodcastProcessed\n\nphp artisan make<span class=\"token punctuation\">:</span>listener SendPodcastNotification <span class=\"token operator\">--</span>event<span class=\"token operator\">=</span>PodcastProcessed</code></pre>\n    <p></p>\n    <h3 id=\"manually-registering-events\"><span class=\"link\">Registro manual de eventos</span></h3>\n    <p>Normalmente, los eventos deben registrarse a través de la <code>EventServiceProvider</code> <code>$listen</code>matriz; sin embargo, también puede registrar oyentes de eventos basados \u200B\u200Ben clases o cierres manualmente en el <code>boot</code>método de su <code>EventServiceProvider</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>PodcastProcessed</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Listeners<span class=\"token punctuation\">\\</span>SendPodcastNotification</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Event</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Register any other events for your application.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Event<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>\n        PodcastProcessed<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span>SendPodcastNotification<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'handle'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Event<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>PodcastProcessed <span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h4 id=\"queuable-anonymous-event-listeners\"><span class=\"link\">Oyentes de eventos anónimos que se pueden poner en cola</span></h4>\n    <p>Al registrar los oyentes de eventos basados \u200B\u200Ben el cierre manualmente, puede envolver el cierre del oyente dentro de la <code>Illuminate\\Events\\queueable</code>función para indicar a Laravel que ejecute el oyente usando la <span class=\"link\">cola</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>PodcastProcessed</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">function</span> Illuminate\\<span class=\"token package\">Events<span class=\"token punctuation\">\\</span>queueable</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Event</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Register any other events for your application.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Event<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token function\">queueable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>PodcastProcessed <span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Al igual que los trabajos en espera, puede utilizar los <code>onConnection</code>, <code>onQueue</code>y <code>delay</code>métodos para personalizar la ejecución del oyente en cola:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Event<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token function\">queueable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>PodcastProcessed <span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">onConnection</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'redis'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">onQueue</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'podcasts'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">addSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea manejar fallas anónimas del oyente en cola, puede proporcionar un cierre al <code>catch</code>método mientras define el <code>queueable</code>oyente. Este cierre recibirá la instancia del evento y la <code>Throwable</code>instancia que causó la falla del oyente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>PodcastProcessed</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">function</span> Illuminate\\<span class=\"token package\">Events<span class=\"token punctuation\">\\</span>queueable</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Event</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Throwable</span><span class=\"token punctuation\">;</span>\n\nEvent<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token function\">queueable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>PodcastProcessed <span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>PodcastProcessed <span class=\"token variable\">$event</span><span class=\"token punctuation\">,</span> Throwable <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The queued listener failed...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"wildcard-event-listeners\"><span class=\"link\">Oyentes de eventos comodín</span></h4>\n    <p>Incluso puede registrar oyentes utilizando <code>*</code>como parámetro comodín, lo que le permite capturar varios eventos en el mismo oyente. Los oyentes comodín reciben el nombre del evento como primer argumento y toda la matriz de datos del evento como segundo argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Event<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'event.*'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$eventName</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"event-discovery\"><span class=\"link\">Descubrimiento de eventos</span></h3>\n    <p>En lugar de registrar eventos y oyentes manualmente en la <code>$listen</code>matriz del <code>EventServiceProvider</code>, puede habilitar el descubrimiento automático de eventos. Cuando el descubrimiento de eventos está habilitado, Laravel buscará y registrará automáticamente sus eventos y oyentes escaneando el <code>Listeners</code>directorio de su aplicación . Además, se registrarán todos los eventos definidos explícitamente que se enumeran en el <code>EventServiceProvider</code>.</p>\n    <p>Laravel encuentra oyentes de eventos escaneando las clases de oyentes usando los servicios de reflexión de PHP. Cuando Laravel encuentra cualquier método de clase de escucha que comience con <code>handle</code>, Laravel registrará esos métodos como detectores de eventos para el evento que está insinuado en la firma del método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>PodcastProcessed</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SendPodcastNotification</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Handle the given event.\n     *\n     * @param  \\App\\Events\\PodcastProcessed  $event\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>PodcastProcessed <span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>El descubrimiento de eventos está deshabilitado de forma predeterminada, pero puede habilitarlo anulando el <code>shouldDiscoverEvents</code>método de su aplicación <code>EventServiceProvider</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Determine if events and listeners should be automatically discovered.\n *\n * @return bool\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">shouldDiscoverEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>De forma predeterminada, <code>app/Listeners</code>se analizarán todos los oyentes dentro del directorio de su aplicación . Si desea definir directorios adicionales para escanear, puede anular el <code>discoverEventsWithin</code>método en su <code>EventServiceProvider</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the listener directories that should be used to discover events.\n *\n * @return array\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">discoverEventsWithin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">app</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Listeners'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h4 id=\"event-discovery-in-production\"><span class=\"link\">Descubrimiento de eventos en producción</span></h4>\n    <p>En producción, no es eficiente que el marco escanee a todos sus oyentes en cada solicitud. Por lo tanto, durante su proceso de implementación, debe ejecutar el <code>event:cache</code>comando Artisan para almacenar en caché un manifiesto de todos los eventos y oyentes de su aplicación. El marco utilizará este manifiesto para acelerar el proceso de registro del evento. El <code>event:clear</code>comando puede usarse para destruir la caché.</p>\n    <p></p>\n    <h2 id=\"defining-events\"><span class=\"link\">Definición de eventos</span></h2>\n    <p>Una clase de evento es esencialmente un contenedor de datos que contiene la información relacionada con el evento. Por ejemplo, supongamos que un <code>App\\Events\\OrderShipped</code>evento recibe un objeto <span class=\"link\">ORM Eloquent</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Events</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Order</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Broadcasting<span class=\"token punctuation\">\\</span>InteractsWithSockets</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>Dispatchable</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Queue<span class=\"token punctuation\">\\</span>SerializesModels</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderShipped</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> <span class=\"token package\">Dispatchable</span><span class=\"token punctuation\">,</span> InteractsWithSockets<span class=\"token punctuation\">,</span> SerializesModels<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * The order instance.\n     *\n     * @var \\App\\Models\\Order\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$order</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Create a new event instance.\n     *\n     * @param  \\App\\Models\\Order  $order\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span>Order <span class=\"token variable\">$order</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">order</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$order</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Como puede ver, esta clase de evento no contiene lógica. Es un contenedor para la <code>App\\Models\\Order</code>instancia que se compró. El <code>SerializesModels</code>rasgo utilizado por el evento serializará con gracia cualquier modelo de Eloquent si el objeto de evento se serializa usando la <code>serialize</code>función de PHP , como cuando se utilizan <span class=\"link\">oyentes en cola</span> .</p>\n    <p></p>\n    <h2 id=\"defining-listeners\"><span class=\"link\">Definición de oyentes</span></h2>\n    <p>A continuación, echemos un vistazo al oyente de nuestro evento de ejemplo. Los detectores de eventos reciben instancias de eventos en su <code>handle</code>método. Los comandos <code>event:generate</code>y <code>make:listener</code>Artisan importarán automáticamente la clase de evento adecuada y teclearán el evento en el <code>handle</code>método. Dentro del <code>handle</code>método, puede realizar las acciones necesarias para responder al evento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Listeners</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>OrderShipped</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SendShipmentNotification</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Create the event listener.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Handle the event.\n     *\n     * @param  \\App\\Events\\OrderShipped  $event\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>OrderShipped <span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Access the order using $event-&gt;order...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Los oyentes de eventos también pueden indicar las dependencias que necesiten en sus constructores. Todos los detectores de eventos se resuelven a través del <span class=\"link\">contenedor de servicios de</span> Laravel , por lo que las dependencias se inyectarán automáticamente.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"stopping-the-propagation-of-an-event\"><span class=\"link\">Detener la propagación de un evento</span></h4>\n    <p>A veces, es posible que desee detener la propagación de un evento a otros oyentes. Puede hacerlo regresando <code>false</code>del <code>handle</code>método de su oyente .</p>\n    <p></p>\n    <h2 id=\"queued-event-listeners\"><span class=\"link\">Oyentes de eventos en cola</span></h2>\n    <p>Poner en cola a los oyentes puede ser beneficioso si su oyente va a realizar una tarea lenta, como enviar un correo electrónico o realizar una solicitud HTTP. Antes de usar escuchas en cola, asegúrese de <span class=\"link\">configurar su cola</span> e iniciar un trabajador de cola en su servidor o entorno de desarrollo local.</p>\n    <p>Para especificar que un oyente debe estar en cola, agregue la <code>ShouldQueue</code>interfaz a la clase de oyente. Los oyentes generados por los comandos <code>event:generate</code>y <code>make:listener</code>Artisan ya tienen esta interfaz importada en el espacio de nombres actual para que pueda usarla de inmediato:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Listeners</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>OrderShipped</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Queue<span class=\"token punctuation\">\\</span>ShouldQueue</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SendShipmentNotification</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ShouldQueue</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>¡Eso es todo! Ahora, cuando se envía un evento manejado por este oyente, el despachador de eventos pondrá en cola automáticamente al oyente utilizando el <span class=\"link\">sistema de cola</span> de Laravel . Si no se producen excepciones cuando la cola ejecuta el oyente, el trabajo en cola se eliminará automáticamente una vez que haya terminado de procesarse.</p>\n    <p></p>\n    <h4 id=\"customizing-the-queue-connection-queue-name\"><span class=\"link\">Personalizar la conexión de la cola y el nombre de la cola</span></h4>\n    <p>Si desea personalizar la conexión de cola, cola de nombre, o cola de tiempo de retardo de un detector de eventos, es posible definir la <code>$connection</code>, <code>$queue</code>o <code>$delay</code>las propiedades de su clase de escucha:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Listeners</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>OrderShipped</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Queue<span class=\"token punctuation\">\\</span>ShouldQueue</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SendShipmentNotification</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ShouldQueue</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The name of the connection the job should be sent to.\n     *\n     * @var string|null\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$connection</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'sqs'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * The name of the queue the job should be sent to.\n     *\n     * @var string|null\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$queue</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'listeners'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * The time (seconds) before the job should be processed.\n     *\n     * @var int\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$delay</span> <span class=\"token operator\">=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Si desea definir la conexión de cola del oyente o el nombre de la cola en tiempo de ejecución, puede definir <code>viaConnection</code>o <code>viaQueue</code>métodos en el oyente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the name of the listener's queue connection.\n *\n * @return string\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">viaConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'sqs'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Get the name of the listener's queue.\n *\n * @return string\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">viaQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'listeners'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h4 id=\"conditionally-queueing-listeners\"><span class=\"link\">Oyentes en cola condicionalmente</span></h4>\n    <p>A veces, es posible que deba determinar si un oyente debe estar en cola en función de algunos datos que solo están disponibles en tiempo de ejecución. Para lograr esto, <code>shouldQueue</code>se puede agregar un método a un oyente para determinar si el oyente debe estar en cola. Si el <code>shouldQueue</code>método regresa <code>false</code>, el oyente no se ejecutará:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Listeners</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>OrderCreated</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Queue<span class=\"token punctuation\">\\</span>ShouldQueue</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RewardGiftCard</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ShouldQueue</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Reward a gift card to the customer.\n     *\n     * @param  \\App\\Events\\OrderCreated  $event\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>OrderCreated <span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Determine whether the listener should be queued.\n     *\n     * @param  \\App\\Events\\OrderCreated  $event\n     * @return bool\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">shouldQueue</span><span class=\"token punctuation\">(</span>OrderCreated <span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$event</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">order</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">subtotal</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p></p>\n    <h3 id=\"manually-interacting-with-the-queue\"><span class=\"link\">Interactuar manualmente con la cola</span></h3>\n    <p>Si necesita acceder manualmente a los métodos <code>delete</code>y trabajos de cola subyacentes del oyente <code>release</code>, puede hacerlo utilizando el <code>Illuminate\\Queue\\InteractsWithQueue</code>rasgo. Este rasgo se importa de forma predeterminada en los oyentes generados y proporciona acceso a estos métodos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Listeners</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>OrderShipped</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Queue<span class=\"token punctuation\">\\</span>ShouldQueue</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Queue<span class=\"token punctuation\">\\</span>InteractsWithQueue</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SendShipmentNotification</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ShouldQueue</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> <span class=\"token package\">InteractsWithQueue</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Handle the event.\n     *\n     * @param  \\App\\Events\\OrderShipped  $event\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>OrderShipped <span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p></p>\n    <h3 id=\"queued-event-listeners-and-database-transactions\"><span class=\"link\">Oyentes de eventos en cola y transacciones de bases de datos</span></h3>\n    <p>Cuando los oyentes en cola se envían dentro de las transacciones de la base de datos, la cola puede procesarlos antes de que la transacción de la base de datos se haya comprometido. Cuando esto sucede, es posible que las actualizaciones que haya realizado en los modelos o registros de la base de datos durante la transacción de la base de datos aún no se reflejen en la base de datos. Además, es posible que los modelos o registros de la base de datos creados dentro de la transacción no existan en la base de datos. Si su oyente depende de estos modelos, pueden ocurrir errores inesperados cuando se procesa el trabajo que distribuye el oyente en cola.</p>\n    <p>Si la <code>after_commit</code>opción de configuración de su conexión de cola está configurada en <code>false</code>, aún puede indicar que se debe enviar un oyente en cola en particular después de que se hayan confirmado todas las transacciones de base de datos abiertas mediante la definición de una <code>$afterCommit</code>propiedad en la clase del oyente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Listeners</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Queue<span class=\"token punctuation\">\\</span>ShouldQueue</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Queue<span class=\"token punctuation\">\\</span>InteractsWithQueue</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SendShipmentNotification</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ShouldQueue</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> <span class=\"token package\">InteractsWithQueue</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$afterCommit</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Para obtener más información sobre cómo solucionar estos problemas, consulte la documentación relacionada con los <span class=\"link\">trabajos en cola y las transacciones de la base de datos</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"handling-failed-jobs\"><span class=\"link\">Manejo de trabajos fallidos</span></h3>\n    <p>A veces, los oyentes de eventos en cola pueden fallar. Si el oyente en cola excede el número máximo de intentos según lo definido por su trabajador de cola, el <code>failed</code>método se llamará en su oyente. El <code>failed</code>método recibe la instancia del evento y el <code>Throwable</code>que causó la falla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Listeners</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>OrderShipped</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Queue<span class=\"token punctuation\">\\</span>ShouldQueue</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Queue<span class=\"token punctuation\">\\</span>InteractsWithQueue</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SendShipmentNotification</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ShouldQueue</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> <span class=\"token package\">InteractsWithQueue</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Handle the event.\n     *\n     * @param  \\App\\Events\\OrderShipped  $event\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>OrderShipped <span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Handle a job failure.\n     *\n     * @param  \\App\\Events\\OrderShipped  $event\n     * @param  \\Throwable  $exception\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">failed</span><span class=\"token punctuation\">(</span>OrderShipped <span class=\"token variable\">$event</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$exception</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p></p>\n    <h4 id=\"specifying-queued-listener-maximum-attempts\"><span class=\"link\">Especificación de intentos máximos de escucha en cola</span></h4>\n    <p>Si uno de sus oyentes en cola encuentra un error, es probable que no desee que vuelva a intentarlo indefinidamente. Por lo tanto, Laravel proporciona varias formas de especificar cuántas veces o durante cuánto tiempo se puede intentar un oyente.</p>\n    <p>Puede definir la <code>$tries</code>propiedad en su clase de oyente para especificar cuántas veces se puede intentar el oyente antes de que se considere que ha fallado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Listeners</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>OrderShipped</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Queue<span class=\"token punctuation\">\\</span>ShouldQueue</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Queue<span class=\"token punctuation\">\\</span>InteractsWithQueue</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SendShipmentNotification</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ShouldQueue</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> <span class=\"token package\">InteractsWithQueue</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * The number of times the queued listener may be attempted.\n     *\n     * @var int\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$tries</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Como alternativa a definir cuántas veces se puede intentar un oyente antes de que falle, puede definir un momento en el que ya no se debe intentar el oyente. Esto permite que un oyente intente cualquier número de veces dentro de un período de tiempo determinado. Para definir el momento en el que ya no se debe intentar un oyente, agregue un <code>retryUntil</code>método a su clase de oyente. Este método debería devolver una <code>DateTime</code>instancia:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Determine the time at which the listener should timeout.\n *\n * @return \\DateTime\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">retryUntil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">addMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h2 id=\"dispatching-events\"><span class=\"link\">Despacho de eventos</span></h2>\n    <p>Para enviar un evento, puede llamar al <code>dispatch</code>método estático en el evento. Este método está disponible en el evento por el <code>Illuminate\\Foundation\\Events\\Dispatchable</code>rasgo. Cualquier argumento que se pase al <code>dispatch</code>método se pasará al constructor del evento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>OrderShipped</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Order</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderShipmentController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Ship the given order.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">store</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$order</span> <span class=\"token operator\">=</span> Order<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">findOrFail</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">order_id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Order shipment logic...</span>\n\n        OrderShipped<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$order</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Al realizar las pruebas, puede ser útil afirmar que ciertos eventos se enviaron sin activar realmente a sus oyentes. Los <span class=\"link\">ayudantes de prueba integrados</span> de Laravel lo hacen muy fácil.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h2 id=\"event-subscribers\"><span class=\"link\">Suscriptores de eventos</span></h2>\n    <p></p>\n    <h3 id=\"writing-event-subscribers\"><span class=\"link\">Suscriptores de eventos de escritura</span></h3>\n    <p>Los suscriptores de eventos son clases que pueden suscribirse a múltiples eventos dentro de la propia clase de suscriptor, lo que le permite definir varios controladores de eventos dentro de una sola clase. Los suscriptores deben definir un <code>subscribe</code>método, al que se le pasará una instancia de despachador de eventos. Puede llamar al <code>listen</code>método en el despachador dado para registrar los detectores de eventos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Listeners</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>Login</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>Logout</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserEventSubscriber</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Handle user login events.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleUserLogin</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Handle user logout events.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleUserLogout</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Register the listeners for the subscriber.\n     *\n     * @param  \\Illuminate\\Events\\Dispatcher  $events\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$events</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$events</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>\n            Login<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span>UserEventSubscriber<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'handleUserLogin'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$events</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>\n            Logout<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span>UserEventSubscriber<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'handleUserLogout'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Si sus métodos de escucha de eventos están definidos dentro del propio suscriptor, puede que le resulte más conveniente devolver una matriz de eventos y nombres de <code>subscribe</code>métodos del método del suscriptor . Laravel determinará automáticamente el nombre de la clase del suscriptor al registrar los oyentes del evento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Listeners</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>Login</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>Logout</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserEventSubscriber</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Handle user login events.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleUserLogin</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Handle user logout events.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleUserLogout</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Register the listeners for the subscriber.\n     *\n     * @param  \\Illuminate\\Events\\Dispatcher  $events\n     * @return array\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$events</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n            Login<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'handleUserLogin'</span><span class=\"token punctuation\">,</span>\n            Logout<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'handleUserLogout'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p></p>\n    <h3 id=\"registering-event-subscribers\"><span class=\"link\">Registro de suscriptores de eventos</span></h3>\n    <p>Después de escribir el suscriptor, está listo para registrarlo con el despachador de eventos. Puede registrar suscriptores utilizando la <code>$subscribe</code>propiedad en el <code>EventServiceProvider</code>. Por ejemplo, agreguemos el <code>UserEventSubscriber</code>a la lista:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Listeners<span class=\"token punctuation\">\\</span>UserEventSubscriber</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Providers<span class=\"token punctuation\">\\</span>EventServiceProvider</span> <span class=\"token keyword\">as</span> ServiceProvider<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">EventServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The event listener mappings for the application.\n     *\n     * @var array\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$listen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * The subscriber classes to register.\n     *\n     * @var array\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$subscribe</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        UserEventSubscriber<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n</div>"
    },
    {
        "title": "Ayudantes",
        "subtitle": "LARAVEL AVANZADO",
        "contenido": "<div>\n    <h1>Ayudantes</h1>\n    <p></p>\n    <h2><span class=\"link\">Introducción</span></h2>\n    <p>Laravel incluye una variedad de funciones PHP \"auxiliares\" globales. Muchas de estas funciones son utilizadas por el propio framework; sin embargo, puede utilizarlos en sus propias aplicaciones si los encuentra convenientes.</p>\n    <p></p>\n    <h2 id=\"available-methods\"><span class=\"link\">Métodos disponibles</span></h2>\n    <style>\n    .collection-method-list > p {\n        column-count: 3; -moz-column-count: 3; -webkit-column-count: 3;\n        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n    }\n\n    .collection-method-list a {\n        display: block;\n    }\n</style>\n    <p></p>\n    <h3 id=\"arrays-and-objects-method-list\"><span class=\"link\">Matrices y objetos</span></h3>\n    <div class=\"collection-method-list\">\n        <p><span class=\"link\">Arr :: accesible</span>\n            <span class=\"link\">Arr :: agregar</span>\n            <span class=\"link\">Arr :: colapso</span>\n            <span class=\"link\">Arr :: crossÚnete</span>\n            <span class=\"link\">Arr :: dividir</span>\n            <span class=\"link\">Arr :: punto</span>\n            <span class=\"link\">Arr :: excepto</span>\n            <span class=\"link\">Arr :: existe</span>\n            <span class=\"link\">Arr :: primero</span>\n            <span class=\"link\">Arr :: aplanar</span>\n            <span class=\"link\">Arr :: olvidar</span>\n            <span class=\"link\">Arr :: obtener</span>\n            <span class=\"link\">Arr :: tiene</span>\n            <span class=\"link\">Arr :: hasAny</span>\n            <span class=\"link\">Arr :: isAssoc</span>\n            <span class=\"link\">Arr :: último</span>\n            <span class=\"link\">Arr :: solo</span>\n            <span class=\"link\">Arr :: arrancar</span>\n            <span class=\"link\">Arr :: anteponer</span>\n            <span class=\"link\">Arr :: tirar</span>\n            <span class=\"link\">Arr :: consulta</span>\n            <span class=\"link\">Arr :: aleatorio</span>\n            <span class=\"link\">Arr :: conjunto</span>\n            <span class=\"link\">Arr :: barajar</span>\n            <span class=\"link\">Arr :: ordenar</span>\n            <span class=\"link\">Arr :: sortRecursivo</span>\n            <span class=\"link\">Arr :: toCssClasses</span>\n            <span class=\"link\">Arr :: donde</span>\n            <span class=\"link\">Arr :: abrigo</span>\n            <span class=\"link\">relleno_de_datos</span>\n            <span class=\"link\">data_get</span>\n            <span class=\"link\">data_set</span>\n            <span class=\"link\">cabeza</span>\n            <span class=\"link\">último</span></p>\n    </div>\n    <p></p>\n    <h3 id=\"paths-method-list\"><span class=\"link\">Caminos</span></h3>\n    <div class=\"collection-method-list\">\n        <p><span class=\"link\">app_path</span>\n            <span class=\"link\">ruta_base</span>\n            <span class=\"link\">config_path</span>\n            <span class=\"link\">database_path</span>\n            <span class=\"link\">mezcla</span>\n            <span class=\"link\">public_path</span>\n            <span class=\"link\">resource_path</span>\n            <span class=\"link\">ruta_almacenamiento</span></p>\n    </div>\n    <p></p>\n    <h3 id=\"strings-method-list\"><span class=\"link\">Instrumentos de cuerda</span></h3>\n    <div class=\"collection-method-list\">\n        <p><span class=\"link\">__</span>\n            <span class=\"link\">class_basename</span>\n            <span class=\"link\">mi</span>\n            <span class=\"link\">preg_replace_array</span>\n            <span class=\"link\">Str :: después</span>\n            <span class=\"link\">Str :: afterLast</span>\n            <span class=\"link\">Str :: ascii</span>\n            <span class=\"link\">Str :: antes</span>\n            <span class=\"link\">Str :: beforeLast</span>\n            <span class=\"link\">Str :: entre</span>\n            <span class=\"link\">Str :: camello</span>\n            <span class=\"link\">Str :: contiene</span>\n            <span class=\"link\">Str :: containsAll</span>\n            <span class=\"link\">Str :: endsWith</span>\n            <span class=\"link\">Str :: acabado</span>\n            <span class=\"link\">Str :: es</span>\n            <span class=\"link\">Str :: isAscii</span>\n            <span class=\"link\">Str :: isUuid</span>\n            <span class=\"link\">Str :: kebab</span>\n            <span class=\"link\">Str :: longitud</span>\n            <span class=\"link\">Str :: límite</span>\n            <span class=\"link\">Str :: inferior</span>\n            <span class=\"link\">Str :: rebaja</span>\n            <span class=\"link\">Str :: OrderUuid</span>\n            <span class=\"link\">Str :: padBoth</span>\n            <span class=\"link\">Str :: padLeft</span>\n            <span class=\"link\">Str :: padRight</span>\n            <span class=\"link\">Str :: plural</span>\n            <span class=\"link\">Str :: pluralStudly</span>\n            <span class=\"link\">Str :: aleatorio</span>\n            <span class=\"link\">Str :: eliminar</span>\n            <span class=\"link\">Str :: reemplazar</span>\n            <span class=\"link\">Str :: replaceArray</span>\n            <span class=\"link\">Str :: replaceFirst</span>\n            <span class=\"link\">Str :: replaceLast</span>\n            <span class=\"link\">Str :: singular</span>\n            <span class=\"link\">Str :: babosa</span>\n            <span class=\"link\">Str :: serpiente</span>\n            <span class=\"link\">Str :: inicio</span>\n            <span class=\"link\">Str :: startsWith</span>\n            <span class=\"link\">Str :: studly</span>\n            <span class=\"link\">Str :: substr</span>\n            <span class=\"link\">Str :: substrCount</span>\n            <span class=\"link\">Str :: título</span>\n            <span class=\"link\">Str :: ucfirst</span>\n            <span class=\"link\">Str :: superior</span>\n            <span class=\"link\">Str :: uuid</span>\n            <span class=\"link\">Str :: wordCount</span>\n            <span class=\"link\">Str :: palabras</span>\n            <span class=\"link\">trans</span>\n            <span class=\"link\">trans_choice</span></p>\n    </div>\n    <p></p>\n    <h3 id=\"fluent-strings-method-list\"><span class=\"link\">Cuerdas fluidas</span></h3>\n    <div class=\"collection-method-list\">\n        <p><span class=\"link\">después</span>\n            <span class=\"link\">afterLast</span>\n            <span class=\"link\">adjuntar</span>\n            <span class=\"link\">ascii</span>\n            <span class=\"link\">nombre de base</span>\n            <span class=\"link\">antes de</span>\n            <span class=\"link\">antes del ultimo</span>\n            <span class=\"link\">camello</span>\n            <span class=\"link\">contiene</span>\n            <span class=\"link\">contiene todo</span>\n            <span class=\"link\">dirname</span>\n            <span class=\"link\">termina con</span>\n            <span class=\"link\">exactamente</span>\n            <span class=\"link\">explotar</span>\n            <span class=\"link\">terminar</span>\n            <span class=\"link\">es</span>\n            <span class=\"link\">isAscii</span>\n            <span class=\"link\">esta vacio</span>\n            <span class=\"link\">no está vacío</span>\n            <span class=\"link\">isUuid</span>\n            <span class=\"link\">brocheta</span>\n            <span class=\"link\">largo</span>\n            <span class=\"link\">límite</span>\n            <span class=\"link\">más bajo</span>\n            <span class=\"link\">ltrim</span>\n            <span class=\"link\">reducción</span>\n            <span class=\"link\">fósforo</span>\n            <span class=\"link\">matchAll</span>\n            <span class=\"link\">padBoth</span>\n            <span class=\"link\">padLeft</span>\n            <span class=\"link\">padRight</span>\n            <span class=\"link\">tubo</span>\n            <span class=\"link\">plural</span>\n            <span class=\"link\">anteponer</span>\n            <span class=\"link\">retirar</span>\n            <span class=\"link\">reemplazar</span>\n            <span class=\"link\">replaceArray</span>\n            <span class=\"link\">replaceFirst</span>\n            <span class=\"link\">replaceLast</span>\n            <span class=\"link\">replaceMatches</span>\n            <span class=\"link\">rtrim</span>\n            <span class=\"link\">singular</span>\n            <span class=\"link\">babosa</span>\n            <span class=\"link\">serpiente</span>\n            <span class=\"link\">separar</span>\n            <span class=\"link\">comienzo</span>\n            <span class=\"link\">comienza con</span>\n            <span class=\"link\">semental</span>\n            <span class=\"link\">substr</span>\n            <span class=\"link\">grifo</span>\n            <span class=\"link\">prueba</span>\n            <span class=\"link\">título</span>\n            <span class=\"link\">podar</span>\n            <span class=\"link\">ucfirst</span>\n            <span class=\"link\">superior</span>\n            <span class=\"link\">cuando</span>\n            <span class=\"link\">whenEmpty</span>\n            <span class=\"link\">el recuento de palabras</span>\n            <span class=\"link\">palabras</span></p>\n    </div>\n    <p></p>\n    <h3 id=\"urls-method-list\"><span class=\"link\">URLs</span></h3>\n    <div class=\"collection-method-list\">\n        <p><span class=\"link\">acción</span>\n            <span class=\"link\">activo</span>\n            <span class=\"link\">ruta</span>\n            <span class=\"link\">activo_seguro</span>\n            <span class=\"link\">secure_url</span>\n            <span class=\"link\">url</span></p>\n    </div>\n    <p></p>\n    <h3 id=\"miscellaneous-method-list\"><span class=\"link\">Diverso</span></h3>\n    <div class=\"collection-method-list\">\n        <p><span class=\"link\">abortar</span>\n            <span class=\"link\">abort_if</span>\n            <span class=\"link\">abortar a menos que</span>\n            <span class=\"link\">aplicación</span>\n            <span class=\"link\">auth</span>\n            <span class=\"link\">espalda</span>\n            <span class=\"link\">bcrypt</span>\n            <span class=\"link\">blanco</span>\n            <span class=\"link\">transmisión</span>\n            <span class=\"link\">cache</span>\n            <span class=\"link\">class_uses_recursive</span>\n            <span class=\"link\">recoger</span>\n            <span class=\"link\">config</span>\n            <span class=\"link\">Galleta</span>\n            <span class=\"link\">csrf_field</span>\n            <span class=\"link\">csrf_token</span>\n            <span class=\"link\">dd</span>\n            <span class=\"link\">envío</span>\n            <span class=\"link\">vertedero</span>\n            <span class=\"link\">env</span>\n            <span class=\"link\">evento</span>\n            <span class=\"link\">lleno</span>\n            <span class=\"link\">info</span>\n            <span class=\"link\">registrador</span>\n            <span class=\"link\">campo_método</span>\n            <span class=\"link\">ahora</span>\n            <span class=\"link\">viejo</span>\n            <span class=\"link\">Opcional</span>\n            <span class=\"link\">política</span>\n            <span class=\"link\">redireccionar</span>\n            <span class=\"link\">reporte</span>\n            <span class=\"link\">solicitud</span>\n            <span class=\"link\">rescate</span>\n            <span class=\"link\">resolver</span>\n            <span class=\"link\">respuesta</span>\n            <span class=\"link\">rever</span>\n            <span class=\"link\">sesión</span>\n            <span class=\"link\">grifo</span>\n            <span class=\"link\">throw_if</span>\n            <span class=\"link\">lanzar_a menos</span>\n            <span class=\"link\">hoy dia</span>\n            <span class=\"link\">trait_uses_recursive</span>\n            <span class=\"link\">transformar</span>\n            <span class=\"link\">validador</span>\n            <span class=\"link\">valor</span>\n            <span class=\"link\">vista</span>\n            <span class=\"link\">con</span></p>\n    </div>\n    <p></p>\n    <h2 id=\"method-listing\"><span class=\"link\">Listado de métodos</span></h2>\n    <style>\n    #collection-method code {\n        font-size: 14px;\n    }\n\n    #collection-method:not(.first-collection-method) {\n        margin-top: 50px;\n    }\n</style>\n    <p></p>\n    <h2 id=\"arrays\"><span class=\"link\">Matrices y objetos</span></h2>\n    <p></p>\n    <h4 id=\"method-array-accessible\" class=\"first-collection-method\"><span class=\"link\"><code>Arr::accessible()</code></span></h4>\n    <p>El <code>Arr::accessible</code>método determina si el valor dado es accesible a la matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Collection</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$isAccessible</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">accessible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'a'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'b'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$isAccessible</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">accessible</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Collection</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$isAccessible</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">accessible</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span>\n\n<span class=\"token variable\">$isAccessible</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">accessible</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">stdClass</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-add\"><span class=\"link\"><code>Arr::add()</code></span></h4>\n    <p>El <code>Arr::add</code>método agrega un par clave / valor dado a una matriz si la clave dada aún no existe en la matriz o está configurada para <code>null</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['name' =&gt; 'Desk', 'price' =&gt; 100]</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['name' =&gt; 'Desk', 'price' =&gt; 100]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-collapse\"><span class=\"link\"><code>Arr::collapse()</code></span></h4>\n    <p>El <code>Arr::collapse</code>método colapsa una matriz de matrices en una sola matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">collapse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-crossjoin\"><span class=\"link\"><code>Arr::crossJoin()</code></span></h4>\n    <p>El <code>Arr::crossJoin</code>método cruza las matrices dadas, devolviendo un producto cartesiano con todas las permutaciones posibles:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$matrix</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">crossJoin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        [1, 'a'],\n        [1, 'b'],\n        [2, 'a'],\n        [2, 'b'],\n    ]\n*/</span>\n\n<span class=\"token variable\">$matrix</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">crossJoin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'II'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        [1, 'a', 'I'],\n        [1, 'a', 'II'],\n        [1, 'b', 'I'],\n        [1, 'b', 'II'],\n        [2, 'a', 'I'],\n        [2, 'a', 'II'],\n        [2, 'b', 'I'],\n        [2, 'b', 'II'],\n    ]\n*/</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-divide\"><span class=\"link\"><code>Arr::divide()</code></span></h4>\n    <p>El <code>Arr::divide</code>método devuelve dos matrices: una que contiene las claves y la otra que contiene los valores de la matriz dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token variable\">$keys</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$values</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// $keys: ['name']</span>\n\n<span class=\"token comment\">// $values: ['Desk']</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-dot\"><span class=\"link\"><code>Arr::dot()</code></span></h4>\n    <p>El <code>Arr::dot</code>método aplana una matriz multidimensional en una matriz de un solo nivel que utiliza la notación de \"puntos\" para indicar la profundidad:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'products'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'desk'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flattened</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['products.desk.price' =&gt; 100]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-except\"><span class=\"link\"><code>Arr::except()</code></span></h4>\n    <p>El <code>Arr::except</code>método elimina los pares clave / valor dados de una matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">except</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'price'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['name' =&gt; 'Desk']</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-exists\"><span class=\"link\"><code>Arr::exists()</code></span></h4>\n    <p>El <code>Arr::exists</code>método verifica que la clave dada exista en la matriz proporcionada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'John Doe'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'age'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">17</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$exists</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$exists</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'salary'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-first\"><span class=\"link\"><code>Arr::first()</code></span></h4>\n    <p>El <code>Arr::first</code>método devuelve el primer elemento de una matriz que pasa una prueba de verdad determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$first</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">150</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 200</span></code></pre>\n    <p>También se puede pasar un valor predeterminado como tercer parámetro del método. Este valor se devolverá si ningún valor pasa la prueba de verdad:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$first</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$default</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-flatten\"><span class=\"link\"><code>Arr::flatten()</code></span></h4>\n    <p>El <code>Arr::flatten</code>método aplana una matriz multidimensional en una matriz de un solo nivel:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Joe'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'languages'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'PHP'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Ruby'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flattened</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['Joe', 'PHP', 'Ruby']</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-forget\"><span class=\"link\"><code>Arr::forget()</code></span></h4>\n    <p>El <code>Arr::forget</code>método elimina un par clave / valor dado de una matriz profundamente anidada usando la notación \"punto\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'products'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'desk'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nArr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">forget</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'products.desk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['products' =&gt; []]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-get\"><span class=\"link\"><code>Arr::get()</code></span></h4>\n    <p>El <code>Arr::get</code>método recupera un valor de una matriz profundamente anidada usando la notación \"punto\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'products'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'desk'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$price</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'products.desk.price'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 100</span></code></pre>\n    <p>El <code>Arr::get</code>método también acepta un valor predeterminado, que se devolverá si la clave especificada no está presente en la matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$discount</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'products.desk.discount'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 0</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-has\"><span class=\"link\"><code>Arr::has()</code></span></h4>\n    <p>El <code>Arr::has</code>método verifica si un elemento o elementos determinados existen en una matriz utilizando la notación \"punto\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$contains</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'product.name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$contains</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product.price'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'product.discount'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-hasany\"><span class=\"link\"><code>Arr::hasAny()</code></span></h4>\n    <p>El <code>Arr::hasAny</code>método verifica si algún elemento de un conjunto determinado existe en una matriz utilizando la notación \"punto\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$contains</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">hasAny</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'product.name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$contains</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">hasAny</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product.name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'product.discount'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$contains</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">hasAny</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'category'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'product.discount'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-isassoc\"><span class=\"link\"><code>Arr::isAssoc()</code></span></h4>\n    <p>Los <code>Arr::isAssoc</code>rendimientos <code>true</code>si la matriz es una matriz asociativa. Una matriz se considera \"asociativa\" si no tiene claves numéricas secuenciales que comiencen con cero:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$isAssoc</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">isAssoc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'product'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$isAssoc</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">isAssoc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-last\"><span class=\"link\"><code>Arr::last()</code></span></h4>\n    <p>El <code>Arr::last</code>método devuelve el último elemento de una matriz que pasa una prueba de verdad determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$last</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">150</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 300</span></code></pre>\n    <p>Se puede pasar un valor predeterminado como tercer argumento del método. Este valor se devolverá si ningún valor pasa la prueba de verdad:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$last</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$default</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-only\"><span class=\"link\"><code>Arr::only()</code></span></h4>\n    <p>El <code>Arr::only</code>método devuelve solo los pares clave / valor especificados de la matriz dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'orders'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$slice</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['name' =&gt; 'Desk', 'price' =&gt; 100]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-pluck\"><span class=\"link\"><code>Arr::pluck()</code></span></h4>\n    <p>El <code>Arr::pluck</code>método recupera todos los valores de una clave determinada de una matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'developer'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'developer'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Abigail'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$names</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">pluck</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'developer.name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['Taylor', 'Abigail']</span></code></pre>\n    <p>También puede especificar cómo desea que se ingrese la lista resultante:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$names</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">pluck</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'developer.name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'developer.id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1 =&gt; 'Taylor', 2 =&gt; 'Abigail']</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-prepend\"><span class=\"link\"><code>Arr::prepend()</code></span></h4>\n    <p>El <code>Arr::prepend</code>método empujará un elemento al comienzo de una matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'three'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'four'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">prepend</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'zero'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['zero', 'one', 'two', 'three', 'four']</span></code></pre>\n    <p>Si es necesario, puede especificar la clave que debe usarse para el valor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">prepend</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['name' =&gt; 'Desk', 'price' =&gt; 100]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-pull\"><span class=\"link\"><code>Arr::pull()</code></span></h4>\n    <p>El <code>Arr::pull</code>método devuelve y elimina un par clave / valor de una matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">pull</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// $name: Desk</span>\n\n<span class=\"token comment\">// $array: ['price' =&gt; 100]</span></code></pre>\n    <p>Se puede pasar un valor predeterminado como tercer argumento del método. Este valor se devolverá si la clave no existe:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">pull</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$default</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-query\"><span class=\"link\"><code>Arr::query()</code></span></h4>\n    <p>El <code>Arr::query</code>método convierte la matriz en una cadena de consulta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'order'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'column'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'direction'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'desc'</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nArr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// name=Taylor&amp;order[column]=created_at&amp;order[direction]=desc</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-random\"><span class=\"link\"><code>Arr::random()</code></span></h4>\n    <p>El <code>Arr::random</code>método devuelve un valor aleatorio de una matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$random</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 4 - (retrieved randomly)</span></code></pre>\n    <p>También puede especificar el número de elementos que se devolverán como segundo argumento opcional. Tenga en cuenta que proporcionar este argumento devolverá una matriz incluso si solo se desea un elemento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$items</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [2, 5] - (retrieved randomly)</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-set\"><span class=\"link\"><code>Arr::set()</code></span></h4>\n    <p>El <code>Arr::set</code>método establece un valor dentro de una matriz profundamente anidada utilizando la notación \"punto\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'products'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'desk'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nArr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'products.desk.price'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['products' =&gt; ['desk' =&gt; ['price' =&gt; 200]]]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-shuffle\"><span class=\"link\"><code>Arr::shuffle()</code></span></h4>\n    <p>El <code>Arr::shuffle</code>método baraja aleatoriamente los elementos de la matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">shuffle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [3, 2, 5, 1, 4] - (generated randomly)</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-sort\"><span class=\"link\"><code>Arr::sort()</code></span></h4>\n    <p>El <code>Arr::sort</code>método ordena una matriz por sus valores:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Table'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sorted</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['Chair', 'Desk', 'Table']</span></code></pre>\n    <p>También puede ordenar la matriz por los resultados de un cierre determinado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Table'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Chair'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sorted</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_values</span><span class=\"token punctuation\">(</span>Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        ['name' =&gt; 'Chair'],\n        ['name' =&gt; 'Desk'],\n        ['name' =&gt; 'Table'],\n    ]\n*/</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-sort-recursive\"><span class=\"link\"><code>Arr::sortRecursive()</code></span></h4>\n    <p>El <code>Arr::sortRecursive</code>método ordena recursivamente una matriz utilizando la <code>sort</code>función para submatrices indexadas numéricamente y la <code>ksort</code>función para submatrices asociativas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Roman'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Li'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'PHP'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Ruby'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'JavaScript'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'one'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'two'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'three'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$sorted</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">sortRecursive</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        ['JavaScript', 'PHP', 'Ruby'],\n        ['one' =&gt; 1, 'three' =&gt; 3, 'two' =&gt; 2],\n        ['Li', 'Roman', 'Taylor'],\n    ]\n*/</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-to-css-classes\"><span class=\"link\"><code>Arr::toCssClasses()</code></span></h4>\n    <p>El <code>Arr::toCssClasses</code>compila condicionalmente una cadena de clase CSS. El método acepta una matriz de clases donde la clave de la matriz contiene la clase o clases que desea agregar, mientras que el valor es una expresión booleana. Si el elemento de la matriz tiene una clave numérica, siempre se incluirá en la lista de clases renderizada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'p-4'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'font-bold'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$isActive</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'bg-red'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$hasError</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$isActive</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$hasError</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$classes</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">toCssClasses</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    'p-4 bg-red'\n*/</span></code></pre>\n    <p>Este método potencia la funcionalidad de Laravel permitiendo <span class=\"link\">fusionar clases con la bolsa de atributos de un componente Blade,</span> así como la <code>@class</code> <span class=\"link\">directiva Blade</span> .</p>\n    <p></p>\n    <h4 id=\"method-array-where\"><span class=\"link\"><code>Arr::where()</code></span></h4>\n    <p>El <code>Arr::where</code>método filtra una matriz usando el cierre dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'200'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'400'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$filtered</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">is_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1 =&gt; '200', 3 =&gt; '400']</span></code></pre>\n    <p></p>\n    <h4 id=\"method-array-wrap\"><span class=\"link\"><code>Arr::wrap()</code></span></h4>\n    <p>El <code>Arr::wrap</code>método envuelve el valor dado en una matriz. Si el valor dado ya es una matriz, se devolverá sin modificación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'Laravel'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['Laravel']</span></code></pre>\n    <p>Si el valor dado es <code>null</code>, se devolverá una matriz vacía:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Arr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// []</span></code></pre>\n    <p></p>\n    <h4 id=\"method-data-fill\"><span class=\"link\"><code>data_fill()</code></span></h4>\n    <p>La <code>data_fill</code>función establece un valor faltante dentro de una matriz u objeto anidado usando la notación \"punto\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'products'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'desk'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">data_fill</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'products.desk.price'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['products' =&gt; ['desk' =&gt; ['price' =&gt; 100]]]</span>\n\n<span class=\"token function\">data_fill</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'products.desk.discount'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['products' =&gt; ['desk' =&gt; ['price' =&gt; 100, 'discount' =&gt; 10]]]</span></code></pre>\n    <p>Esta función también acepta asteriscos como comodines y completará el destino en consecuencia:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'products'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk 1'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk 2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">data_fill</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'products.*.price'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        'products' =&gt; [\n            ['name' =&gt; 'Desk 1', 'price' =&gt; 100],\n            ['name' =&gt; 'Desk 2', 'price' =&gt; 200],\n        ],\n    ]\n*/</span></code></pre>\n    <p></p>\n    <h4 id=\"method-data-get\"><span class=\"link\"><code>data_get()</code></span></h4>\n    <p>La <code>data_get</code>función recupera un valor de una matriz u objeto anidado usando la notación \"punto\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'products'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'desk'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$price</span> <span class=\"token operator\">=</span> <span class=\"token function\">data_get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'products.desk.price'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 100</span></code></pre>\n    <p>La <code>data_get</code>función también acepta un valor predeterminado, que se devolverá si no se encuentra la clave especificada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$discount</span> <span class=\"token operator\">=</span> <span class=\"token function\">data_get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'products.desk.discount'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 0</span></code></pre>\n    <p>La función también acepta comodines usando asteriscos, que pueden apuntar a cualquier clave de la matriz u objeto:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'product-one'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk 1'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'product-two'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk 2'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">150</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">data_get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'*.name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['Desk 1', 'Desk 2'];</span></code></pre>\n    <p></p>\n    <h4 id=\"method-data-set\"><span class=\"link\"><code>data_set()</code></span></h4>\n    <p>La <code>data_set</code>función establece un valor dentro de una matriz u objeto anidado usando la notación \"punto\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'products'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'desk'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">data_set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'products.desk.price'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['products' =&gt; ['desk' =&gt; ['price' =&gt; 200]]]</span></code></pre>\n    <p>Esta función también acepta comodines usando asteriscos y establecerá valores en el objetivo en consecuencia:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'products'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk 1'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Desk 2'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">150</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">data_set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'products.*.price'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n    [\n        'products' =&gt; [\n            ['name' =&gt; 'Desk 1', 'price' =&gt; 200],\n            ['name' =&gt; 'Desk 2', 'price' =&gt; 200],\n        ],\n    ]\n*/</span></code></pre>\n    <p>De forma predeterminada, se sobrescriben los valores existentes. Si solo desea establecer un valor si no existe, puede pasar <code>false</code>como el cuarto argumento a la función:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$data</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'products'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'desk'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">data_set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'products.desk.price'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$overwrite</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ['products' =&gt; ['desk' =&gt; ['price' =&gt; 100]]]</span></code></pre>\n    <p></p>\n    <h4 id=\"method-head\"><span class=\"link\"><code>head()</code></span></h4>\n    <p>La <code>head</code>función devuelve el primer elemento de la matriz dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$first</span> <span class=\"token operator\">=</span> <span class=\"token function\">head</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 100</span></code></pre>\n    <p></p>\n    <h4 id=\"method-last\"><span class=\"link\"><code>last()</code></span></h4>\n    <p>La <code>last</code>función devuelve el último elemento de la matriz dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$array</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$last</span> <span class=\"token operator\">=</span> <span class=\"token function\">last</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 300</span></code></pre>\n    <p></p>\n    <h2 id=\"paths\"><span class=\"link\">Caminos</span></h2>\n    <p></p>\n    <h4 id=\"method-app-path\"><span class=\"link\"><code>app_path()</code></span></h4>\n    <p>La <code>app_path</code>función devuelve la ruta completa al <code>app</code>directorio de su aplicación . También puede utilizar la <code>app_path</code>función para generar una ruta completa a un archivo relativo al directorio de la aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token function\">app_path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token function\">app_path</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Http/Controllers/Controller.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-base-path\"><span class=\"link\"><code>base_path()</code></span></h4>\n    <p>La <code>base_path</code>función devuelve la ruta completa al directorio raíz de su aplicación. También puede usar la <code>base_path</code>función para generar una ruta completamente calificada a un archivo dado en relación con el directorio raíz del proyecto:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token function\">base_path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token function\">base_path</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'vendor/bin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-config-path\"><span class=\"link\"><code>config_path()</code></span></h4>\n    <p>La <code>config_path</code>función devuelve la ruta completa al <code>config</code>directorio de su aplicación . También puede utilizar la <code>config_path</code>función para generar una ruta completa a un archivo determinado dentro del directorio de configuración de la aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token function\">config_path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token function\">config_path</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'app.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-database-path\"><span class=\"link\"><code>database_path()</code></span></h4>\n    <p>La <code>database_path</code>función devuelve la ruta completa al <code>database</code>directorio de su aplicación . También puede usar la <code>database_path</code>función para generar una ruta completa a un archivo dado dentro del directorio de la base de datos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token function\">database_path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token function\">database_path</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'factories/UserFactory.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-mix\"><span class=\"link\"><code>mix()</code></span></h4>\n    <p>La <code>mix</code>función devuelve la ruta a un <span class=\"link\">archivo Mix versionado</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token function\">mix</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'css/app.css'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-public-path\"><span class=\"link\"><code>public_path()</code></span></h4>\n    <p>La <code>public_path</code>función devuelve la ruta completa al <code>public</code>directorio de su aplicación . También puede usar la <code>public_path</code>función para generar una ruta completamente calificada a un archivo dado dentro del directorio público:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token function\">public_path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token function\">public_path</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'css/app.css'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-resource-path\"><span class=\"link\"><code>resource_path()</code></span></h4>\n    <p>La <code>resource_path</code>función devuelve la ruta completa al <code>resources</code>directorio de su aplicación . También puede utilizar la <code>resource_path</code>función para generar una ruta completa a un archivo determinado dentro del directorio de recursos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token function\">resource_path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token function\">resource_path</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'sass/app.scss'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-storage-path\"><span class=\"link\"><code>storage_path()</code></span></h4>\n    <p>La <code>storage_path</code>función devuelve la ruta completa al <code>storage</code>directorio de su aplicación . También puede usar la <code>storage_path</code>función para generar una ruta completamente calificada a un archivo dado dentro del directorio de almacenamiento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token function\">storage_path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$path</span> <span class=\"token operator\">=</span> <span class=\"token function\">storage_path</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'app/file.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"strings\"><span class=\"link\">Instrumentos de cuerda</span></h2>\n    <p></p>\n    <h4 id=\"method-__\"><span class=\"link\"><code>__()</code></span></h4>\n    <p>La <code>__</code>función traduce la cadena de traducción dada o la clave de traducción usando sus <span class=\"link\">archivos de localización</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">echo</span> <span class=\"token function\">__</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Welcome to our application'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token function\">__</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'messages.welcome'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si la cadena o clave de traducción especificada no existe, la <code>__</code>función devolverá el valor dado. Entonces, usando el ejemplo anterior, la <code>__</code>función regresaría <code>messages.welcome</code>si esa clave de traducción no existe.</p>\n    <p></p>\n    <h4 id=\"method-class-basename\"><span class=\"link\"><code>class_basename()</code></span></h4>\n    <p>La <code>class_basename</code>función devuelve el nombre de clase de la clase dada con el espacio de nombres de la clase eliminado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$class</span> <span class=\"token operator\">=</span> <span class=\"token function\">class_basename</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Foo\\Bar\\Baz'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Baz</span></code></pre>\n    <p></p>\n    <h4 id=\"method-e\"><span class=\"link\"><code>e()</code></span></h4>\n    <p>La <code>e</code>función ejecuta la <code>htmlspecialchars</code>función de PHP con la <code>double_encode</code>opción configurada <code>true</code>de forma predeterminada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">echo</span> <span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'&lt;html&gt;foo&lt;/html&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// &amp;lt;html&amp;gt;foo&amp;lt;/html&amp;gt;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-preg-replace-array\"><span class=\"link\"><code>preg_replace_array()</code></span></h4>\n    <p>La <code>preg_replace_array</code>función reemplaza un patrón dado en la cadena secuencialmente usando una matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'The event will take place between :start and :end'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$replaced</span> <span class=\"token operator\">=</span> <span class=\"token function\">preg_replace_array</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/:[a-z_]+/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'8:30'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'9:00'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The event will take place between 8:30 and 9:00</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-after\"><span class=\"link\"><code>Str::after()</code></span></h4>\n    <p>El <code>Str::after</code>método devuelve todo después del valor dado en una cadena. Se devolverá la cadena completa si el valor no existe dentro de la cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$slice</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'This is'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ' my name'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-after-last\"><span class=\"link\"><code>Str::afterLast()</code></span></h4>\n    <p>El <code>Str::afterLast</code>método devuelve todo después de la última aparición del valor dado en una cadena. Se devolverá la cadena completa si el valor no existe dentro de la cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$slice</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">afterLast</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'App\\Http\\Controllers\\Controller'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'Controller'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-ascii\"><span class=\"link\"><code>Str::ascii()</code></span></h4>\n    <p>El <code>Str::ascii</code>método intentará transliterar la cadena en un valor ASCII:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$slice</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">ascii</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'û'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'u'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-before\"><span class=\"link\"><code>Str::before()</code></span></h4>\n    <p>El <code>Str::before</code>método devuelve todo antes del valor dado en una cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$slice</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'my name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'This is '</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-before-last\"><span class=\"link\"><code>Str::beforeLast()</code></span></h4>\n    <p>El <code>Str::beforeLast</code>método devuelve todo antes de la última aparición del valor dado en una cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$slice</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">beforeLast</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'is'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'This '</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-between\"><span class=\"link\"><code>Str::between()</code></span></h4>\n    <p>El <code>Str::between</code>método devuelve la parte de una cadena entre dos valores:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$slice</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'This'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ' is my '</span></code></pre>\n    <p></p>\n    <h4 id=\"method-camel-case\"><span class=\"link\"><code>Str::camel()</code></span></h4>\n    <p>El <code>Str::camel</code>método convierte la cadena dada a <code>camelCase</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$converted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">camel</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo_bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// fooBar</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-contains\"><span class=\"link\"><code>Str::contains()</code></span></h4>\n    <p>El <code>Str::contains</code>método determina si la cadena dada contiene el valor dado. Este método distingue entre mayúsculas y minúsculas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$contains</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'my'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span></code></pre>\n    <p>También puede pasar una matriz de valores para determinar si la cadena dada contiene alguno de los valores de la matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$contains</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'my'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-contains-all\"><span class=\"link\"><code>Str::containsAll()</code></span></h4>\n    <p>El <code>Str::containsAll</code>método determina si la cadena dada contiene todos los valores en una matriz dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$containsAll</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">containsAll</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'my'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span></code></pre>\n    <p></p>\n    <h4 id=\"method-ends-with\"><span class=\"link\"><code>Str::endsWith()</code></span></h4>\n    <p>El <code>Str::endsWith</code>método determina si la cadena dada termina con el valor dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span></code></pre>\n    <p>También puede pasar una matriz de valores para determinar si la cadena dada termina con alguno de los valores de la matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'this'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-finish\"><span class=\"link\"><code>Str::finish()</code></span></h4>\n    <p>El <code>Str::finish</code>método agrega una única instancia del valor dado a una cadena si aún no termina con ese valor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$adjusted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'this/string'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// this/string/</span>\n\n<span class=\"token variable\">$adjusted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'this/string/'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// this/string/</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-is\"><span class=\"link\"><code>Str::is()</code></span></h4>\n    <p>El <code>Str::is</code>método determina si una cadena dada coincide con un patrón dado. Los asteriscos se pueden utilizar como valores comodín:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$matches</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo*'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'foobar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$matches</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'baz*'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'foobar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-is-ascii\"><span class=\"link\"><code>Str::isAscii()</code></span></h4>\n    <p>El <code>Str::isAscii</code>método determina si una cadena dada es ASCII de 7 bits:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$isAscii</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">isAscii</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$isAscii</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">isAscii</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'ü'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-is-uuid\"><span class=\"link\"><code>Str::isUuid()</code></span></h4>\n    <p>El <code>Str::isUuid</code>método determina si la cadena dada es un UUID válido:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$isUuid</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">isUuid</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'a0a2a2d2-0b87-4a18-83f2-2529882be2de'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$isUuid</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">isUuid</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'laravel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p></p>\n    <h4 id=\"method-kebab-case\"><span class=\"link\"><code>Str::kebab()</code></span></h4>\n    <p>El <code>Str::kebab</code>método convierte la cadena dada a <code>kebab-case</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$converted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">kebab</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'fooBar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// foo-bar</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-length\"><span class=\"link\"><code>Str::length()</code></span></h4>\n    <p>El <code>Str::length</code>método devuelve la longitud de la cadena dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$length</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Laravel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 7</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-limit\"><span class=\"link\"><code>Str::limit()</code></span></h4>\n    <p>El <code>Str::limit</code>método trunca la cadena dada a la longitud especificada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$truncated</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'The quick brown fox jumps over the lazy dog'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The quick brown fox...</span></code></pre>\n    <p>Puede pasar un tercer argumento al método para cambiar la cadena que se agregará al final de la cadena truncada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$truncated</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'The quick brown fox jumps over the lazy dog'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">' (...)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The quick brown fox (...)</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-lower\"><span class=\"link\"><code>Str::lower()</code></span></h4>\n    <p>El <code>Str::lower</code>método convierte la cadena dada a minúsculas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$converted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">lower</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'LARAVEL'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// laravel</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-markdown\"><span class=\"link\"><code>Str::markdown()</code></span></h4>\n    <p>El <code>Str::markdown</code>método convierte Markdown con sabor a GitHub en HTML:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$html</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">markdown</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'# Laravel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// &lt;h1&gt;Laravel&lt;/h1&gt;</span>\n\n<span class=\"token variable\">$html</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">markdown</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'# Taylor &lt;b&gt;Otwell&lt;/b&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'html_input'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'strip'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// &lt;h1&gt;Taylor Otwell&lt;/h1&gt;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-ordered-uuid\"><span class=\"link\"><code>Str::orderedUuid()</code></span></h4>\n    <p>El <code>Str::orderedUuid</code>método genera un UUID de \"marca de tiempo primero\" que se puede almacenar de manera eficiente en una columna de base de datos indexada. Cada UUID que se genera con este método se ordenará después de los UUID generados previamente mediante el método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">orderedUuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-padboth\"><span class=\"link\"><code>Str::padBoth()</code></span></h4>\n    <p>El <code>Str::padBoth</code>método envuelve la <code>str_pad</code>función de PHP , rellenando ambos lados de una cadena con otra cadena hasta que la cadena final alcanza la longitud deseada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$padded</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">padBoth</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'James'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// '__James___'</span>\n\n<span class=\"token variable\">$padded</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">padBoth</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'James'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// '  James   '</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-padleft\"><span class=\"link\"><code>Str::padLeft()</code></span></h4>\n    <p>El <code>Str::padLeft</code>método envuelve la <code>str_pad</code>función de PHP , rellenando el lado izquierdo de una cadena con otra cadena hasta que la cadena final alcanza la longitud deseada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$padded</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">padLeft</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'James'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'-='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// '-=-=-James'</span>\n\n<span class=\"token variable\">$padded</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">padLeft</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'James'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// '     James'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-padright\"><span class=\"link\"><code>Str::padRight()</code></span></h4>\n    <p>El <code>Str::padRight</code>método envuelve la <code>str_pad</code>función de PHP , rellenando el lado derecho de una cadena con otra cadena hasta que la cadena final alcanza la longitud deseada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$padded</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">padRight</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'James'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'James-----'</span>\n\n<span class=\"token variable\">$padded</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">padRight</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'James'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'James     '</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-plural\"><span class=\"link\"><code>Str::plural()</code></span></h4>\n    <p>El <code>Str::plural</code>método convierte una cadena de palabras en singular a su forma plural. Actualmente, esta función solo es compatible con el idioma inglés:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$plural</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">plural</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'car'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// cars</span>\n\n<span class=\"token variable\">$plural</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">plural</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'child'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// children</span></code></pre>\n    <p>Puede proporcionar un número entero como segundo argumento a la función para recuperar la forma singular o plural de la cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$plural</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">plural</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'child'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// children</span>\n\n<span class=\"token variable\">$singular</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">plural</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'child'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// child</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-plural-studly\"><span class=\"link\"><code>Str::pluralStudly()</code></span></h4>\n    <p>El <code>Str::pluralStudly</code>método convierte una cadena de palabras en singular formateada en mayúsculas y minúsculas a su forma plural. Actualmente, esta función solo es compatible con el idioma inglés:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$plural</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">pluralStudly</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'VerifiedHuman'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// VerifiedHumans</span>\n\n<span class=\"token variable\">$plural</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">pluralStudly</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'UserFeedback'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// UserFeedback</span></code></pre>\n    <p>Puede proporcionar un número entero como segundo argumento a la función para recuperar la forma singular o plural de la cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$plural</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">pluralStudly</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'VerifiedHuman'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// VerifiedHumans</span>\n\n<span class=\"token variable\">$singular</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">pluralStudly</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'VerifiedHuman'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// VerifiedHuman</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-random\"><span class=\"link\"><code>Str::random()</code></span></h4>\n    <p>El <code>Str::random</code>método genera una cadena aleatoria de la longitud especificada. Esta función usa la <code>random_bytes</code>función de PHP :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$random</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-remove\"><span class=\"link\"><code>Str::remove()</code></span></h4>\n    <p>El <code>Str::remove</code>método elimina el valor dado o la matriz de valores de la cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'Peter Piper picked a peck of pickled peppers.'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$removed</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Ptr Pipr pickd a pck of pickld ppprs.</span></code></pre>\n    <p>También puede pasar <code>false</code>como tercer argumento al <code>remove</code>método para ignorar las mayúsculas y minúsculas al eliminar cadenas.</p>\n    <p></p>\n    <h4 id=\"method-str-replace\"><span class=\"link\"><code>Str::replace()</code></span></h4>\n    <p>El <code>Str::replace</code>método reemplaza una cadena dada dentro de la cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'Laravel 8.x'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$replaced</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'8.x'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'9.x'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Laravel 9.x</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-replace-array\"><span class=\"link\"><code>Str::replaceArray()</code></span></h4>\n    <p>El <code>Str::replaceArray</code>método reemplaza un valor dado en la cadena secuencialmente usando una matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'The event will take place between ? and ?'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$replaced</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">replaceArray</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'?'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'8:30'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'9:00'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The event will take place between 8:30 and 9:00</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-replace-first\"><span class=\"link\"><code>Str::replaceFirst()</code></span></h4>\n    <p>El <code>Str::replaceFirst</code>método reemplaza la primera aparición de un valor dado en una cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$replaced</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">replaceFirst</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'the'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'the quick brown fox jumps over the lazy dog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// a quick brown fox jumps over the lazy dog</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-replace-last\"><span class=\"link\"><code>Str::replaceLast()</code></span></h4>\n    <p>El <code>Str::replaceLast</code>método reemplaza la última aparición de un valor dado en una cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$replaced</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">replaceLast</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'the'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'the quick brown fox jumps over the lazy dog'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// the quick brown fox jumps over a lazy dog</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-singular\"><span class=\"link\"><code>Str::singular()</code></span></h4>\n    <p>El <code>Str::singular</code>método convierte una cadena a su forma singular. Actualmente, esta función solo es compatible con el idioma inglés:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$singular</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">singular</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'cars'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// car</span>\n\n<span class=\"token variable\">$singular</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">singular</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'children'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// child</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-slug\"><span class=\"link\"><code>Str::slug()</code></span></h4>\n    <p>El <code>Str::slug</code>método genera un \"slug\" compatible con URL a partir de la cadena dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$slug</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">slug</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Laravel 5 Framework'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// laravel-5-framework</span></code></pre>\n    <p></p>\n    <h4 id=\"method-snake-case\"><span class=\"link\"><code>Str::snake()</code></span></h4>\n    <p>El <code>Str::snake</code>método convierte la cadena dada a <code>snake_case</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$converted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">snake</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'fooBar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// foo_bar</span>\n\n<span class=\"token variable\">$converted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">snake</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'fooBar'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// foo-bar</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-start\"><span class=\"link\"><code>Str::start()</code></span></h4>\n    <p>El <code>Str::start</code>método agrega una sola instancia del valor dado a una cadena si aún no comienza con ese valor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$adjusted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'this/string'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// /this/string</span>\n\n<span class=\"token variable\">$adjusted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/this/string'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// /this/string</span></code></pre>\n    <p></p>\n    <h4 id=\"method-starts-with\"><span class=\"link\"><code>Str::startsWith()</code></span></h4>\n    <p>El <code>Str::startsWith</code>método determina si la cadena dada comienza con el valor dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'This'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span></code></pre>\n    <p>Si se pasa una matriz de valores posibles, el <code>startsWith</code>método devolverá <code>true</code>si la cadena comienza con alguno de los valores dados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'This'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'That'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'There'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span></code></pre>\n    <p></p>\n    <h4 id=\"method-studly-case\"><span class=\"link\"><code>Str::studly()</code></span></h4>\n    <p>El <code>Str::studly</code>método convierte la cadena dada a <code>StudlyCase</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$converted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">studly</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo_bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// FooBar</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-substr\"><span class=\"link\"><code>Str::substr()</code></span></h4>\n    <p>El <code>Str::substr</code>método devuelve la parte de la cadena especificada por los parámetros de inicio y longitud:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$converted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'The Laravel Framework'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Laravel</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-substrcount\"><span class=\"link\"><code>Str::substrCount()</code></span></h4>\n    <p>El <code>Str::substrCount</code>método devuelve el número de apariciones de un valor dado en la cadena dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$count</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">substrCount</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'If you like ice cream, you will like snow cones.'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'like'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2</span></code></pre>\n    <p></p>\n    <h4 id=\"method-title-case\"><span class=\"link\"><code>Str::title()</code></span></h4>\n    <p>El <code>Str::title</code>método convierte la cadena dada a <code>Title Case</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$converted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'a nice title uses the correct case'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// A Nice Title Uses The Correct Case</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-ucfirst\"><span class=\"link\"><code>Str::ucfirst()</code></span></h4>\n    <p>El <code>Str::ucfirst</code>método devuelve la cadena dada con el primer carácter en mayúscula:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">ucfirst</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Foo bar</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-upper\"><span class=\"link\"><code>Str::upper()</code></span></h4>\n    <p>El <code>Str::upper</code>método convierte la cadena dada a mayúsculas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">upper</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'laravel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// LARAVEL</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-uuid\"><span class=\"link\"><code>Str::uuid()</code></span></h4>\n    <p>El <code>Str::uuid</code>método genera un UUID (versión 4):</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">uuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-word-count\"><span class=\"link\"><code>Str::wordCount</code></span></h4>\n    <p>El <code>Str::wordCount</code>método devuelve el número de palabras que contiene una cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\nStr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">wordCount</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Hello, world!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre>\n    <p></p>\n    <h4 id=\"method-str-words\"><span class=\"link\"><code>Str::words()</code></span></h4>\n    <p>El <code>Str::words</code>método limita el número de palabras en una cadena. Se puede pasar una cadena adicional a este método a través de su tercer argumento para especificar qué cadena se debe agregar al final de la cadena truncada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">words</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Perfectly balanced, as all things should be.'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">' &gt;&gt;&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Perfectly balanced, as &gt;&gt;&gt;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-trans\"><span class=\"link\"><code>trans()</code></span></h4>\n    <p>La <code>trans</code>función traduce la clave de traducción dada usando sus <span class=\"link\">archivos de localización</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">echo</span> <span class=\"token function\">trans</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'messages.welcome'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si la clave de traducción especificada no existe, la <code>trans</code>función devolverá la clave dada. Entonces, usando el ejemplo anterior, la <code>trans</code>función regresaría <code>messages.welcome</code>si la clave de traducción no existe.</p>\n    <p></p>\n    <h4 id=\"method-trans-choice\"><span class=\"link\"><code>trans_choice()</code></span></h4>\n    <p>La <code>trans_choice</code>función traduce la clave de traducción dada con inflexión:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">echo</span> <span class=\"token function\">trans_choice</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'messages.notifications'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$unreadCount</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si la clave de traducción especificada no existe, la <code>trans_choice</code>función devolverá la clave dada. Entonces, usando el ejemplo anterior, la <code>trans_choice</code>función regresaría <code>messages.notifications</code>si la clave de traducción no existe.</p>\n    <p></p>\n    <h2 id=\"fluent-strings\"><span class=\"link\">Cuerdas fluidas</span></h2>\n    <p>Las cadenas fluidas proporcionan una interfaz orientada a objetos más fluida para trabajar con valores de cadena, lo que le permite encadenar varias operaciones de cadena juntas utilizando una sintaxis más legible en comparación con las operaciones de cadena tradicionales.</p>\n    <p></p>\n    <h4 id=\"method-fluent-str-after\"><span class=\"link\"><code>after</code></span></h4>\n    <p>El <code>after</code>método devuelve todo después del valor dado en una cadena. Se devolverá la cadena completa si el valor no existe dentro de la cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$slice</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ' my name'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-after-last\"><span class=\"link\"><code>afterLast</code></span></h4>\n    <p>El <code>afterLast</code>método devuelve todo después de la última aparición del valor dado en una cadena. Se devolverá la cadena completa si el valor no existe dentro de la cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$slice</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'App\\Http\\Controllers\\Controller'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">afterLast</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'\\\\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'Controller'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-append\"><span class=\"link\"><code>append</code></span></h4>\n    <p>El <code>append</code>método agrega los valores dados a la cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">' Otwell'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'Taylor Otwell'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-ascii\"><span class=\"link\"><code>ascii</code></span></h4>\n    <p>El <code>ascii</code>método intentará transliterar la cadena en un valor ASCII:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'ü'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ascii</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'u'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-basename\"><span class=\"link\"><code>basename</code></span></h4>\n    <p>El <code>basename</code>método devolverá el componente de nombre final de la cadena dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/foo/bar/baz'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'baz'</span></code></pre>\n    <p>Si es necesario, puede proporcionar una \"extensión\" que se eliminará del componente final:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/foo/bar/baz.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'baz'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-before\"><span class=\"link\"><code>before</code></span></h4>\n    <p>El <code>before</code>método devuelve todo antes del valor dado en una cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$slice</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'my name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'This is '</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-before-last\"><span class=\"link\"><code>beforeLast</code></span></h4>\n    <p>El <code>beforeLast</code>método devuelve todo antes de la última aparición del valor dado en una cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$slice</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">beforeLast</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'is'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'This '</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-camel\"><span class=\"link\"><code>camel</code></span></h4>\n    <p>El <code>camel</code>método convierte la cadena dada a <code>camelCase</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$converted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo_bar'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">camel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// fooBar</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-contains\"><span class=\"link\"><code>contains</code></span></h4>\n    <p>El <code>contains</code>método determina si la cadena dada contiene el valor dado. Este método distingue entre mayúsculas y minúsculas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$contains</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'my'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span></code></pre>\n    <p>También puede pasar una matriz de valores para determinar si la cadena dada contiene alguno de los valores de la matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$contains</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'my'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-contains-all\"><span class=\"link\"><code>containsAll</code></span></h4>\n    <p>El <code>containsAll</code>método determina si la cadena dada contiene todos los valores en la matriz dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$containsAll</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">containsAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'my'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-dirname\"><span class=\"link\"><code>dirname</code></span></h4>\n    <p>El <code>dirname</code>método devuelve la parte del directorio principal de la cadena dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/foo/bar/baz'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// '/foo/bar'</span></code></pre>\n    <p>Si es necesario, puede especificar cuántos niveles de directorio desea recortar de la cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/foo/bar/baz'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// '/foo'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-ends-with\"><span class=\"link\"><code>endsWith</code></span></h4>\n    <p>El <code>endsWith</code>método determina si la cadena dada termina con el valor dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span></code></pre>\n    <p>También puede pasar una matriz de valores para determinar si la cadena dada termina con alguno de los valores de la matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'this'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-exactly\"><span class=\"link\"><code>exactly</code></span></h4>\n    <p>El <code>exactly</code>método determina si la cadena dada es una coincidencia exacta con otra cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Laravel'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">exactly</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Laravel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-explode\"><span class=\"link\"><code>explode</code></span></h4>\n    <p>El <code>explode</code>método divide la cadena por el delimitador dado y devuelve una colección que contiene cada sección de la cadena dividida:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo bar baz'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// collect(['foo', 'bar', 'baz'])</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-finish\"><span class=\"link\"><code>finish</code></span></h4>\n    <p>El <code>finish</code>método agrega una única instancia del valor dado a una cadena si aún no termina con ese valor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$adjusted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'this/string'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// this/string/</span>\n\n<span class=\"token variable\">$adjusted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'this/string/'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// this/string/</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-is\"><span class=\"link\"><code>is</code></span></h4>\n    <p>El <code>is</code>método determina si una cadena dada coincide con un patrón dado. Los asteriscos se pueden utilizar como valores comodín</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$matches</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foobar'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$matches</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foobar'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'baz*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-is-ascii\"><span class=\"link\"><code>isAscii</code></span></h4>\n    <p>El <code>isAscii</code>método determina si una cadena dada es una cadena ASCII:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isAscii</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'ü'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isAscii</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-is-empty\"><span class=\"link\"><code>isEmpty</code></span></h4>\n    <p>El <code>isEmpty</code>método determina si la cadena dada está vacía:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'  '</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Laravel'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-is-not-empty\"><span class=\"link\"><code>isNotEmpty</code></span></h4>\n    <p>El <code>isNotEmpty</code>método determina si la cadena dada no está vacía:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'  '</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Laravel'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-is-uuid\"><span class=\"link\"><code>isUuid</code></span></h4>\n    <p>El <code>isUuid</code>método determina si una cadena dada es un UUID:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'5ace9ab9-e9cf-4ec6-a19d-5881212a452c'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isUuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isUuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-kebab\"><span class=\"link\"><code>kebab</code></span></h4>\n    <p>El <code>kebab</code>método convierte la cadena dada a <code>kebab-case</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$converted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'fooBar'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">kebab</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// foo-bar</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-length\"><span class=\"link\"><code>length</code></span></h4>\n    <p>El <code>length</code>método devuelve la longitud de la cadena dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$length</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Laravel'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 7</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-limit\"><span class=\"link\"><code>limit</code></span></h4>\n    <p>El <code>limit</code>método trunca la cadena dada a la longitud especificada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$truncated</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'The quick brown fox jumps over the lazy dog'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The quick brown fox...</span></code></pre>\n    <p>También puede pasar un segundo argumento para cambiar la cadena que se agregará al final de la cadena truncada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$truncated</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'The quick brown fox jumps over the lazy dog'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">' (...)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The quick brown fox (...)</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-lower\"><span class=\"link\"><code>lower</code></span></h4>\n    <p>El <code>lower</code>método convierte la cadena dada a minúsculas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'LARAVEL'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">lower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'laravel'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-ltrim\"><span class=\"link\"><code>ltrim</code></span></h4>\n    <p>El <code>ltrim</code>método recorta el lado izquierdo de la cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'  Laravel  '</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ltrim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'Laravel  '</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/Laravel/'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ltrim</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'Laravel/'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-markdown\"><span class=\"link\"><code>markdown</code></span></h4>\n    <p>El <code>markdown</code>método convierte Markdown con sabor a GitHub en HTML:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$html</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'# Laravel'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">markdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// &lt;h1&gt;Laravel&lt;/h1&gt;</span>\n\n<span class=\"token variable\">$html</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'# Taylor &lt;b&gt;Otwell&lt;/b&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">markdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'html_input'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'strip'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// &lt;h1&gt;Taylor Otwell&lt;/h1&gt;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-match\"><span class=\"link\"><code>match</code></span></h4>\n    <p>El <code>match</code>método devolverá la parte de una cadena que coincide con un patrón de expresión regular determinado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo bar'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/bar/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'bar'</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo bar'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">match</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/foo (.*)/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'bar'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-match-all\"><span class=\"link\"><code>matchAll</code></span></h4>\n    <p>El <code>matchAll</code>método devolverá una colección que contiene las partes de una cadena que coinciden con un patrón de expresión regular dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'bar foo bar'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">matchAll</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/bar/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// collect(['bar', 'bar'])</span></code></pre>\n    <p>Si especifica un grupo coincidente dentro de la expresión, Laravel devolverá una colección de las coincidencias de ese grupo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'bar fun bar fly'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">matchAll</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/f(\\w*)/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// collect(['un', 'ly']);</span></code></pre>\n    <p>Si no se encuentran coincidencias, se devolverá una colección vacía.</p>\n    <p></p>\n    <h4 id=\"method-fluent-str-padboth\"><span class=\"link\"><code>padBoth</code></span></h4>\n    <p>El <code>padBoth</code>método envuelve la <code>str_pad</code>función de PHP , rellenando ambos lados de una cadena con otra cadena hasta que la cadena final alcanza la longitud deseada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$padded</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'James'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">padBoth</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// '__James___'</span>\n\n<span class=\"token variable\">$padded</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'James'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">padBoth</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// '  James   '</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-padleft\"><span class=\"link\"><code>padLeft</code></span></h4>\n    <p>El <code>padLeft</code>método envuelve la <code>str_pad</code>función de PHP , rellenando el lado izquierdo de una cadena con otra cadena hasta que la cadena final alcanza la longitud deseada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$padded</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'James'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">padLeft</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'-='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// '-=-=-James'</span>\n\n<span class=\"token variable\">$padded</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'James'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">padLeft</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// '     James'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-padright\"><span class=\"link\"><code>padRight</code></span></h4>\n    <p>El <code>padRight</code>método envuelve la <code>str_pad</code>función de PHP , rellenando el lado derecho de una cadena con otra cadena hasta que la cadena final alcanza la longitud deseada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$padded</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'James'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">padRight</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'James-----'</span>\n\n<span class=\"token variable\">$padded</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'James'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">padRight</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'James     '</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-pipe\"><span class=\"link\"><code>pipe</code></span></h4>\n    <p>El <code>pipe</code>método le permite transformar la cadena pasando su valor actual al invocable dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$hash</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Laravel'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'md5'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">prepend</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Checksum: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'Checksum: a5c95b86291ea299fcbe64458ed12702'</span>\n\n<span class=\"token variable\">$closure</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'bar'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'bar'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-plural\"><span class=\"link\"><code>plural</code></span></h4>\n    <p>El <code>plural</code>método convierte una cadena de palabras en singular a su forma plural. Actualmente, esta función solo es compatible con el idioma inglés:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$plural</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'car'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">plural</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// cars</span>\n\n<span class=\"token variable\">$plural</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'child'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">plural</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// children</span></code></pre>\n    <p>Puede proporcionar un número entero como segundo argumento a la función para recuperar la forma singular o plural de la cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$plural</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'child'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">plural</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// children</span>\n\n<span class=\"token variable\">$plural</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'child'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">plural</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// child</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-prepend\"><span class=\"link\"><code>prepend</code></span></h4>\n    <p>El <code>prepend</code>método antepone los valores dados a la cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Framework'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">prepend</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Laravel '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Laravel Framework</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-remove\"><span class=\"link\"><code>remove</code></span></h4>\n    <p>El <code>remove</code>método elimina el valor dado o la matriz de valores de la cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Arkansas is quite beautiful!'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'quite'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Arkansas is beautiful!</span></code></pre>\n    <p>También puede pasar <code>false</code>como un segundo parámetro para ignorar mayúsculas y minúsculas al eliminar.</p>\n    <p></p>\n    <h4 id=\"method-fluent-str-replace\"><span class=\"link\"><code>replace</code></span></h4>\n    <p>El <code>replace</code>método reemplaza una cadena dada dentro de la cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$replaced</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Laravel 6.x'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'6.x'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'7.x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Laravel 7.x</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-replace-array\"><span class=\"link\"><code>replaceArray</code></span></h4>\n    <p>El <code>replaceArray</code>método reemplaza un valor dado en la cadena secuencialmente usando una matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'The event will take place between ? and ?'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$replaced</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">replaceArray</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'?'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'8:30'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'9:00'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The event will take place between 8:30 and 9:00</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-replace-first\"><span class=\"link\"><code>replaceFirst</code></span></h4>\n    <p>El <code>replaceFirst</code>método reemplaza la primera aparición de un valor dado en una cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$replaced</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'the quick brown fox jumps over the lazy dog'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">replaceFirst</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'the'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// a quick brown fox jumps over the lazy dog</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-replace-last\"><span class=\"link\"><code>replaceLast</code></span></h4>\n    <p>El <code>replaceLast</code>método reemplaza la última aparición de un valor dado en una cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$replaced</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'the quick brown fox jumps over the lazy dog'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">replaceLast</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'the'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// the quick brown fox jumps over a lazy dog</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-replace-matches\"><span class=\"link\"><code>replaceMatches</code></span></h4>\n    <p>El <code>replaceMatches</code>método reemplaza todas las partes de una cadena que coinciden con un patrón con la cadena de reemplazo dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$replaced</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'(+1) 501-555-1000'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">replaceMatches</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/[^A-Za-z0-9]++/'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">''</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// '15015551000'</span></code></pre>\n    <p>El <code>replaceMatches</code>método también acepta un cierre que se invocará con cada parte de la cadena que coincida con el patrón dado, lo que le permite realizar la lógica de reemplazo dentro del cierre y devolver el valor reemplazado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$replaced</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'123'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">replaceMatches</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/\\d/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$match</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'['</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$match</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">']'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// '[1][2][3]'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-rtrim\"><span class=\"link\"><code>rtrim</code></span></h4>\n    <p>El <code>rtrim</code>método recorta el lado derecho de la cadena dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'  Laravel  '</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">rtrim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// '  Laravel'</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/Laravel/'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">rtrim</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// '/Laravel'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-singular\"><span class=\"link\"><code>singular</code></span></h4>\n    <p>El <code>singular</code>método convierte una cadena a su forma singular. Actualmente, esta función solo es compatible con el idioma inglés:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$singular</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'cars'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">singular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// car</span>\n\n<span class=\"token variable\">$singular</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'children'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">singular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// child</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-slug\"><span class=\"link\"><code>slug</code></span></h4>\n    <p>El <code>slug</code>método genera un \"slug\" compatible con URL a partir de la cadena dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$slug</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Laravel Framework'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">slug</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// laravel-framework</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-snake\"><span class=\"link\"><code>snake</code></span></h4>\n    <p>El <code>snake</code>método convierte la cadena dada a <code>snake_case</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$converted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'fooBar'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">snake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// foo_bar</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-split\"><span class=\"link\"><code>split</code></span></h4>\n    <p>El <code>split</code>método divide una cadena en una colección usando una expresión regular:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$segments</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'one, two, three'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/[\\s,]+/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// collect([\"one\", \"two\", \"three\"])</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-start\"><span class=\"link\"><code>start</code></span></h4>\n    <p>El <code>start</code>método agrega una sola instancia del valor dado a una cadena si aún no comienza con ese valor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$adjusted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'this/string'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// /this/string</span>\n\n<span class=\"token variable\">$adjusted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/this/string'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// /this/string</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-starts-with\"><span class=\"link\"><code>startsWith</code></span></h4>\n    <p>El <code>startsWith</code>método determina si la cadena dada comienza con el valor dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This is my name'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'This'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-studly\"><span class=\"link\"><code>studly</code></span></h4>\n    <p>El <code>studly</code>método convierte la cadena dada a <code>StudlyCase</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$converted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo_bar'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">studly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// FooBar</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-substr\"><span class=\"link\"><code>substr</code></span></h4>\n    <p>El <code>substr</code>método devuelve la parte de la cadena especificada por los parámetros de inicio y longitud dados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Laravel Framework'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Framework</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Laravel Framework'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Frame</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-tap\"><span class=\"link\"><code>tap</code></span></h4>\n    <p>El <code>tap</code>método pasa la cadena al cierre dado, lo que le permite examinar e interactuar con la cadena sin afectar la cadena en sí. El <code>tap</code>método devuelve la cadena original independientemente de lo que devuelva el cierre:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Laravel'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">' Framework'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'String after append: '</span> <span class=\"token punctuation\">.</span> <span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">upper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// LARAVEL FRAMEWORK</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-test\"><span class=\"link\"><code>test</code></span></h4>\n    <p>El <code>test</code>método determina si una cadena coincide con el patrón de expresión regular dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Laravel Framework'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/Laravel/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-title\"><span class=\"link\"><code>title</code></span></h4>\n    <p>El <code>title</code>método convierte la cadena dada a <code>Title Case</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$converted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'a nice title uses the correct case'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// A Nice Title Uses The Correct Case</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-trim\"><span class=\"link\"><code>trim</code></span></h4>\n    <p>El <code>trim</code>método recorta la cadena dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'  Laravel  '</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'Laravel'</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/Laravel/'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'Laravel'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-ucfirst\"><span class=\"link\"><code>ucfirst</code></span></h4>\n    <p>El <code>ucfirst</code>método devuelve la cadena dada con el primer carácter en mayúscula:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo bar'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ucfirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Foo bar</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-upper\"><span class=\"link\"><code>upper</code></span></h4>\n    <p>El <code>upper</code>método convierte la cadena dada a mayúsculas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$adjusted</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'laravel'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">upper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// LARAVEL</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-when\"><span class=\"link\"><code>when</code></span></h4>\n    <p>El <code>when</code>método invoca el cierre dado si una condición dada es <code>true</code>. El cierre recibirá la instancia de cadena fluida:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token boolean constant\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token variable\">$string</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">' Otwell'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'Taylor Otwell'</span></code></pre>\n    <p>Si es necesario, puede pasar otro cierre como tercer parámetro del <code>when</code>método. Este cierre se ejecutará si el parámetro de condición se evalúa como <code>false</code>.</p>\n    <p></p>\n    <h4 id=\"method-fluent-str-when-empty\"><span class=\"link\"><code>whenEmpty</code></span></h4>\n    <p>El <code>whenEmpty</code>método invoca el cierre dado si la cadena está vacía. Si el cierre devuelve un valor, el <code>whenEmpty</code>método también devolverá ese valor . Si el cierre no devuelve un valor, se devolverá la instancia de cadena fluida:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'  '</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whenEmpty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$string</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">prepend</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Laravel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 'Laravel'</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-word-count\"><span class=\"link\"><code>wordCount</code></span></h4>\n    <p>El <code>wordCount</code>método devuelve el número de palabras que contiene una cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\nStr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Hello, world!'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">wordCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre>\n    <p></p>\n    <h4 id=\"method-fluent-str-words\"><span class=\"link\"><code>words</code></span></h4>\n    <p>El <code>words</code>método limita el número de palabras en una cadena. Si es necesario, puede especificar una cadena adicional que se agregará a la cadena truncada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Str</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$string</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Perfectly balanced, as all things should be.'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">words</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">' &gt;&gt;&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Perfectly balanced, as &gt;&gt;&gt;</span></code></pre>\n    <p></p>\n    <h2 id=\"urls\"><span class=\"link\">URLs</span></h2>\n    <p></p>\n    <h4 id=\"method-action\"><span class=\"link\"><code>action()</code></span></h4>\n    <p>La <code>action</code>función genera una URL para la acción del controlador dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>HomeController</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>HomeController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'index'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si el método acepta parámetros de ruta, puede pasarlos como segundo argumento del método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>UserController<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'profile'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-asset\"><span class=\"link\"><code>asset()</code></span></h4>\n    <p>La <code>asset</code>función genera una URL para un activo utilizando el esquema actual de la solicitud (HTTP o HTTPS):</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">asset</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'img/photo.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede configurar el host de la URL del activo configurando la <code>ASSET_URL</code>variable en su <code>.env</code>archivo. Esto puede resultar útil si aloja sus activos en un servicio externo como Amazon S3 u otro CDN:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// ASSET_URL=http://example.com/assets</span>\n\n<span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">asset</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'img/photo.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// http://example.com/assets/img/photo.jpg</span></code></pre>\n    <p></p>\n    <h4 id=\"method-route\"><span class=\"link\"><code>route()</code></span></h4>\n    <p>La <code>route</code>función genera una URL para una <span class=\"link\">ruta con nombre</span> dada :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'route.name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si la ruta acepta parámetros, puede pasarlos como segundo argumento a la función:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'route.name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>De forma predeterminada, la <code>route</code>función genera una URL absoluta. Si desea generar una URL relativa, puede pasar <code>false</code>como tercer argumento a la función:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'route.name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-secure-asset\"><span class=\"link\"><code>secure_asset()</code></span></h4>\n    <p>La <code>secure_asset</code>función genera una URL para un activo usando HTTPS:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">secure_asset</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'img/photo.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-secure-url\"><span class=\"link\"><code>secure_url()</code></span></h4>\n    <p>La <code>secure_url</code>función genera una URL HTTPS completamente calificada para la ruta dada. Se pueden pasar segmentos de URL adicionales en el segundo argumento de la función:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">secure_url</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user/profile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">secure_url</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user/profile'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-url\"><span class=\"link\"><code>url()</code></span></h4>\n    <p>La <code>url</code>función genera una URL completamente calificada para la ruta dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user/profile'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user/profile'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si no se proporciona una ruta, <code>Illuminate\\Routing\\UrlGenerator</code>se devuelve una instancia:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$current</span> <span class=\"token operator\">=</span> <span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$full</span> <span class=\"token operator\">=</span> <span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">full</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$previous</span> <span class=\"token operator\">=</span> <span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">previous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"miscellaneous\"><span class=\"link\">Diverso</span></h2>\n    <p></p>\n    <h4 id=\"method-abort\"><span class=\"link\"><code>abort()</code></span></h4>\n    <p>La <code>abort</code>función lanza <span class=\"link\">una excepción HTTP</span> que será procesada por el <span class=\"link\">manejador de excepciones</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token number\">403</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede proporcionar el mensaje de la excepción y los encabezados de respuesta HTTP personalizados que deben enviarse al navegador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token number\">403</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Unauthorized.'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$headers</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-abort-if\"><span class=\"link\"><code>abort_if()</code></span></h4>\n    <p>La <code>abort_if</code>función lanza una excepción HTTP si una expresión booleana dada se evalúa como <code>true</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">abort_if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isAdmin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">403</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Al igual que el <code>abort</code>método, también puede proporcionar el texto de respuesta de la excepción como tercer argumento y una matriz de encabezados de respuesta personalizados como cuarto argumento de la función.</p>\n    <p></p>\n    <h4 id=\"method-abort-unless\"><span class=\"link\"><code>abort_unless()</code></span></h4>\n    <p>La <code>abort_unless</code>función lanza una excepción HTTP si una expresión booleana dada se evalúa como <code>false</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">abort_unless</span><span class=\"token punctuation\">(</span>Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isAdmin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">403</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Al igual que el <code>abort</code>método, también puede proporcionar el texto de respuesta de la excepción como tercer argumento y una matriz de encabezados de respuesta personalizados como cuarto argumento de la función.</p>\n    <p></p>\n    <h4 id=\"method-app\"><span class=\"link\"><code>app()</code></span></h4>\n    <p>La <code>app</code>función devuelve la instancia del <span class=\"link\">contenedor de servicios</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$container</span> <span class=\"token operator\">=</span> <span class=\"token function\">app</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede pasar un nombre de clase o interfaz para resolverlo desde el contenedor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$api</span> <span class=\"token operator\">=</span> <span class=\"token function\">app</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'HelpSpot\\API'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-auth\"><span class=\"link\"><code>auth()</code></span></h4>\n    <p>La <code>auth</code>función devuelve una instancia de <span class=\"link\">autenticador</span> . Puede utilizarlo como alternativa a la <code>Auth</code>fachada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si es necesario, puede especificar a qué instancia de guardia le gustaría acceder:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'admin'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-back\"><span class=\"link\"><code>back()</code></span></h4>\n    <p>La <code>back</code>función genera una <span class=\"link\">respuesta HTTP de redireccionamiento</span> a la ubicación anterior del usuario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$status</span> <span class=\"token operator\">=</span> <span class=\"token number\">302</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$headers</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$fallback</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-bcrypt\"><span class=\"link\"><code>bcrypt()</code></span></h4>\n    <p>La <code>bcrypt</code>función <span class=\"link\">calcula</span> el valor dado mediante Bcrypt. Puede utilizar esta función como alternativa a la <code>Hash</code>fachada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token function\">bcrypt</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'my-secret-password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-blank\"><span class=\"link\"><code>blank()</code></span></h4>\n    <p>La <code>blank</code>función determina si el valor dado está \"en blanco\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">blank</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">blank</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'   '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">blank</span><span class=\"token punctuation\">(</span><span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">blank</span><span class=\"token punctuation\">(</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token function\">blank</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">blank</span><span class=\"token punctuation\">(</span><span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">blank</span><span class=\"token punctuation\">(</span><span class=\"token boolean constant\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p>Para el inverso de <code>blank</code>, vea el <span class=\"link\"><code>filled</code></span>método.</p>\n    <p></p>\n    <h4 id=\"method-broadcast\"><span class=\"link\"><code>broadcast()</code></span></h4>\n    <p>La <code>broadcast</code>función <span class=\"link\">transmite</span> el <span class=\"link\">evento</span> dado a sus oyentes:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">broadcast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UserRegistered</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">broadcast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UserRegistered</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">toOthers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-cache\"><span class=\"link\"><code>cache()</code></span></h4>\n    <p>La <code>cache</code>función puede usarse para obtener valores de la <span class=\"link\">caché</span> . Si la clave dada no existe en la caché, se devolverá un valor predeterminado opcional:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token function\">cache</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token function\">cache</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'default'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede agregar elementos a la caché pasando una matriz de pares clave / valor a la función. También debe pasar la cantidad de segundos o la duración del valor en caché debe considerarse válido:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">cache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'key'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">cache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'key'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">addSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-class-uses-recursive\"><span class=\"link\"><code>class_uses_recursive()</code></span></h4>\n    <p>La <code>class_uses_recursive</code>función devuelve todos los rasgos usados \u200B\u200Bpor una clase, incluidos los rasgos usados \u200B\u200Bpor todas sus clases principales:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$traits</span> <span class=\"token operator\">=</span> <span class=\"token function\">class_uses_recursive</span><span class=\"token punctuation\">(</span>App\\<span class=\"token package\">Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-collect\"><span class=\"link\"><code>collect()</code></span></h4>\n    <p>La <code>collect</code>función crea una instancia de <span class=\"link\">colección a</span> partir del valor dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$collection</span> <span class=\"token operator\">=</span> <span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'taylor'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'abigail'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-config\"><span class=\"link\"><code>config()</code></span></h4>\n    <p>La <code>config</code>función obtiene el valor de una variable de <span class=\"link\">configuración</span> . Se puede acceder a los valores de configuración utilizando la sintaxis \"punto\", que incluye el nombre del archivo y la opción a la que desea acceder. Se puede especificar un valor predeterminado y se devuelve si la opción de configuración no existe:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'app.timezone'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'app.timezone'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$default</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede establecer variables de configuración en tiempo de ejecución pasando una matriz de pares clave / valor. Sin embargo, tenga en cuenta que esta función solo afecta el valor de configuración para la solicitud actual y no actualiza sus valores de configuración reales:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'app.debug'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-cookie\"><span class=\"link\"><code>cookie()</code></span></h4>\n    <p>La <code>cookie</code>función crea una nueva instancia de <span class=\"link\">cookie</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$cookie</span> <span class=\"token operator\">=</span> <span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$minutes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-csrf-field\"><span class=\"link\"><code>csrf_field()</code></span></h4>\n    <p>La <code>csrf_field</code>función genera un <code>hidden</code>campo de entrada HTML que contiene el valor del token CSRF. Por ejemplo, usando la <span class=\"link\">sintaxis Blade</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token function\">csrf_field</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h4 id=\"method-csrf-token\"><span class=\"link\"><code>csrf_token()</code></span></h4>\n    <p>La <code>csrf_token</code>función recupera el valor del token CSRF actual:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$token</span> <span class=\"token operator\">=</span> <span class=\"token function\">csrf_token</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-dd\"><span class=\"link\"><code>dd()</code></span></h4>\n    <p>La <code>dd</code>función vuelca las variables dadas y finaliza la ejecución del script:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">dd</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">dd</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value1</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value2</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si no desea detener la ejecución de su script, utilice la <span class=\"link\"><code>dump</code></span>función en su lugar.</p>\n    <p></p>\n    <h4 id=\"method-dispatch\"><span class=\"link\"><code>dispatch()</code></span></h4>\n    <p>La <code>dispatch</code>función empuja el <span class=\"link\">trabajo</span> dado a la <span class=\"link\">cola de trabajos de</span> Laravel :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">App<span class=\"token punctuation\">\\</span>Jobs<span class=\"token punctuation\">\\</span>SendEmails</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-dump\"><span class=\"link\"><code>dump()</code></span></h4>\n    <p>La <code>dump</code>función vuelca las variables dadas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value1</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value2</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea dejar de ejecutar el script después de volcar las variables, use la <span class=\"link\"><code>dd</code></span>función en su lugar.</p>\n    <p></p>\n    <h4 id=\"method-env\"><span class=\"link\"><code>env()</code></span></h4>\n    <p>La <code>env</code>función recupera el valor de una <span class=\"link\">variable de entorno</span> o devuelve un valor predeterminado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$env</span> <span class=\"token operator\">=</span> <span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'APP_ENV'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$env</span> <span class=\"token operator\">=</span> <span class=\"token function\">env</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'APP_ENV'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'production'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si ejecuta el <code>config:cache</code>comando durante su proceso de implementación, debe asegurarse de que solo está llamando a la <code>env</code>función desde sus archivos de configuración. Una vez que la configuración se haya almacenado en caché, el <code>.env</code>archivo no se cargará y todas las llamadas a la <code>env</code>función volverán <code>null</code>.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"method-event\"><span class=\"link\"><code>event()</code></span></h4>\n    <p>La <code>event</code>función envía el <span class=\"link\">evento</span> dado a sus oyentes:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">event</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UserRegistered</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-filled\"><span class=\"link\"><code>filled()</code></span></h4>\n    <p>La <code>filled</code>función determina si el valor dado no está \"en blanco\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">filled</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">filled</span><span class=\"token punctuation\">(</span><span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">filled</span><span class=\"token punctuation\">(</span><span class=\"token boolean constant\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token function\">filled</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">filled</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'   '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">filled</span><span class=\"token punctuation\">(</span><span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">filled</span><span class=\"token punctuation\">(</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p>Para el inverso de <code>filled</code>, vea el <span class=\"link\"><code>blank</code></span>método.</p>\n    <p></p>\n    <h4 id=\"method-info\"><span class=\"link\"><code>info()</code></span></h4>\n    <p>La <code>info</code>función escribirá información en el <span class=\"link\">registro de</span> su aplicación :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Some helpful information!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También se puede pasar una matriz de datos contextuales a la función:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'User login attempt failed.'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-logger\"><span class=\"link\"><code>logger()</code></span></h4>\n    <p>La <code>logger</code>función se puede utilizar para escribir un <code>debug</code>mensaje de nivel en el <span class=\"link\">registro</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Debug message'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También se puede pasar una matriz de datos contextuales a la función:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'User has logged in.'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Se devolverá una instancia de <span class=\"link\">registrador</span> si no se pasa ningún valor a la función:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'You are not allowed here.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-method-field\"><span class=\"link\"><code>method_field()</code></span></h4>\n    <p>La <code>method_field</code>función genera un <code>hidden</code>campo de entrada HTML que contiene el valor falsificado del verbo HTTP del formulario. Por ejemplo, usando la <span class=\"link\">sintaxis Blade</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>form method<span class=\"token operator\">=</span><span class=\"token double-quoted-string string\">\"POST\"</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token function\">method_field</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'DELETE'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">&gt;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-now\"><span class=\"link\"><code>now()</code></span></h4>\n    <p>La <code>now</code>función crea una nueva <code>Illuminate\\Support\\Carbon</code>instancia para la hora actual:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$now</span> <span class=\"token operator\">=</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-old\"><span class=\"link\"><code>old()</code></span></h4>\n    <p>La <code>old</code>función <span class=\"link\">recupera</span> un valor de <span class=\"link\">entrada antiguo</span> que apareció en la sesión:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token function\">old</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token function\">old</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'default'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-optional\"><span class=\"link\"><code>optional()</code></span></h4>\n    <p>La <code>optional</code>función acepta cualquier argumento y le permite acceder a las propiedades o llamar a métodos en ese objeto. Si el objeto dado es <code>null</code>, las propiedades y los métodos regresarán en <code>null</code>lugar de causar un error:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">address</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">street</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">{</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span> <span class=\"token function\">old</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">}</span></code></pre>\n    <p>La <code>optional</code>función también acepta un cierre como segundo argumento. El cierre se invocará si el valor proporcionado como primer argumento no es nulo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">optional</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-policy\"><span class=\"link\"><code>policy()</code></span></h4>\n    <p>El <code>policy</code>método recupera una instancia de <span class=\"link\">política</span> para una clase determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$policy</span> <span class=\"token operator\">=</span> <span class=\"token function\">policy</span><span class=\"token punctuation\">(</span>App\\<span class=\"token package\">Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-redirect\"><span class=\"link\"><code>redirect()</code></span></h4>\n    <p>La <code>redirect</code>función devuelve una <span class=\"link\">respuesta HTTP de redireccionamiento</span> o devuelve la instancia del redirector si se llama sin argumentos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$to</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$status</span> <span class=\"token operator\">=</span> <span class=\"token number\">302</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$headers</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$https</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/home'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'route.name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-report\"><span class=\"link\"><code>report()</code></span></h4>\n    <p>La <code>report</code>función informará una excepción utilizando su <span class=\"link\">controlador de excepciones</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>La <code>report</code>función también acepta una cadena como argumento. Cuando se le da una cadena a la función, la función creará una excepción con la cadena dada como su mensaje:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Something went wrong.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-request\"><span class=\"link\"><code>request()</code></span></h4>\n    <p>La <code>request</code>función devuelve la instancia de <span class=\"link\">solicitud</span> actual u obtiene el valor de un campo de entrada de la solicitud actual:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$request</span> <span class=\"token operator\">=</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$default</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-rescue\"><span class=\"link\"><code>rescue()</code></span></h4>\n    <p>La <code>rescue</code>función ejecuta el cierre dado y detecta cualquier excepción que ocurra durante su ejecución. Todas las excepciones que se detectan se enviarán a su <span class=\"link\">controlador de excepciones</span> ; sin embargo, la solicitud continuará procesándose:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">rescue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede pasar un segundo argumento a la <code>rescue</code>función. Este argumento será el valor \"predeterminado\" que se debe devolver si ocurre una excepción al ejecutar el cierre:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">rescue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token function\">rescue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-resolve\"><span class=\"link\"><code>resolve()</code></span></h4>\n    <p>La <code>resolve</code>función resuelve un nombre de interfaz o clase determinada en una instancia mediante el <span class=\"link\">contenedor de servicios</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$api</span> <span class=\"token operator\">=</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'HelpSpot\\API'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-response\"><span class=\"link\"><code>response()</code></span></h4>\n    <p>La <code>response</code>función crea una instancia de <span class=\"link\">respuesta</span> u obtiene una instancia de la fábrica de respuestas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Hello World'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$headers</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'bar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$headers</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-retry\"><span class=\"link\"><code>retry()</code></span></h4>\n    <p>La <code>retry</code>función intenta ejecutar la devolución de llamada dada hasta que se alcanza el umbral de intento máximo dado. Si la devolución de llamada no arroja una excepción, se devolverá su valor de retorno. Si la devolución de llamada arroja una excepción, se reintentará automáticamente. Si se excede el recuento máximo de intentos, se lanzará la excepción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">retry</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Attempt 5 times while resting 100ms in between attempts...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea calcular manualmente la cantidad de milisegundos para dormir entre intentos, puede pasar un cierre como tercer argumento de la <code>retry</code>función:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">retry</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$attempt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$attempt</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Para reintentar solo bajo condiciones específicas, puede pasar un cierre como cuarto argumento a la <code>retry</code>función:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">retry</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$exception</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$exception</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RetryException</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-session\"><span class=\"link\"><code>session()</code></span></h4>\n    <p>La <code>session</code>función se puede utilizar para obtener o establecer valores de <span class=\"link\">sesión</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede establecer valores pasando una matriz de pares clave / valor a la función:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'chairs'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'instruments'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El almacén de sesiones se devolverá si no se pasa ningún valor a la función:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-tap\"><span class=\"link\"><code>tap()</code></span></h4>\n    <p>La <code>tap</code>función acepta dos argumentos: uno arbitrario <code>$value</code>y un cierre. Se <code>$value</code>pasará al cierre y luego la <code>tap</code>función lo devolverá . El valor de retorno del cierre es irrelevante:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token function\">tap</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'taylor'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si no se pasa ningún cierre a la <code>tap</code>función, puede llamar a cualquier método en el dado <code>$value</code>. El valor de retorno del método que llame siempre será <code>$value</code>, independientemente de lo que el método realmente devuelva en su definición. Por ejemplo, el <code>update</code>método Eloquent generalmente devuelve un número entero. Sin embargo, podemos forzar al método a que devuelva el modelo en sí encadenando la <code>update</code>llamada al método a través de la <code>tap</code>función:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$email</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Para agregar un <code>tap</code>método a una clase, puede agregar el <code>Illuminate\\Support\\Traits\\Tappable</code>rasgo a la clase. El <code>tap</code>método de este rasgo acepta un cierre como su único argumento. La instancia del objeto en sí se pasará al cierre y luego será devuelta por el <code>tap</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-throw-if\"><span class=\"link\"><code>throw_if()</code></span></h4>\n    <p>La <code>throw_if</code>función lanza la excepción dada si una expresión booleana dada se evalúa como <code>true</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">throw_if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isAdmin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> AuthorizationException<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">throw_if</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">!</span> Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isAdmin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    AuthorizationException<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'You are not allowed to access this page.'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-throw-unless\"><span class=\"link\"><code>throw_unless()</code></span></h4>\n    <p>La <code>throw_unless</code>función lanza la excepción dada si una expresión booleana dada se evalúa como <code>false</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token function\">throw_unless</span><span class=\"token punctuation\">(</span>Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isAdmin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> AuthorizationException<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">throw_unless</span><span class=\"token punctuation\">(</span>\n    Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isAdmin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    AuthorizationException<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'You are not allowed to access this page.'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-today\"><span class=\"link\"><code>today()</code></span></h4>\n    <p>La <code>today</code>función crea una nueva <code>Illuminate\\Support\\Carbon</code>instancia para la fecha actual:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$today</span> <span class=\"token operator\">=</span> <span class=\"token function\">today</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-trait-uses-recursive\"><span class=\"link\"><code>trait_uses_recursive()</code></span></h4>\n    <p>La <code>trait_uses_recursive</code>función devuelve todos los rasgos utilizados por un rasgo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$traits</span> <span class=\"token operator\">=</span> <span class=\"token function\">trait_uses_recursive</span><span class=\"token punctuation\">(</span>\\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Notifications<span class=\"token punctuation\">\\</span>Notifiable</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-transform\"><span class=\"link\"><code>transform()</code></span></h4>\n    <p>La <code>transform</code>función ejecuta un cierre en un valor dado si el valor no está en <span class=\"link\">blanco</span> y luego devuelve el valor de retorno del cierre:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$callback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 10</span></code></pre>\n    <p>Se puede pasar un valor predeterminado o un cierre como tercer argumento de la función. Este valor se devolverá si el valor dado está en blanco:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token constant\">null</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'The value is blank'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The value is blank</span></code></pre>\n    <p></p>\n    <h4 id=\"method-validator\"><span class=\"link\"><code>validator()</code></span></h4>\n    <p>La <code>validator</code>función crea una nueva instancia de <span class=\"link\">validador</span> con los argumentos dados. Puede utilizarlo como alternativa a la <code>Validator</code>fachada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$validator</span> <span class=\"token operator\">=</span> <span class=\"token function\">validator</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$rules</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$messages</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-value\"><span class=\"link\"><code>value()</code></span></h4>\n    <p>La <code>value</code>función devuelve el valor que se le da. Sin embargo, si pasa un cierre a la función, el cierre se ejecutará y se devolverá su valor devuelto:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// false</span></code></pre>\n    <p></p>\n    <h4 id=\"method-view\"><span class=\"link\"><code>view()</code></span></h4>\n    <p>La <code>view</code>función recupera una instancia de <span class=\"link\">vista</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'auth.login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"method-with\"><span class=\"link\"><code>with()</code></span></h4>\n    <p>La <code>with</code>función devuelve el valor que se le da. Si se pasa un cierre como segundo argumento de la función, el cierre se ejecutará y se devolverá su valor devuelto:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$callback</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 10</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token constant\">null</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$callback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 0</span>\n\n<span class=\"token variable\">$result</span> <span class=\"token operator\">=</span> <span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 5</span></code></pre>\n</div>"
    },
    {
        "title": "Cliente HTTP",
        "subtitle": "LARAVEL AVANZADO",
        "contenido": "<div>\n    <h1>Cliente HTTP</h1>\n    <p></p>\n    <h2><span class=\"link\">Introducción</span></h2>\n    <p>Laravel proporciona una API mínima y expresiva alrededor del <span class=\"link\">cliente HTTP Guzzle</span> , lo que le permite realizar rápidamente solicitudes HTTP salientes para comunicarse con otras aplicaciones web. El envoltorio de Laravel en torno a Guzzle se centra en sus casos de uso más comunes y en una maravillosa experiencia de desarrollador.</p>\n    <p>Antes de comenzar, debe asegurarse de haber instalado el paquete Guzzle como una dependencia de su aplicación. De forma predeterminada, Laravel incluye automáticamente esta dependencia. Sin embargo, si ha eliminado previamente el paquete, puede instalarlo de nuevo a través de Composer:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">composer <span class=\"token keyword\">require</span> guzzlehttp<span class=\"token operator\">/</span>guzzle</code></pre>\n    <p></p>\n    <h2 id=\"making-requests\"><span class=\"link\">Haciendo peticiones</span></h2>\n    <p>Para realizar solicitudes, es posible utilizar los <code>get</code>, <code>post</code>, <code>put</code>, <code>patch</code>, y <code>delete</code>métodos proporcionados por la <code>Http</code>fachada. Primero, examinemos cómo realizar una <code>GET</code>solicitud básica a otra URL:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Http</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://example.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>get</code>método devuelve una instancia de <code>Illuminate\\Http\\Client\\Response</code>, que proporciona una variedad de métodos que pueden usarse para inspeccionar la respuesta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">array</span><span class=\"token operator\">|</span>mixed<span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> object<span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> Illuminate\\<span class=\"token package\">Support<span class=\"token punctuation\">\\</span>Collection</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> bool<span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">successful</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> bool<span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">failed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> bool<span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">serverError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> bool<span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">clientError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> bool<span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$header</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>Illuminate\\Http\\Client\\Response</code>objeto también implementa la <code>ArrayAccess</code>interfaz PHP , lo que le permite acceder a los datos de respuesta JSON directamente en la respuesta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://example.com/users/1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"dumping-requests\"><span class=\"link\">Solicitudes de dumping</span></h4>\n    <p>Si desea volcar la instancia de solicitud saliente antes de que se envíe y finalizar la ejecución del script, puede agregar el <code>dd</code>método al comienzo de la definición de su solicitud:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">dd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://example.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"request-data\"><span class=\"link\">Solicitar datos</span></h3>\n    <p>Por supuesto, es común al hacer <code>POST</code>, <code>PUT</code>y <code>PATCH</code>las solicitudes para enviar datos adicionales con su petición, por lo que estos métodos aceptan una serie de datos como su segundo argumento. De forma predeterminada, los datos se enviarán utilizando el <code>application/json</code>tipo de contenido:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Http</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://example.com/users'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Steve'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'role'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Network Administrator'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"get-request-query-parameters\"><span class=\"link\">Parámetros de consulta de solicitud GET</span></h4>\n    <p>Al realizar <code>GET</code>solicitudes, puede agregar una cadena de consulta a la URL directamente o pasar una matriz de pares clave / valor como segundo argumento del <code>get</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://example.com/users'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'page'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"sending-form-url-encoded-requests\"><span class=\"link\">Envío de solicitudes codificadas con URL de formulario</span></h4>\n    <p>Si desea enviar datos utilizando el <code>application/x-www-form-urlencoded</code>tipo de contenido, debe llamar al <code>asForm</code>método antes de realizar su solicitud:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">asForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://example.com/users'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Sara'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'role'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Privacy Consultant'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"sending-a-raw-request-body\"><span class=\"link\">Envío de un cuerpo de solicitud sin procesar</span></h4>\n    <p>Puede utilizar el <code>withBody</code>método si desea proporcionar un cuerpo de solicitud sin formato al realizar una solicitud. El tipo de contenido se puede proporcionar a través del segundo argumento del método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withBody</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">base64_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$photo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'image/jpeg'</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://example.com/photo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"multi-part-requests\"><span class=\"link\">Solicitudes de varias partes</span></h4>\n    <p>Si desea enviar archivos como solicitudes de varias partes, debe llamar al <code>attach</code>método antes de realizar su solicitud. Este método acepta el nombre del archivo y su contenido. Si es necesario, puede proporcionar un tercer argumento que se considerará el nombre de archivo del archivo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'attachment'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'photo.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'photo.jpg'</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://example.com/attachments'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>En lugar de pasar el contenido sin procesar de un archivo, puede pasar un recurso de transmisión:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$photo</span> <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'photo.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'r'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'attachment'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$photo</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'photo.jpg'</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://example.com/attachments'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"headers\"><span class=\"link\">Encabezados</span></h3>\n    <p>Se pueden agregar encabezados a las solicitudes utilizando el <code>withHeaders</code>método. Este <code>withHeaders</code>método acepta una matriz de pares clave / valor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'X-First'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'X-Second'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'bar'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://example.com/users'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede utilizar el <code>accept</code>método para especificar el tipo de contenido que espera su aplicación en respuesta a su solicitud:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'application/json'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://example.com/users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Por conveniencia, puede usar el <code>acceptJson</code>método para especificar rápidamente que su aplicación espera el <code>application/json</code>tipo de contenido en respuesta a su solicitud:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">acceptJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://example.com/users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"authentication\"><span class=\"link\">Autenticación</span></h3>\n    <p>Puede especificar las credenciales de autenticación básicas y resumidas utilizando los métodos <code>withBasicAuth</code>y <code>withDigestAuth</code>, respectivamente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Basic authentication...</span>\n<span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withBasicAuth</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'taylor@laravel.com'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'secret'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Digest authentication...</span>\n<span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withDigestAuth</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'taylor@laravel.com'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'secret'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"bearer-tokens\"><span class=\"link\">Fichas de portador</span></h4>\n    <p>Si desea agregar rápidamente un token de portador al <code>Authorization</code>encabezado de la solicitud , puede usar el <code>withToken</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withToken</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'token'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"timeout\"><span class=\"link\">Se acabó el tiempo</span></h3>\n    <p>El <code>timeout</code>método puede usarse para especificar el número máximo de segundos para esperar una respuesta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si se excede el tiempo de espera dado, se <code>Illuminate\\Http\\Client\\ConnectionException</code>lanzará una instancia de .</p>\n    <p></p>\n    <h3 id=\"retries\"><span class=\"link\">Reintentos</span></h3>\n    <p>Si desea que el cliente HTTP vuelva a intentar automáticamente la solicitud si se produce un error de cliente o servidor, puede utilizar el <code>retry</code>método. El <code>retry</code>método acepta la cantidad máxima de veces que se debe intentar la solicitud y la cantidad de milisegundos que Laravel debe esperar entre intentos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">retry</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si es necesario, puede pasar un tercer argumento al <code>retry</code>método. El tercer argumento debe ser un invocable que determine si realmente se deben intentar los reintentos. Por ejemplo, es posible que desee volver a intentar la solicitud solo si la solicitud inicial encuentra un <code>ConnectionException</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">retry</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$exception</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$exception</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ConnectionException</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si todas las solicitudes fallan, se <code>Illuminate\\Http\\Client\\RequestException</code>lanzará una instancia de .</p>\n    <p></p>\n    <h3 id=\"error-handling\"><span class=\"link\">Manejo de errores</span></h3>\n    <p>A diferencia del comportamiento predeterminado de Guzzle, el contenedor del cliente HTTP de Laravel no arroja excepciones en los errores del cliente o del servidor ( <code>400</code>y <code>500</code>respuestas de nivel de los servidores). Es posible determinar si uno de estos errores fue devuelto con el <code>successful</code>, <code>clientError</code>, o <code>serverError</code>métodos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Determine if the status code is &gt;= 200 and &lt; 300...</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">successful</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Determine if the status code is &gt;= 400...</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">failed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Determine if the response has a 400 level status code...</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">clientError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Determine if the response has a 500 level status code...</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">serverError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"throwing-exceptions\"><span class=\"link\">Lanzar excepciones</span></h4>\n    <p>Si tiene una instancia de respuesta y le gustaría lanzar una instancia de <code>Illuminate\\Http\\Client\\RequestException</code>si el código de estado de respuesta indica un error de cliente o servidor, puede usar el <code>throw</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Throw an exception if a client or server error occurred...</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$response</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'user'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>La <code>Illuminate\\Http\\Client\\RequestException</code>instancia tiene una <code>$response</code>propiedad pública que le permitirá inspeccionar la respuesta devuelta.</p>\n    <p>El <code>throw</code>método devuelve la instancia de respuesta si no se produjo ningún error, lo que le permite encadenar otras operaciones en el <code>throw</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea realizar alguna lógica adicional antes de que se lance la excepción, puede pasar un cierre al <code>throw</code>método. La excepción se lanzará automáticamente después de que se invoque el cierre, por lo que no es necesario volver a lanzar la excepción desde dentro del cierre:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$response</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"guzzle-options\"><span class=\"link\">Opciones de Guzzle</span></h3>\n    <p>Puede especificar <span class=\"link\">opciones</span> adicionales de <span class=\"link\">solicitud de Guzzle</span> utilizando el <code>withOptions</code>método. El <code>withOptions</code>método acepta una matriz de pares clave / valor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'debug'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://example.com/users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"concurrent-requests\"><span class=\"link\">Solicitudes concurrentes</span></h2>\n    <p>A veces, es posible que desee realizar varias solicitudes HTTP al mismo tiempo. En otras palabras, desea que se envíen varias solicitudes al mismo tiempo en lugar de emitir las solicitudes de forma secuencial. Esto puede generar mejoras sustanciales en el rendimiento al interactuar con API HTTP lentas.</p>\n    <p>Afortunadamente, puede lograr esto usando el <code>pool</code>método. El <code>pool</code>método acepta un cierre que recibe una <code>Illuminate\\Http\\Client\\Pool</code>instancia, lo que le permite agregar fácilmente solicitudes al grupo de solicitudes para su envío:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Client<span class=\"token punctuation\">\\</span>Pool</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Http</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$responses</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">pool</span><span class=\"token punctuation\">(</span>fn <span class=\"token punctuation\">(</span>Pool <span class=\"token variable\">$pool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token variable\">$pool</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://localhost/first'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$pool</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://localhost/second'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$pool</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://localhost/third'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$responses</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n       <span class=\"token variable\">$responses</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n       <span class=\"token variable\">$responses</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Como puede ver, se puede acceder a cada instancia de respuesta según el orden en que se agregó al grupo. Si lo desea, puede nombrar las solicitudes utilizando el <code>as</code>método, que le permite acceder a las respuestas correspondientes por nombre:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Client<span class=\"token punctuation\">\\</span>Pool</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Http</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$responses</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">pool</span><span class=\"token punctuation\">(</span>fn <span class=\"token punctuation\">(</span>Pool <span class=\"token variable\">$pool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token variable\">$pool</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'first'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://localhost/first'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$pool</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'second'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://localhost/second'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token variable\">$pool</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'third'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://localhost/third'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$responses</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'first'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"testing\"><span class=\"link\">Pruebas</span></h2>\n    <p>Muchos servicios de Laravel brindan funcionalidad para ayudarlo a escribir pruebas de manera fácil y expresiva, y el contenedor HTTP de Laravel no es una excepción. El método de <code>Http</code>la fachada le <code>fake</code>permite indicar al cliente HTTP que devuelva respuestas falsas / ficticias cuando se realizan solicitudes.</p>\n    <p></p>\n    <h3 id=\"faking-responses\"><span class=\"link\">Respuestas falsas</span></h3>\n    <p>Por ejemplo, para indicarle al cliente HTTP que devuelva <code>200</code>respuestas de código de estado vacías para cada solicitud, puede llamar al <code>fake</code>método sin argumentos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Http</span><span class=\"token punctuation\">;</span>\n\nHttp<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Al falsificar solicitudes, el middleware del cliente HTTP no se ejecuta. Debe definir las expectativas para las respuestas falsas como si estos middleware se hubieran ejecutado correctamente.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"faking-specific-urls\"><span class=\"link\">Falsificación de URL específicas</span></h4>\n    <p>Alternativamente, puede pasar una matriz al <code>fake</code>método. Las claves de la matriz deben representar patrones de URL que desea falsificar y sus respuestas asociadas. El <code>*</code>carácter se puede utilizar como carácter comodín. Todas las solicitudes realizadas a URL que no hayan sido falsificadas se ejecutarán. Puede usar el método de la <code>Http</code>fachada <code>response</code>para construir respuestas falsas / falsas para estos puntos finales:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// Stub a JSON response for GitHub endpoints...</span>\n    <span class=\"token single-quoted-string string\">'github.com/*'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'bar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$headers</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Stub a string response for Google endpoints...</span>\n    <span class=\"token single-quoted-string string\">'google.com/*'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Hello World'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$headers</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea especificar un patrón de URL de respaldo que eliminará todas las URL que no coinciden, puede usar un solo <code>*</code>carácter:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// Stub a JSON response for GitHub endpoints...</span>\n    <span class=\"token single-quoted-string string\">'github.com/*'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'bar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Headers'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// Stub a string response for all other endpoints...</span>\n    <span class=\"token single-quoted-string string\">'*'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Hello World'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Headers'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"faking-response-sequences\"><span class=\"link\">Secuencias de respuesta falsas</span></h4>\n    <p>A veces, es posible que deba especificar que una única URL debe devolver una serie de respuestas falsas en un orden específico. Puede lograr esto usando el <code>Http::sequence</code>método para construir las respuestas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// Stub a series of responses for GitHub endpoints...</span>\n    <span class=\"token single-quoted-string string\">'github.com/*'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">sequence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Hello World'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'bar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pushStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Cuando se hayan consumido todas las respuestas en una secuencia de respuesta, cualquier solicitud adicional hará que la secuencia de respuesta arroje una excepción. Si desea especificar una respuesta predeterminada que debe devolverse cuando una secuencia está vacía, puede usar el <code>whenEmpty</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// Stub a series of responses for GitHub endpoints...</span>\n    <span class=\"token single-quoted-string string\">'github.com/*'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">sequence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Hello World'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'bar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whenEmpty</span><span class=\"token punctuation\">(</span>Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea falsificar una secuencia de respuestas pero no necesita especificar un patrón de URL específico que deba falsificarse, puede usar el <code>Http::fakeSequence</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">fakeSequence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Hello World'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whenEmpty</span><span class=\"token punctuation\">(</span>Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"fake-callback\"><span class=\"link\">Devolución de llamada falsa</span></h4>\n    <p>Si necesita una lógica más complicada para determinar qué respuestas devolver para ciertos puntos finales, puede pasar un cierre al <code>fake</code>método. Este cierre recibirá una instancia de <code>Illuminate\\Http\\Client\\Request</code>y debería devolver una instancia de respuesta. Dentro de su cierre, puede realizar cualquier lógica que sea necesaria para determinar qué tipo de respuesta devolver:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">response</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Hello World'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"inspecting-requests\"><span class=\"link\">Inspección de solicitudes</span></h3>\n    <p>Al falsificar respuestas, es posible que ocasionalmente desee inspeccionar las solicitudes que recibe el cliente para asegurarse de que su aplicación envíe los datos o encabezados correctos. Puede lograr esto llamando al <code>Http::assertSent</code>método después de llamar <code>Http::fake</code>.</p>\n    <p>El <code>assertSent</code>método acepta un cierre que recibirá una <code>Illuminate\\Http\\Client\\Request</code>instancia y debería devolver un valor booleano que indique si la solicitud coincide con sus expectativas. Para que la prueba pase, se debe haber emitido al menos una solicitud que coincida con las expectativas dadas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Client<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Http</span><span class=\"token punctuation\">;</span>\n\nHttp<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nHttp<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'X-First'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://example.com/users'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'role'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Developer'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nHttp<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">assertSent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasHeader</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'X-First'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n           <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token single-quoted-string string\">'http://example.com/users'</span> <span class=\"token operator\">&amp;&amp;</span>\n           <span class=\"token variable\">$request</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token single-quoted-string string\">'Taylor'</span> <span class=\"token operator\">&amp;&amp;</span>\n           <span class=\"token variable\">$request</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'role'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token single-quoted-string string\">'Developer'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si es necesario, puede afirmar que no se envió una solicitud específica mediante el <code>assertNotSent</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Client<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Http</span><span class=\"token punctuation\">;</span>\n\nHttp<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nHttp<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'http://example.com/users'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'role'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Developer'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nHttp<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">assertNotSent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token single-quoted-string string\">'http://example.com/posts'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>O puede usar el <code>assertNothingSent</code>método para afirmar que no se enviaron solicitudes durante la prueba:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Http<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nHttp<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">assertNothingSent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"events\"><span class=\"link\">Eventos</span></h2>\n    <p>Laravel dispara tres eventos durante el proceso de envío de solicitudes HTTP. El <code>RequestSending</code>evento se activa antes de que se envíe una solicitud, mientras que el <code>ResponseReceived</code>evento se activa después de recibir una respuesta para una solicitud determinada. El <code>ConnectionFailed</code>evento se activa si no se recibe respuesta para una solicitud determinada.</p>\n    <p>Los eventos <code>RequestSending</code>y <code>ConnectionFailed</code>contienen una <code>$request</code>propiedad pública que puede usar para inspeccionar la <code>Illuminate\\Http\\Client\\Request</code>instancia. Asimismo, el <code>ResponseReceived</code>evento contiene una <code>$request</code>propiedad, así como una <code>$response</code>propiedad que se puede utilizar para inspeccionar la <code>Illuminate\\Http\\Client\\Response</code>instancia. Puede registrar oyentes de eventos para este evento en su <code>App\\Providers\\EventServiceProvider</code>proveedor de servicios:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The event listener mappings for the application.\n *\n * @var array\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$listen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'Illuminate\\Http\\Client\\Events\\RequestSending'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'App\\Listeners\\LogRequestSending'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'Illuminate\\Http\\Client\\Events\\ResponseReceived'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'App\\Listeners\\LogResponseReceived'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'Illuminate\\Http\\Client\\Events\\ConnectionFailed'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'App\\Listeners\\LogConnectionFailed'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n</div>"
    },
    {
        "title": "Localización",
        "subtitle": "LARAVEL AVANZADO",
        "contenido": "<div>\n    <h1>Localización</h1>\n    <p></p>\n    <h2><span class=\"link\">Introducción</span></h2>\n    <p>Las funciones de localización de Laravel brindan una forma conveniente de recuperar cadenas en varios idiomas, lo que le permite admitir fácilmente varios idiomas dentro de su aplicación.</p>\n    <p>Laravel proporciona dos formas de administrar cadenas de traducción. Primero, las cadenas de idioma se pueden almacenar en archivos dentro del <code>resources/lang</code>directorio. Dentro de este directorio, puede haber subdirectorios para cada idioma admitido por la aplicación. Este es el enfoque que usa Laravel para administrar cadenas de traducción para funciones integradas de Laravel, como mensajes de error de validación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">/</span>resources\n    <span class=\"token operator\">/</span>lang\n        <span class=\"token operator\">/</span>en\n            messages<span class=\"token punctuation\">.</span>php\n        <span class=\"token operator\">/</span>es\n            messages<span class=\"token punctuation\">.</span>php</code></pre>\n    <p>O bien, las cadenas de traducción se pueden definir dentro de los archivos JSON que se colocan dentro del <code>resources/lang</code>directorio. Al adoptar este enfoque, cada idioma admitido por su aplicación tendría un archivo JSON correspondiente dentro de este directorio. Este enfoque se recomienda para aplicaciones que tienen una gran cantidad de cadenas traducibles:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">/</span>resources\n    <span class=\"token operator\">/</span>lang\n        en<span class=\"token punctuation\">.</span>json\n        es<span class=\"token punctuation\">.</span>json</code></pre>\n    <p>Discutiremos cada enfoque para administrar cadenas de traducción dentro de esta documentación.</p>\n    <p></p>\n    <h3 id=\"configuring-the-locale\"><span class=\"link\">Configuración de la configuración regional</span></h3>\n    <p>El idioma predeterminado para su aplicación se almacena en la opción de configuración <code>config/app.php</code>del archivo de <code>locale</code>configuración. Puede modificar este valor para adaptarlo a las necesidades de su aplicación.</p>\n    <p>Puede modificar el idioma predeterminado para una sola solicitud HTTP en tiempo de ejecución utilizando el <code>setLocale</code>método proporcionado por la <code>App</code>fachada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>App</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/greeting/{locale}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$locale</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$locale</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'en'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'es'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'fr'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    App<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">setLocale</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$locale</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede configurar un \"idioma alternativo\", que se utilizará cuando el idioma activo no contenga una cadena de traducción determinada. Al igual que el idioma predeterminado, el idioma de reserva también se configura en el <code>config/app.php</code>archivo de configuración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'fallback_locale'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'en'</span><span class=\"token punctuation\">,</span></code></pre>\n    <p></p>\n    <h4 id=\"determining-the-current-locale\"><span class=\"link\">Determinar la configuración regional actual</span></h4>\n    <p>Puede usar los métodos <code>currentLocale</code>y <code>isLocale</code>en la <code>App</code>fachada para determinar la configuración regional actual o verificar si la configuración regional es un valor dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>App</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$locale</span> <span class=\"token operator\">=</span> App<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">currentLocale</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">isLocale</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'en'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h2 id=\"defining-translation-strings\"><span class=\"link\">Definición de cadenas de traducción</span></h2>\n    <p></p>\n    <h3 id=\"using-short-keys\"><span class=\"link\">Uso de teclas cortas</span></h3>\n    <p>Normalmente, las cadenas de traducción se almacenan en archivos dentro del <code>resources/lang</code>directorio. Dentro de este directorio, debe haber un subdirectorio para cada idioma admitido por su aplicación. Este es el enfoque que usa Laravel para administrar cadenas de traducción para funciones integradas de Laravel, como mensajes de error de validación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">/</span>resources\n    <span class=\"token operator\">/</span>lang\n        <span class=\"token operator\">/</span>en\n            messages<span class=\"token punctuation\">.</span>php\n        <span class=\"token operator\">/</span>es\n            messages<span class=\"token punctuation\">.</span>php</code></pre>\n    <p>Todos los archivos de idioma devuelven una matriz de cadenas con clave. Por ejemplo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token comment\">// resources/lang/en/messages.php</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'welcome'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Welcome to our application!'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p> Para los idiomas que difieren según el territorio, debe nombrar los directorios de idiomas de acuerdo con la norma ISO 15897. Por ejemplo, \"en_GB\" debe usarse para el inglés británico en lugar de \"en-gb\".</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"using-translation-strings-as-keys\"><span class=\"link\">Usar cadenas de traducción como claves</span></h3>\n    <p>Para aplicaciones con una gran cantidad de cadenas traducibles, definir cada cadena con una \"clave corta\" puede resultar confuso al hacer referencia a las claves en sus vistas y es engorroso inventar continuamente claves para cada cadena de traducción admitida por su aplicación.</p>\n    <p>Por esta razón, Laravel también proporciona soporte para definir cadenas de traducción usando la traducción \"predeterminada\" de la cadena como clave. Los archivos de traducción que utilizan cadenas de traducción como claves se almacenan como archivos JSON en el <code>resources/lang</code>directorio. Por ejemplo, si su aplicación tiene una traducción al español, debe crear un <code>resources/lang/es.json</code>archivo:</p>\n    <pre class=\" language-js\"><code class=\" language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"I love programming.\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Me encanta programar.\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <h4>Conflictos de clave / archivo</h4>\n    <p>No debe definir claves de cadenas de traducción que entren en conflicto con otros nombres de archivos de traducción. Por ejemplo, traducir <code>__('Action')</code>para la configuración regional \"NL\" mientras <code>nl/action.php</code>existe un <code>nl.json</code>archivo pero no existe un archivo dará como resultado que el traductor devuelva el contenido de <code>nl/action.php</code>.</p>\n    <p></p>\n    <h2 id=\"retrieving-translation-strings\"><span class=\"link\">Recuperando cadenas de traducción</span></h2>\n    <p>Puede recuperar cadenas de traducción de sus archivos de idioma utilizando la <code>__</code>función auxiliar. Si está usando \"claves cortas\" para definir sus cadenas de traducción, debe pasar el archivo que contiene la clave y la clave misma a la <code>__</code>función usando la sintaxis de \"punto\". Por ejemplo, recuperemos la <code>welcome</code>cadena de traducción del <code>resources/lang/en/messages.php</code>archivo de idioma:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">echo</span> <span class=\"token function\">__</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'messages.welcome'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si la cadena de traducción especificada no existe, la <code>__</code>función devolverá la clave de la cadena de traducción. Entonces, usando el ejemplo anterior, la <code>__</code>función regresaría <code>messages.welcome</code>si la cadena de traducción no existe.</p>\n    <p>Si está utilizando sus <span class=\"link\">cadenas de traducción predeterminadas como claves de traducción</span> , debe pasar la traducción predeterminada de su cadena a la <code>__</code>función;</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">echo</span> <span class=\"token function\">__</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'I love programming.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Nuevamente, si la cadena de traducción no existe, la <code>__</code>función devolverá la clave de la cadena de traducción que se le dio.</p>\n    <p>Si está utilizando el <span class=\"link\">motor de plantillas Blade</span> , puede utilizar la <code>{{ }}</code>sintaxis de eco para mostrar la cadena de traducción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token function\">__</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'messages.welcome'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h3 id=\"replacing-parameters-in-translation-strings\"><span class=\"link\">Reemplazo de parámetros en cadenas de traducción</span></h3>\n    <p>Si lo desea, puede definir marcadores de posición en sus cadenas de traducción. Todos los marcadores de posición tienen el prefijo <code>:</code>. Por ejemplo, puede definir un mensaje de bienvenida con un nombre de marcador de posición:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'welcome'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Welcome, :name'</span><span class=\"token punctuation\">,</span></code></pre>\n    <p>Para reemplazar los marcadores de posición al recuperar una cadena de traducción, puede pasar una matriz de reemplazos como segundo argumento de la <code>__</code>función:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">echo</span> <span class=\"token function\">__</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'messages.welcome'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'dayle'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si su marcador de posición contiene todas las letras mayúsculas, o solo tiene la primera letra en mayúscula, el valor traducido se escribirá en mayúscula en consecuencia:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'welcome'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Welcome, :NAME'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Welcome, DAYLE</span>\n<span class=\"token single-quoted-string string\">'goodbye'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Goodbye, :Name'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Goodbye, Dayle</span></code></pre>\n    <p></p>\n    <h3 id=\"pluralization\"><span class=\"link\">Pluralización</span></h3>\n    <p>La pluralización es un problema complejo, ya que los diferentes lenguajes tienen una variedad de reglas complejas para la pluralización; sin embargo, Laravel puede ayudarlo a traducir cadenas de manera diferente según las reglas de pluralización que defina. Usando un <code>|</code>carácter, puede distinguir las formas singular y plural de una cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'apples'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'There is one apple|There are many apples'</span><span class=\"token punctuation\">,</span></code></pre>\n    <p>Por supuesto, la pluralización también se admite cuando se utilizan <span class=\"link\">cadenas de traducción como claves</span> :</p>\n    <pre class=\" language-js\"><code class=\" language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"There is one apple|There are many apples\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hay una manzana|Hay muchas manzanas\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Incluso puede crear reglas de pluralización más complejas que especifiquen cadenas de traducción para múltiples rangos de valores:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'apples'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'{0} There are none|[1,19] There are some|[20,*] There are many'</span><span class=\"token punctuation\">,</span></code></pre>\n    <p>Después de definir una cadena de traducción que tiene opciones de pluralización, puede usar la <code>trans_choice</code>función para recuperar la línea para un \"recuento\" dado. En este ejemplo, dado que el recuento es mayor que uno, se devuelve la forma plural de la cadena de traducción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">echo</span> <span class=\"token function\">trans_choice</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'messages.apples'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede definir atributos de marcador de posición en cadenas de pluralización. Estos marcadores de posición pueden reemplazarse pasando una matriz como tercer argumento de la <code>trans_choice</code>función:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'minutes_ago'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'{1} :value minute ago|[2,*] :value minutes ago'</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token function\">trans_choice</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'time.minutes_ago'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'value'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea mostrar el valor entero que se pasó a la <code>trans_choice</code>función, puede usar el <code>:count</code>marcador de posición integrado :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'apples'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'{0} There are none|{1} There is one|[2,*] There are :count'</span><span class=\"token punctuation\">,</span></code></pre>\n    <p></p>\n    <h2 id=\"overriding-package-language-files\"><span class=\"link\">Anulación de archivos de idioma del paquete</span></h2>\n    <p>Algunos paquetes pueden enviarse con sus propios archivos de idioma. En lugar de cambiar los archivos principales del paquete para modificar estas líneas, puede anularlas colocando archivos en el <code>resources/lang/vendor/{package}/{locale}</code>directorio.</p>\n    <p>Así, por ejemplo, si usted necesita para anular las cadenas de traducción Inglés en <code>messages.php</code>un paquete llamado <code>skyrim/hearthfire</code>, debe colocar un archivo de idioma en: <code>resources/lang/vendor/hearthfire/en/messages.php</code>. Dentro de este archivo, solo debe definir las cadenas de traducción que desea anular. Cualquier cadena de traducción que no anule se cargará desde los archivos de idioma original del paquete.</p>\n</div>"
    },
    {
        "title": "Desarrollo de paquetes",
        "subtitle": "LARAVEL AVANZADO",
        "contenido": "<div>\n    <h1>Desarrollo de paquetes</h1>\n    <p></p>\n    <h2><span class=\"link\">Introducción</span></h2>\n    <p>Los paquetes son la forma principal de agregar funcionalidad a Laravel. Los paquetes pueden ser cualquier cosa, desde una excelente manera de trabajar con fechas como <span class=\"link\">Carbon</span> o un paquete que le permite asociar archivos con modelos Eloquent como <span class=\"link\">Laravel Media Library de</span> Spatie .</p>\n    <p>Existen diferentes tipos de paquetes. Algunos paquetes son independientes, lo que significa que funcionan con cualquier marco PHP. Carbon y PHPUnit son ejemplos de paquetes independientes. Cualquiera de estos paquetes se puede usar con Laravel requiriéndolos en su <code>composer.json</code>archivo.</p>\n    <p>Por otro lado, otros paquetes están diseñados específicamente para usarse con Laravel. Estos paquetes pueden tener rutas, controladores, vistas y configuraciones destinadas específicamente a mejorar una aplicación de Laravel. Esta guía cubre principalmente el desarrollo de aquellos paquetes que son específicos de Laravel.</p>\n    <p></p>\n    <h3 id=\"a-note-on-facades\"><span class=\"link\">Una nota sobre las fachadas</span></h3>\n    <p>Al escribir una aplicación de Laravel, generalmente no importa si usa contratos o fachadas, ya que ambos proporcionan niveles esencialmente iguales de capacidad de prueba. Sin embargo, al escribir paquetes, su paquete normalmente no tendrá acceso a todos los ayudantes de prueba de Laravel. Si desea poder escribir las pruebas de su paquete como si el paquete estuviera instalado dentro de una aplicación típica de Laravel, puede usar el paquete <span class=\"link\">Orchestral Testbench</span> .</p>\n    <p></p>\n    <h2 id=\"package-discovery\"><span class=\"link\">Descubrimiento de paquetes</span></h2>\n    <p>En el <code>config/app.php</code>archivo de configuración de una aplicación Laravel , la <code>providers</code>opción define una lista de proveedores de servicios que Laravel debería cargar. Cuando alguien instala su paquete, normalmente querrá que su proveedor de servicios esté incluido en esta lista. En lugar de solicitar a los usuarios que agreguen manualmente su proveedor de servicios a la lista, puede definir el proveedor en la <code>extra</code>sección del <code>composer.json</code>archivo de su paquete . Además de los proveedores de servicios, también puede enumerar las <span class=\"link\">fachadas</span> que le gustaría registrar:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token double-quoted-string string\">\"extra\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token double-quoted-string string\">\"laravel\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token double-quoted-string string\">\"providers\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token double-quoted-string string\">\"Barryvdh\\\\Debugbar\\\\ServiceProvider\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token double-quoted-string string\">\"aliases\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token double-quoted-string string\">\"Debugbar\"</span><span class=\"token punctuation\">:</span> <span class=\"token double-quoted-string string\">\"Barryvdh\\\\Debugbar\\\\Facade\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre>\n    <p>Una vez que su paquete se haya configurado para el descubrimiento, Laravel registrará automáticamente sus proveedores de servicios y fachadas cuando se instale, creando una experiencia de instalación conveniente para los usuarios de su paquete.</p>\n    <p></p>\n    <h3 id=\"opting-out-of-package-discovery\"><span class=\"link\">Optar por no participar en el descubrimiento de paquetes</span></h3>\n    <p>Si usted es el consumidor de un paquete y desea deshabilitar el descubrimiento de paquetes para un paquete, puede incluir el nombre del paquete en la <code>extra</code>sección del <code>composer.json</code>archivo de su aplicación :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token double-quoted-string string\">\"extra\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token double-quoted-string string\">\"laravel\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token double-quoted-string string\">\"dont-discover\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token double-quoted-string string\">\"barryvdh/laravel-debugbar\"</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre>\n    <p>Puede deshabilitar el descubrimiento de paquetes para todos los paquetes usando el <code>*</code>carácter dentro de la <code>dont-discover</code>directiva de su aplicación :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token double-quoted-string string\">\"extra\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token double-quoted-string string\">\"laravel\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token double-quoted-string string\">\"dont-discover\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token double-quoted-string string\">\"*\"</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre>\n    <p></p>\n    <h2 id=\"service-providers\"><span class=\"link\">Proveedores de servicio</span></h2>\n    <p><span class=\"link\">Los proveedores de servicios</span> son el punto de conexión entre su paquete y Laravel. Un proveedor de servicios es responsable de vincular cosas en el <span class=\"link\">contenedor de servicios</span> de Laravel e informar a Laravel dónde cargar los recursos del paquete, como vistas, configuración y archivos de localización.</p>\n    <p>Un proveedor de servicios extiende la <code>Illuminate\\Support\\ServiceProvider</code>clase y contiene dos métodos: <code>register</code>y <code>boot</code>. La <code>ServiceProvider</code>clase base se encuentra en el <code>illuminate/support</code>paquete Composer, que debe agregar a las dependencias de su propio paquete. Para obtener más información sobre la estructura y el propósito de los proveedores de servicios, consulte <span class=\"link\">su documentación</span> .</p>\n    <p></p>\n    <h2 id=\"resources\"><span class=\"link\">Recursos</span></h2>\n    <p></p>\n    <h3 id=\"configuration\"><span class=\"link\">Configuración</span></h3>\n    <p>Por lo general, deberá publicar el archivo de configuración de su paquete en el directorio de la aplicación <code>config</code>. Esto permitirá a los usuarios de su paquete anular fácilmente sus opciones de configuración predeterminadas. Para permitir que se publiquen sus archivos de configuración, llame al <code>publishes</code>método desde el <code>boot</code>método de su proveedor de servicios:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Bootstrap any package services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">publishes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'/../config/courier.php'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">config_path</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'courier.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Ahora, cuando los usuarios de su paquete ejecuten el <code>vendor:publish</code>comando de Laravel , su archivo se copiará en la ubicación de publicación especificada. Una vez que se ha publicado su configuración, se puede acceder a sus valores como cualquier otro archivo de configuración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'courier.option'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>No debe definir cierres en sus archivos de configuración. No se pueden serializar correctamente cuando los usuarios ejecutan el <code>config:cache</code>comando Artisan.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"default-package-configuration\"><span class=\"link\">Configuración de paquete predeterminada</span></h4>\n    <p>También puede fusionar su propio archivo de configuración de paquete con la copia publicada de la aplicación. Esto permitirá a sus usuarios definir solo las opciones que realmente quieren anular en la copia publicada del archivo de configuración. Para fusionar los valores del archivo de configuración, use el <code>mergeConfigFrom</code>método dentro del método de su proveedor de servicios <code>register</code>.</p>\n    <p>El <code>mergeConfigFrom</code>método acepta la ruta al archivo de configuración de su paquete como su primer argumento y el nombre de la copia de la aplicación del archivo de configuración como su segundo argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Register any application services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">mergeConfigFrom</span><span class=\"token punctuation\">(</span>\n        <span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'/../config/courier.php'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'courier'</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Este método solo fusiona el primer nivel de la matriz de configuración. Si sus usuarios definen parcialmente una matriz de configuración multidimensional, las opciones que faltan no se fusionarán.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"routes\"><span class=\"link\">Rutas</span></h3>\n    <p>Si su paquete contiene rutas, puede cargarlas usando el <code>loadRoutesFrom</code>método. Este método determinará automáticamente si las rutas de la aplicación están almacenadas en caché y no cargará su archivo de rutas si las rutas ya se han almacenado en caché:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Bootstrap any package services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">loadRoutesFrom</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'/../routes/web.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h3 id=\"migrations\"><span class=\"link\">Migraciones</span></h3>\n    <p>Si su paquete contiene <span class=\"link\">migraciones de base de datos</span> , puede usar el <code>loadMigrationsFrom</code>método para informar a Laravel cómo cargarlas. El <code>loadMigrationsFrom</code>método acepta la ruta a las migraciones de su paquete como su único argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Bootstrap any package services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">loadMigrationsFrom</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'/../database/migrations'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Una vez que se hayan registrado las migraciones de su paquete, se ejecutarán automáticamente cuando se ejecute el <code>php artisan migrate</code>comando. No es necesario exportarlos al <code>database/migrations</code>directorio de la aplicación .</p>\n    <p></p>\n    <h3 id=\"translations\"><span class=\"link\">Traducciones</span></h3>\n    <p>Si su paquete contiene <span class=\"link\">archivos de traducción</span> , puede usar el <code>loadTranslationsFrom</code>método para informar a Laravel cómo cargarlos. Por ejemplo, si su paquete tiene un nombre <code>courier</code>, debe agregar lo siguiente al <code>boot</code>método de su proveedor de servicios :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Bootstrap any package services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">loadTranslationsFrom</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'/../resources/lang'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'courier'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Las traducciones de paquetes se referencian mediante la <code>package::file.line</code>convención de sintaxis. Entonces, puede cargar la línea del <code>courier</code>paquete <code>welcome</code>desde el <code>messages</code>archivo así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">echo</span> <span class=\"token function\">trans</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'courier::messages.welcome'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"publishing-translations\"><span class=\"link\">Publicación de traducciones</span></h4>\n    <p>Si desea publicar las traducciones de su paquete en el <code>resources/lang/vendor</code>directorio de la aplicación , puede utilizar el <code>publishes</code>método del proveedor de servicios . El <code>publishes</code>método acepta una serie de rutas de paquetes y sus ubicaciones de publicación deseadas. Por ejemplo, para publicar los archivos de traducción del <code>courier</code>paquete, puede hacer lo siguiente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Bootstrap any package services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">loadTranslationsFrom</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'/../resources/lang'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'courier'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">publishes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'/../resources/lang'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">resource_path</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'lang/vendor/courier'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Ahora, cuando los usuarios de su paquete ejecuten el <code>vendor:publish</code>comando Artisan de Laravel , las traducciones de su paquete se publicarán en la ubicación de publicación especificada.</p>\n    <p></p>\n    <h3 id=\"views\"><span class=\"link\">Puntos de vista</span></h3>\n    <p>Para registrar las <span class=\"link\">vistas de</span> su paquete con Laravel, debe decirle a Laravel dónde se encuentran las vistas. Puede hacer esto usando el <code>loadViewsFrom</code>método del proveedor de servicios . El <code>loadViewsFrom</code>método acepta dos argumentos: la ruta a sus plantillas de vista y el nombre de su paquete. Por ejemplo, si el nombre de su paquete es <code>courier</code>, agregaría lo siguiente al <code>boot</code>método de su proveedor de servicios :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Bootstrap any package services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">loadViewsFrom</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'/../resources/views'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'courier'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Se hace referencia a las vistas de paquetes mediante la <code>package::view</code>convención de sintaxis. Entonces, una vez que su ruta de vista esté registrada en un proveedor de servicios, puede cargar la <code>dashboard</code>vista desde el <code>courier</code>paquete así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/dashboard'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'courier::dashboard'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"overriding-package-views\"><span class=\"link\">Anulación de vistas de paquetes</span></h4>\n    <p>Cuando usa el <code>loadViewsFrom</code>método, Laravel registra dos ubicaciones para sus vistas: el <code>resources/views/vendor</code>directorio de la aplicación y el directorio que usted especifica. Entonces, usando el <code>courier</code>paquete como ejemplo, Laravel primero verificará si <code>resources/views/vendor/courier</code>el desarrollador ha colocado una versión personalizada de la vista en el directorio. Luego, si la vista no se ha personalizado, Laravel buscará en el directorio de vista del paquete que especificó en su llamada <code>loadViewsFrom</code>. Esto facilita que los usuarios del paquete personalicen / anulen las vistas de su paquete.</p>\n    <p></p>\n    <h4 id=\"publishing-views\"><span class=\"link\">Publicar vistas</span></h4>\n    <p>Si desea que sus vistas estén disponibles para su publicación en el <code>resources/views/vendor</code>directorio de la aplicación , puede utilizar el <code>publishes</code>método del proveedor de servicios . El <code>publishes</code>método acepta una variedad de rutas de vista de paquetes y sus ubicaciones de publicación deseadas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Bootstrap the package services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">loadViewsFrom</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'/../resources/views'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'courier'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">publishes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'/../resources/views'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">resource_path</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'views/vendor/courier'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Ahora, cuando los usuarios de su paquete ejecuten el <code>vendor:publish</code>comando Artisan de Laravel , las vistas de su paquete se copiarán en la ubicación de publicación especificada.</p>\n    <p></p>\n    <h3 id=\"view-components\"><span class=\"link\">Ver componentes</span></h3>\n    <p>Si su paquete contiene <span class=\"link\">componentes de vista</span> , puede usar el <code>loadViewComponentsAs</code>método para informar a Laravel cómo cargarlos. El <code>loadViewComponentsAs</code>método acepta dos argumentos: el prefijo de etiqueta para los componentes de la vista y una matriz de los nombres de las clases de los componentes de la vista. Por ejemplo, si el prefijo de su paquete es <code>courier</code>y tiene <code>Alert</code>y <code>Button</code>ve componentes, agregaría lo siguiente al <code>boot</code>método de su proveedor de servicios :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Courier<span class=\"token punctuation\">\\</span>Components<span class=\"token punctuation\">\\</span>Alert</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Courier<span class=\"token punctuation\">\\</span>Components<span class=\"token punctuation\">\\</span>Button</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Bootstrap any package services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">loadViewComponentsAs</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'courier'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        Alert<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n        Button<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Una vez que los componentes de su vista estén registrados en un proveedor de servicios, puede hacer referencia a ellos en su vista de la siguiente manera:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>courier<span class=\"token operator\">-</span>alert <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span>\n\n<span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>courier<span class=\"token operator\">-</span>button <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span></code></pre>\n    <p></p>\n    <h4 id=\"anonymous-components\"><span class=\"link\">Componentes anónimos</span></h4>\n    <p>Si su paquete contiene componentes anónimos, deben colocarse dentro de un <code>components</code>directorio del directorio \"vistas\" de su paquete (como lo especifica <code>loadViewsFrom</code>). Luego, puede representarlos prefijando el nombre del componente con el espacio de nombres de la vista del paquete:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">&lt;</span>x<span class=\"token operator\">-</span>courier<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>alert <span class=\"token operator\">/</span><span class=\"token operator\">&gt;</span></code></pre>\n    <p></p>\n    <h2 id=\"commands\"><span class=\"link\">Comandos</span></h2>\n    <p>Para registrar los comandos Artisan de su paquete con Laravel, puede usar el <code>commands</code>método. Este método espera una matriz de nombres de clases de comandos. Una vez registrados los comandos, puede ejecutarlos utilizando la <span class=\"link\">CLI de Artisan</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Courier<span class=\"token punctuation\">\\</span>Console<span class=\"token punctuation\">\\</span>Commands<span class=\"token punctuation\">\\</span>InstallCommand</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Courier<span class=\"token punctuation\">\\</span>Console<span class=\"token punctuation\">\\</span>Commands<span class=\"token punctuation\">\\</span>NetworkCommand</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Bootstrap any package services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">app</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">runningInConsole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">commands</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            InstallCommand<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n            NetworkCommand<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h2 id=\"public-assets\"><span class=\"link\">Activos públicos</span></h2>\n    <p>Su paquete puede tener activos como JavaScript, CSS e imágenes. Para publicar estos activos en el <code>public</code>directorio de la aplicación , utilice el <code>publishes</code>método del proveedor de servicios . En este ejemplo, también agregaremos una <code>public</code>etiqueta de grupo de activos, que se puede usar para publicar fácilmente grupos de activos relacionados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Bootstrap any package services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">publishes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'/../public'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">public_path</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'vendor/courier'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Ahora, cuando los usuarios de su paquete ejecuten el <code>vendor:publish</code>comando, sus activos se copiarán en la ubicación de publicación especificada. Dado que los usuarios normalmente necesitarán sobrescribir los activos cada vez que se actualice el paquete, puede usar la <code>--force</code>marca:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan vendor<span class=\"token punctuation\">:</span>publish <span class=\"token operator\">--</span>tag<span class=\"token operator\">=</span><span class=\"token keyword\">public</span> <span class=\"token operator\">--</span>force</code></pre>\n    <p></p>\n    <h2 id=\"publishing-file-groups\"><span class=\"link\">Publicar grupos de archivos</span></h2>\n    <p>Es posible que desee publicar grupos de activos y recursos de paquetes por separado. Por ejemplo, es posible que desee permitir que sus usuarios publiquen los archivos de configuración de su paquete sin verse obligados a publicar los activos de su paquete. Puede hacer esto \"etiquetándolos\" cuando llame al <code>publishes</code>método desde el proveedor de servicios de un paquete. Por ejemplo, usemos etiquetas para definir dos grupos de publicación para el <code>courier</code>paquete ( <code>courier-config</code>y <code>courier-migrations</code>) en el <code>boot</code>método del proveedor de servicios del paquete:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Bootstrap any package services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">publishes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'/../config/package.php'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">config_path</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'package.php'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'courier-config'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">publishes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'/../database/migrations/'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">database_path</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'migrations'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'courier-migrations'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Ahora sus usuarios pueden publicar estos grupos por separado haciendo referencia a su etiqueta al ejecutar el <code>vendor:publish</code>comando:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan vendor<span class=\"token punctuation\">:</span>publish <span class=\"token operator\">--</span>tag<span class=\"token operator\">=</span>courier<span class=\"token operator\">-</span>config</code></pre>\n</div>"
    },
    {
        "title": "Programación de tareas",
        "subtitle": "LARAVEL AVANZADO",
        "contenido": "<div>\n    <h1>Programación de tareas</h1>\n    <p></p>\n    <h2><span class=\"link\">Introducción</span></h2>\n    <p>En el pasado, es posible que haya escrito una entrada de configuración cron para cada tarea que necesitaba programar en su servidor. Sin embargo, esto puede convertirse rápidamente en un problema porque su programa de tareas ya no está en el control de la fuente y debe SSH en su servidor para ver sus entradas cron existentes o agregar entradas adicionales.</p>\n    <p>El programador de comandos de Laravel ofrece un nuevo enfoque para administrar las tareas programadas en su servidor. El programador le permite definir de manera fluida y expresiva su programa de comandos dentro de su propia aplicación Laravel. Al usar el programador, solo se necesita una única entrada cron en su servidor. Su horario de tareas se define en el método <code>app/Console/Kernel.php</code>del archivo <code>schedule</code>. Para ayudarlo a comenzar, se define un ejemplo simple dentro del método.</p>\n    <p></p>\n    <h2 id=\"defining-schedules\"><span class=\"link\">Definición de horarios</span></h2>\n    <p>Puede definir todas sus tareas programadas en el <code>schedule</code>método de la <code>App\\Console\\Kernel</code>clase de su aplicación . Para empezar, echemos un vistazo a un ejemplo. En este ejemplo, programaremos un cierre que se llamará todos los días a la medianoche. Dentro del cierre ejecutaremos una consulta a la base de datos para borrar una tabla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Console</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Console<span class=\"token punctuation\">\\</span>Scheduling<span class=\"token punctuation\">\\</span>Schedule</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Console<span class=\"token punctuation\">\\</span>Kernel</span> <span class=\"token keyword\">as</span> ConsoleKernel<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Kernel</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ConsoleKernel</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The Artisan commands provided by your application.\n     *\n     * @var array\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$commands</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Define the application's command schedule.\n     *\n     * @param  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n     * @return void\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>Schedule <span class=\"token variable\">$schedule</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'recent_users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Además de programar mediante cierres, también puede programar <span class=\"link\">objetos invocables</span> . Los objetos invocables son clases PHP simples que contienen un <code>__invoke</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DeleteRecentUsers</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea ver una descripción general de sus tareas programadas y la próxima vez que estén programadas para ejecutarse, puede usar el <code>schedule:list</code>comando Artisan:</p>\n    <pre class=\" language-nothing\"><code class=\" language-nothing\">php artisan schedule:list</code></pre>\n    <p></p>\n    <h3 id=\"scheduling-artisan-commands\"><span class=\"link\">Programación de comandos artesanales</span></h3>\n    <p>Además de programar cierres, también puede programar <span class=\"link\">comandos Artisan</span> y comandos del sistema. Por ejemplo, puede usar el <code>command</code>método para programar un comando Artisan usando el nombre o la clase del comando.</p>\n    <p>Al programar comandos Artisan usando el nombre de la clase del comando, puede pasar una matriz de argumentos de línea de comando adicionales que se deben proporcionar al comando cuando se invoca:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Console<span class=\"token punctuation\">\\</span>Commands<span class=\"token punctuation\">\\</span>SendEmailsCommand</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails:send Taylor --force'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span>SendEmailsCommand<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'--force'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"scheduling-queued-jobs\"><span class=\"link\">Programación de trabajos en cola</span></h3>\n    <p>El <code>job</code>método se puede utilizar para programar un <span class=\"link\">trabajo en cola</span> . Este método proporciona una forma conveniente de programar trabajos en cola sin utilizar el <code>call</code>método para definir cierres para poner en cola el trabajo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Jobs<span class=\"token punctuation\">\\</span>Heartbeat</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">job</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Heartbeat</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">everyFiveMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Se pueden proporcionar segundos y terceros argumentos opcionales al <code>job</code>método que especifica el nombre de la cola y la conexión de la cola que se debe usar para poner en cola el trabajo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Jobs<span class=\"token punctuation\">\\</span>Heartbeat</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Dispatch the job to the \"heartbeats\" queue on the \"sqs\" connection...</span>\n<span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">job</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Heartbeat</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'heartbeats'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'sqs'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">everyFiveMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"scheduling-shell-commands\"><span class=\"link\">Programación de comandos de shell</span></h3>\n    <p>El <code>exec</code>método puede usarse para emitir un comando al sistema operativo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'node /home/forge/script.js'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"schedule-frequency-options\"><span class=\"link\">Opciones de frecuencia de programación</span></h3>\n    <p>Ya hemos visto algunos ejemplos de cómo puede configurar una tarea para que se ejecute a intervalos específicos. Sin embargo, hay muchas más frecuencias de programación de tareas que puede asignar a una tarea:</p>\n    <table>\n        <thead>\n        <tr>\n            <th>Método</th>\n            <th>Descripción</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>-&gt;cron('* * * * *');</code></td>\n            <td>Ejecute la tarea en un programa cron personalizado</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;everyMinute();</code></td>\n            <td>Ejecuta la tarea cada minuto</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;everyTwoMinutes();</code></td>\n            <td>Ejecute la tarea cada dos minutos</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;everyThreeMinutes();</code></td>\n            <td>Ejecute la tarea cada tres minutos</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;everyFourMinutes();</code></td>\n            <td>Ejecute la tarea cada cuatro minutos</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;everyFiveMinutes();</code></td>\n            <td>Ejecute la tarea cada cinco minutos</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;everyTenMinutes();</code></td>\n            <td>Ejecute la tarea cada diez minutos</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;everyFifteenMinutes();</code></td>\n            <td>Ejecute la tarea cada quince minutos.</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;everyThirtyMinutes();</code></td>\n            <td>Ejecute la tarea cada treinta minutos</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;hourly();</code></td>\n            <td>Ejecuta la tarea cada hora</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;hourlyAt(17);</code></td>\n            <td>Ejecute la tarea cada hora a los 17 minutos después de la hora</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;everyTwoHours();</code></td>\n            <td>Ejecuta la tarea cada dos horas.</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;everyThreeHours();</code></td>\n            <td>Ejecuta la tarea cada tres horas.</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;everyFourHours();</code></td>\n            <td>Ejecuta la tarea cada cuatro horas.</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;everySixHours();</code></td>\n            <td>Ejecuta la tarea cada seis horas.</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;daily();</code></td>\n            <td>Ejecute la tarea todos los días a la medianoche</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;dailyAt('13:00');</code></td>\n            <td>Ejecute la tarea todos los días a las 13:00</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;twiceDaily(1, 13);</code></td>\n            <td>Ejecute la tarea todos los días a la 1:00 y a las 13:00</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;weekly();</code></td>\n            <td>Ejecute la tarea todos los domingos a las 00:00</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;weeklyOn(1, '8:00');</code></td>\n            <td>Ejecute la tarea cada semana el lunes a las 8:00</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;monthly();</code></td>\n            <td>Ejecute la tarea el primer día de cada mes a las 00:00</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;monthlyOn(4, '15:00');</code></td>\n            <td>Ejecute la tarea todos los meses el día 4 a las 15:00</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;twiceMonthly(1, 16, '13:00');</code></td>\n            <td>Ejecute la tarea mensualmente los días 1 y 16 a las 13:00</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;lastDayOfMonth('15:00');</code></td>\n            <td>Ejecute la tarea el último día del mes a las 15:00</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;quarterly();</code></td>\n            <td>Ejecute la tarea el primer día de cada trimestre a las 00:00</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;yearly();</code></td>\n            <td>Ejecute la tarea el primer día de cada año a las 00:00</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;yearlyOn(6, 1, '17:00');</code></td>\n            <td>Ejecute la tarea todos los años el 1 de junio a las 17:00</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;timezone('America/New_York');</code></td>\n            <td>Establecer la zona horaria para la tarea</td>\n        </tr>\n        </tbody>\n    </table>\n    <p>Estos métodos se pueden combinar con restricciones adicionales para crear programas aún más ajustados que solo se ejecutan en ciertos días de la semana. Por ejemplo, puede programar un comando para que se ejecute semanalmente los lunes:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Run once per week on Monday at 1 PM...</span>\n<span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">weekly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">mondays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'13:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Run hourly from 8 AM to 5 PM on weekdays...</span>\n<span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">weekdays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hourly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">timezone</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'America/Chicago'</span><span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'8:00'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'17:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>A continuación, se puede encontrar una lista de restricciones de programación adicionales:</p>\n    <table>\n        <thead>\n        <tr>\n            <th>Método</th>\n            <th>Descripción</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>-&gt;weekdays();</code></td>\n            <td>Limite la tarea a los días de la semana</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;weekends();</code></td>\n            <td>Limita la tarea a los fines de semana</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;sundays();</code></td>\n            <td>Limita la tarea al domingo</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;mondays();</code></td>\n            <td>Limita la tarea al lunes</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;tuesdays();</code></td>\n            <td>Limita la tarea al martes</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;wednesdays();</code></td>\n            <td>Limita la tarea al miércoles</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;thursdays();</code></td>\n            <td>Limita la tarea al jueves</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;fridays();</code></td>\n            <td>Limita la tarea al viernes</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;saturdays();</code></td>\n            <td>Limita la tarea al sábado</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;days(array|mixed);</code></td>\n            <td>Limite la tarea a días específicos</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;between($startTime, $endTime);</code></td>\n            <td>Limite la tarea para que se ejecute entre las horas de inicio y finalización</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;unlessBetween($startTime, $endTime);</code></td>\n            <td>Limite la tarea para que no se ejecute entre las horas de inicio y finalización</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;when(Closure);</code></td>\n            <td>Limite la tarea basándose en una prueba de verdad</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;environments($env);</code></td>\n            <td>Limite la tarea a entornos específicos</td>\n        </tr>\n        </tbody>\n    </table>\n    <p></p>\n    <h4 id=\"day-constraints\"><span class=\"link\">Restricciones del día</span></h4>\n    <p>El <code>days</code>método puede usarse para limitar la ejecución de una tarea a días específicos de la semana. Por ejemplo, puede programar un comando para que se ejecute cada hora los domingos y miércoles:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails:send'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hourly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">days</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Alternativamente, puede usar las constantes disponibles en la <code>Illuminate\\Console\\Scheduling\\Schedule</code>clase al definir los días en los que debe ejecutarse una tarea:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Console<span class=\"token punctuation\">\\</span>Scheduling<span class=\"token punctuation\">\\</span>Schedule</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails:send'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hourly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">days</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Schedule<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">SUNDAY</span><span class=\"token punctuation\">,</span> Schedule<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">WEDNESDAY</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"between-time-constraints\"><span class=\"link\">Entre restricciones de tiempo</span></h4>\n    <p>El <code>between</code>método se puede utilizar para limitar la ejecución de una tarea según la hora del día:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails:send'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hourly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'7:00'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'22:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Del mismo modo, el <code>unlessBetween</code>método se puede utilizar para excluir la ejecución de una tarea durante un período de tiempo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails:send'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hourly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">unlessBetween</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'23:00'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'4:00'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"truth-test-constraints\"><span class=\"link\">Restricciones de la prueba de verdad</span></h4>\n    <p>El <code>when</code>método se puede utilizar para limitar la ejecución de una tarea en función del resultado de una prueba de verdad determinada. En otras palabras, si el cierre dado regresa <code>true</code>, la tarea se ejecutará siempre que ninguna otra condición restrictiva impida que la tarea se ejecute:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails:send'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>skip</code>método puede verse como el inverso de <code>when</code>. Si el <code>skip</code>método regresa <code>true</code>, la tarea programada no se ejecutará:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails:send'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Al usar <code>when</code>métodos encadenados , el comando programado solo se ejecutará si <code>when</code>regresan todas las condiciones <code>true</code>.</p>\n    <p></p>\n    <h4 id=\"environment-constraints\"><span class=\"link\">Restricciones ambientales</span></h4>\n    <p>El <code>environments</code>método puede usarse para ejecutar tareas solo en los entornos dados (según lo definido por la <code>APP_ENV</code> <span class=\"link\">variable de entorno</span> ):</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails:send'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">environments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'staging'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'production'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"timezones\"><span class=\"link\">Zonas horarias</span></h3>\n    <p>Con el <code>timezone</code>método, puede especificar que la hora de una tarea programada debe interpretarse dentro de una zona horaria determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'report:generate'</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">timezone</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'America/New_York'</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'2:00'</span><span class=\"token punctuation\">)</span></code></pre>\n    <p>Si asigna repetidamente la misma zona horaria a todas sus tareas programadas, es posible que desee definir un <code>scheduleTimezone</code>método en su <code>App\\Console\\Kernel</code>clase. Este método debe devolver la zona horaria predeterminada que debe asignarse a todas las tareas programadas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the timezone that should be used by default for scheduled events.\n *\n * @return \\DateTimeZone|string|null\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">scheduleTimezone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'America/Chicago'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Recuerde que algunas zonas horarias utilizan el horario de verano. Cuando se producen cambios en el horario de verano, su tarea programada puede ejecutarse dos veces o incluso no ejecutarse en absoluto. Por esta razón, recomendamos evitar la programación de zonas horarias cuando sea posible.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"preventing-task-overlaps\"><span class=\"link\">Prevención de superposiciones de tareas</span></h3>\n    <p>De forma predeterminada, las tareas programadas se ejecutarán incluso si la instancia anterior de la tarea aún se está ejecutando. Para evitar esto, puede utilizar el <code>withoutOverlapping</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails:send'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withoutOverlapping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>En este ejemplo, el <code>emails:send</code> <span class=\"link\">comando Artisan</span> se ejecutará cada minuto si aún no se está ejecutando. El <code>withoutOverlapping</code>método es especialmente útil si tiene tareas que varían drásticamente en su tiempo de ejecución, lo que le impide predecir exactamente cuánto tiempo tomará una tarea determinada.</p>\n    <p>Si es necesario, puede especificar cuántos minutos deben pasar antes de que expire el bloqueo \"sin superposición\". De forma predeterminada, el bloqueo caducará después de 24 horas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails:send'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withoutOverlapping</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"running-tasks-on-one-server\"><span class=\"link\">Ejecución de tareas en un servidor</span></h3>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Para utilizar esta función, la aplicación debe ser el uso de la <code>database</code>, <code>memcached</code>, <code>dynamodb</code>, o <code>redis</code>controlador de caché como controlador predeterminado de la caché de la aplicación. Además, todos los servidores deben comunicarse con el mismo servidor de caché central.</p></p></div>\n    </blockquote>\n    <p>Si el programador de su aplicación se ejecuta en varios servidores, puede limitar un trabajo programado para que solo se ejecute en un único servidor. Por ejemplo, suponga que tiene una tarea programada que genera un nuevo informe todos los viernes por la noche. Si el programador de tareas se ejecuta en tres servidores de trabajo, la tarea programada se ejecutará en los tres servidores y generará el informe tres veces. ¡No es bueno!</p>\n    <p>Para indicar que la tarea debe ejecutarse en un solo servidor, utilice el <code>onOneServer</code>método al definir la tarea programada. El primer servidor en obtener la tarea asegurará un bloqueo atómico en el trabajo para evitar que otros servidores ejecuten la misma tarea al mismo tiempo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'report:generate'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">fridays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'17:00'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">onOneServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"background-tasks\"><span class=\"link\">Tarea en segundo plano</span></h3>\n    <p>De forma predeterminada, varias tareas programadas al mismo tiempo se ejecutarán secuencialmente según el orden en que se definan en su <code>schedule</code>método. Si tiene tareas de ejecución prolongada, esto puede provocar que las tareas posteriores se inicien mucho más tarde de lo previsto. Si desea ejecutar tareas en segundo plano para que todas se ejecuten simultáneamente, puede usar el <code>runInBackground</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'analytics:report'</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">runInBackground</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>El <code>runInBackground</code>método solo se puede utilizar al programar tareas a través de los métodos <code>command</code>y <code>exec</code>.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"maintenance-mode\"><span class=\"link\">Modo de mantenimiento</span></h3>\n    <p>Las tareas programadas de su aplicación no se ejecutarán cuando la aplicación esté en <span class=\"link\">modo de mantenimiento</span> , ya que no queremos que sus tareas interfieran con cualquier mantenimiento sin terminar que pueda estar realizando en su servidor. Sin embargo, si desea forzar la ejecución de una tarea incluso en modo de mantenimiento, puede llamar al <code>evenInMaintenanceMode</code>método al definir la tarea:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails:send'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">evenInMaintenanceMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"running-the-scheduler\"><span class=\"link\">Ejecución del planificador</span></h2>\n    <p>Ahora que hemos aprendido cómo definir tareas programadas, analicemos cómo ejecutarlas realmente en nuestro servidor. El <code>schedule:run</code>comando Artisan evaluará todas sus tareas programadas y determinará si deben ejecutarse en función de la hora actual del servidor.</p>\n    <p>Entonces, cuando usamos el programador de Laravel, solo necesitamos agregar una única entrada de configuración cron a nuestro servidor que ejecuta el <code>schedule:run</code>comando cada minuto. Si no sabe cómo agregar entradas cron a su servidor, considere usar un servicio como <span class=\"link\">Laravel Forge</span> que puede administrar las entradas cron por usted:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token operator\">*</span> <span class=\"token operator\">*</span> <span class=\"token operator\">*</span> <span class=\"token operator\">*</span> <span class=\"token operator\">*</span> cd <span class=\"token operator\">/</span>path<span class=\"token operator\">-</span>to<span class=\"token operator\">-</span>your<span class=\"token operator\">-</span>project <span class=\"token operator\">&amp;&amp;</span> php artisan schedule<span class=\"token punctuation\">:</span>run <span class=\"token operator\">&gt;</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span><span class=\"token constant\">null</span> <span class=\"token number\">2</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span></code></pre>\n    <p></p>\n    <h2 id=\"running-the-scheduler-locally\"><span class=\"link\">Ejecución del planificador localmente</span></h2>\n    <p>Por lo general, no agregaría una entrada cron del programador a su máquina de desarrollo local. En su lugar, puede utilizar el <code>schedule:work</code>comando Artisan. Este comando se ejecutará en primer plano e invocará al programador cada minuto hasta que finalice el comando:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan schedule<span class=\"token punctuation\">:</span>work</code></pre>\n    <p></p>\n    <h2 id=\"task-output\"><span class=\"link\">Salida de la tarea</span></h2>\n    <p>El programador de Laravel proporciona varios métodos convenientes para trabajar con la salida generada por las tareas programadas. Primero, usando el <code>sendOutputTo</code>método, puede enviar la salida a un archivo para una inspección posterior:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails:send'</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sendOutputTo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$filePath</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea agregar la salida a un archivo determinado, puede usar el <code>appendOutputTo</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails:send'</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">appendOutputTo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$filePath</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Con el <code>emailOutputTo</code>método, puede enviar la salida por correo electrónico a una dirección de correo electrónico de su elección. Antes de enviar por correo electrónico el resultado de una tarea, debe configurar los <span class=\"link\">servicios de correo electrónico</span> de Laravel :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'report:generate'</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sendOutputTo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$filePath</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">emailOutputTo</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'taylor@example.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si solo desea enviar la salida por correo electrónico si el Artisan programado o el comando del sistema termina con un código de salida distinto de cero, use el <code>emailOutputOnFailure</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'report:generate'</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">emailOutputOnFailure</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'taylor@example.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Los <code>emailOutputTo</code>, <code>emailOutputOnFailure</code>, <code>sendOutputTo</code>, y <code>appendOutputTo</code>métodos son exclusivos de la <code>command</code>y <code>exec</code>métodos.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h2 id=\"task-hooks\"><span class=\"link\">Ganchos de tareas</span></h2>\n    <p>Con los métodos <code>before</code>y <code>after</code>, puede especificar el código que se ejecutará antes y después de que se ejecute la tarea programada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails:send'</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token comment\">// The task is about to execute...</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token comment\">// The task has executed...</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Los métodos <code>onSuccess</code>y le <code>onFailure</code>permiten especificar el código que se ejecutará si la tarea programada tiene éxito o falla. Una falla indica que el comando Artisan o del sistema programado terminó con un código de salida distinto de cero:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails:send'</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token comment\">// The task succeeded...</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token comment\">// The task failed...</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si la salida está disponible desde su comando, puede acceder a ella en su <code>after</code>, <code>onSuccess</code>o <code>onFailure</code>ganchos al indicar una <code>Illuminate\\Support\\Stringable</code>instancia como el <code>$output</code>argumento de la definición de cierre de su gancho:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Stringable</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails:send'</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Stringable <span class=\"token variable\">$output</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token comment\">// The task succeeded...</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Stringable <span class=\"token variable\">$output</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token comment\">// The task failed...</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"pinging-urls\"><span class=\"link\">Hacer ping a las URL</span></h4>\n    <p>Con los métodos <code>pingBefore</code>y <code>thenPing</code>, el programador puede hacer ping automáticamente a una URL determinada antes o después de que se ejecute una tarea. Este método es útil para notificar a un servicio externo, como <span class=\"link\">Envoyer</span> , que su tarea programada está comenzando o ha finalizado su ejecución:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails:send'</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pingBefore</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">thenPing</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Los métodos <code>pingBeforeIf</code>y <code>thenPingIf</code>pueden usarse para hacer ping a una URL determinada solo si una condición determinada es <code>true</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails:send'</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pingBeforeIf</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$condition</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">thenPingIf</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$condition</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Los métodos <code>pingOnSuccess</code>y <code>pingOnFailure</code>pueden usarse para hacer ping a una URL determinada solo si la tarea tiene éxito o falla. Una falla indica que el comando Artisan o del sistema programado terminó con un código de salida distinto de cero:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'emails:send'</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pingOnSuccess</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$successUrl</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pingOnFailure</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$failureUrl</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Todos los métodos de ping requieren la biblioteca HTTP Guzzle. Guzzle generalmente se instala en todos los proyectos nuevos de Laravel de forma predeterminada, pero puede instalar Guzzle manualmente en su proyecto utilizando el administrador de paquetes Composer si se ha eliminado accidentalmente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">composer <span class=\"token keyword\">require</span> guzzlehttp<span class=\"token operator\">/</span>guzzle</code></pre>\n</div>"
    },
    {
      "title": "Autenticación",
      "subtitle": "SEGURIDAD",
      "contenido": "<div>\n    <h1>Autenticación</h1>\n    <p></p>\n    <h2 id=\"introduction\"><span class=\"link\">Introducción</span></h2>\n    <p>Muchas aplicaciones web proporcionan una forma para que sus usuarios se autentiquen con la aplicación y \"inicien sesión\". La implementación de esta función en aplicaciones web puede ser una tarea compleja y potencialmente arriesgada. Por esta razón, Laravel se esfuerza por brindarle las herramientas que necesita para implementar la autenticación de manera rápida, segura y fácil.</p>\n    <p>En esencia, las instalaciones de autenticación de Laravel están compuestas por \"guardias\" y \"proveedores\". Los guardias definen cómo se autentican los usuarios para cada solicitud. Por ejemplo, Laravel se envía con un <code>session</code>protector que mantiene el estado mediante el almacenamiento de sesiones y las cookies.</p>\n    <p>Los proveedores definen cómo se recuperan los usuarios de su almacenamiento persistente. Laravel se envía con soporte para recuperar usuarios usando <span class=\"link\">Eloquent</span> y el generador de consultas de base de datos. Sin embargo, puede definir proveedores adicionales según sea necesario para su aplicación.</p>\n    <p>El archivo de configuración de autenticación de su aplicación se encuentra en <code>config/auth.php</code>. Este archivo contiene varias opciones bien documentadas para modificar el comportamiento de los servicios de autenticación de Laravel.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Los protectores y proveedores no deben confundirse con \"roles\" y \"permisos\". Para obtener más información sobre la autorización de acciones del usuario mediante permisos, consulte la documentación de <span class=\"link\">autorización</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"starter-kits\"><span class=\"link\">Kits de inicio</span></h3>\n    <p>¿Quieres empezar rápido? Instale un <span class=\"link\">kit de inicio de la aplicación Laravel</span> en una nueva aplicación Laravel. Después de migrar su base de datos, navegue en su navegador hacia <code>/register</code>o cualquier otra URL que esté asignada a su aplicación. ¡Los kits de inicio se encargarán de montar todo su sistema de autenticación!</p>\n    <p><strong>Incluso si elige no usar un kit de inicio en su aplicación final de Laravel, instalar el kit de inicio de <span class=\"link\">Laravel Breeze</span> puede ser una oportunidad maravillosa para aprender cómo implementar todas las funciones de autenticación de Laravel en un proyecto de Laravel real. </strong>Dado que Laravel Breeze crea controladores de autenticación, rutas y vistas para usted, puede examinar el código dentro de estos archivos para aprender cómo se pueden implementar las funciones de autenticación de Laravel.</p>\n    <p></p>\n    <h3 id=\"introduction-database-considerations\"><span class=\"link\">Consideraciones de la base de datos</span></h3>\n    <p>De forma predeterminada, Laravel incluye un <code>App\\Models\\User</code> <span class=\"link\">modelo Eloquent</span> en su <code>app/Models</code>directorio. Este modelo se puede utilizar con el controlador de autenticación predeterminado de Eloquent. Si su aplicación no usa Eloquent, puede usar el <code>database</code>proveedor de autenticación que usa el generador de consultas de Laravel.</p>\n    <p>Al crear el esquema de la base de datos para el <code>App\\Models\\User</code>modelo, asegúrese de que la columna de contraseña tenga al menos 60 caracteres de longitud. Por supuesto, la <code>users</code>migración de la tabla que se incluye en las nuevas aplicaciones de Laravel ya crea una columna que excede esta longitud.</p>\n    <p>Además, debe verificar que su <code>users</code>tabla (o equivalente) contenga una <code>remember_token</code>columna de cadena anulable de 100 caracteres. Esta columna se utilizará para almacenar un token para los usuarios que seleccionen la opción \"recordarme\" al iniciar sesión en su aplicación. Nuevamente, la <code>users</code>migración de la tabla predeterminada que se incluye en las nuevas aplicaciones de Laravel ya contiene esta columna.</p>\n    <p></p>\n    <h3 id=\"ecosystem-overview\"><span class=\"link\">Descripción general del ecosistema</span></h3>\n    <p>Laravel ofrece varios paquetes relacionados con la autenticación. Antes de continuar, revisaremos el ecosistema de autenticación general en Laravel y discutiremos el propósito de cada paquete.</p>\n    <p>Primero, considere cómo funciona la autenticación. Al utilizar un navegador web, el usuario proporcionará su nombre de usuario y contraseña a través de un formulario de inicio de sesión. Si estas credenciales son correctas, la aplicación almacenará información sobre el usuario autenticado en la <span class=\"link\">sesión</span> del usuario . Una cookie emitida al navegador contiene el ID de sesión para que las solicitudes posteriores a la aplicación puedan asociar al usuario con la sesión correcta. Una vez recibida la cookie de sesión, la aplicación recuperará los datos de la sesión basándose en el ID de la sesión, observará que la información de autenticación se ha almacenado en la sesión y considerará al usuario como \"autenticado\".</p>\n    <p>Cuando un servicio remoto necesita autenticarse para acceder a una API, las cookies no se utilizan normalmente para la autenticación porque no hay un navegador web. En cambio, el servicio remoto envía un token de API a la API en cada solicitud. La aplicación puede validar el token entrante contra una tabla de tokens API válidos y \"autenticar\" la solicitud como realizada por el usuario asociado con ese token API.</p>\n    <p></p>\n    <h4 id=\"laravels-built-in-browser-authentication-services\"><span class=\"link\">Servicios de autenticación de navegador integrados de Laravel</span></h4>\n    <p>Laravel incluye servicios de sesión y autenticación integrados a los que normalmente se accede a través de las fachadas <code>Auth</code>y <code>Session</code>. Estas funciones proporcionan autenticación basada en cookies para solicitudes que se inician desde navegadores web. Proporcionan métodos que le permiten verificar las credenciales de un usuario y autenticar al usuario. Además, estos servicios almacenarán automáticamente los datos de autenticación adecuados en la sesión del usuario y emitirán la cookie de sesión del usuario. En esta documentación se incluye una explicación de cómo utilizar estos servicios.</p>\n    <p><strong>Kits de inicio de aplicaciones</strong></p>\n    <p>Como se explica en esta documentación, puede interactuar con estos servicios de autenticación manualmente para crear la propia capa de autenticación de su aplicación. Sin embargo, para ayudarlo a comenzar más rápidamente, hemos lanzado <span class=\"link\">paquetes gratuitos</span> que brindan un andamiaje moderno y sólido de toda la capa de autenticación. Estos paquetes son <span class=\"link\">Laravel Breeze</span> , <span class=\"link\">Laravel Jetstream</span> y <span class=\"link\">Laravel Fortify</span> .</p>\n    <p><em>Laravel Breeze</em> es una implementación simple y mínima de todas las funciones de autenticación de Laravel, que incluyen inicio de sesión, registro, restablecimiento de contraseña, verificación de correo electrónico y confirmación de contraseña. La capa de vista de Laravel Breeze se compone de <span class=\"link\">plantillas Blade</span> simples diseñadas con <span class=\"link\">Tailwind CSS</span> . Para comenzar, consulte la documentación de los <span class=\"link\">kits de inicio de</span> la <span class=\"link\">aplicación</span> de Laravel .</p>\n    <p><em>Laravel Fortify</em> es un backend de autenticación sin cabeza para Laravel que implementa muchas de las características que se encuentran en esta documentación, incluida la autenticación basada en cookies, así como otras características como la autenticación de dos factores y la verificación del correo electrónico. Fortify proporciona el backend de autenticación para Laravel Jetstream o puede usarse de forma independiente en combinación con <span class=\"link\">Laravel Sanctum</span> para proporcionar autenticación para un SPA que necesita autenticarse con Laravel.</p>\n    <p><em><span class=\"link\">Laravel Jetstream</span></em> es un robusto kit de inicio de aplicaciones que consume y expone los servicios de autenticación de Laravel Fortify con una interfaz de usuario hermosa y moderna impulsada por<span class=\"link\"> Tailwind CSS</span> ,<span class=\"link\"> Livewire</span> y / o<span class=\"link\"> Inertia.js</span> . Laravel Jetstream incluye soporte opcional para autenticación de dos factores, soporte de equipo, administración de sesiones del navegador, administración de perfiles e integración incorporada con<span class=\"link\"> Laravel Sanctum</span> para ofrecer autenticación de token API. Las ofertas de autenticación de API de Laravel se analizan a continuación.</p>\n    <p></p>\n    <h4 id=\"laravels-api-authentication-services\"><span class=\"link\">Servicios de autenticación de API de Laravel</span></h4>\n    <p>Laravel proporciona dos paquetes opcionales para ayudarlo a administrar tokens API y autenticar solicitudes realizadas con tokens API: <span class=\"link\">Passport</span> y <span class=\"link\">Sanctum</span> . Tenga en cuenta que estas bibliotecas y las bibliotecas de autenticación basadas en cookies integradas de Laravel no son mutuamente excluyentes. Estas bibliotecas se centran principalmente en la autenticación de token de API, mientras que los servicios de autenticación integrados se centran en la autenticación del navegador basada en cookies. Muchas aplicaciones utilizarán los servicios de autenticación basados \u200B\u200Ben cookies integrados de Laravel y uno de los paquetes de autenticación API de Laravel.</p>\n    <p><strong>Pasaporte</strong></p>\n    <p>Passport es un proveedor de autenticación OAuth2, que ofrece una variedad de \"tipos de concesión\" OAuth2 que le permiten emitir varios tipos de tokens. En general, este es un paquete robusto y complejo para la autenticación de API. Sin embargo, la mayoría de las aplicaciones no requieren las funciones complejas que ofrece la especificación OAuth2, lo que puede resultar confuso tanto para los usuarios como para los desarrolladores. Además, los desarrolladores han estado históricamente confundidos acerca de cómo autenticar aplicaciones SPA o aplicaciones móviles utilizando proveedores de autenticación OAuth2 como Passport.</p>\n    <p><strong>Santuario</strong></p>\n    <p>En respuesta a la complejidad de OAuth2 y la confusión de los desarrolladores, nos propusimos crear un paquete de autenticación más simple y optimizado que pudiera manejar tanto las solicitudes web de origen desde un navegador web como las solicitudes de API a través de tokens. Este objetivo se logró con el lanzamiento de <span class=\"link\">Laravel Sanctum</span> , que debe considerarse el paquete de autenticación preferido y recomendado para aplicaciones que ofrecerán una interfaz de usuario web propia además de una API, o que estarán impulsadas por una aplicación de una sola página ( SPA) que existe por separado de la aplicación Laravel backend, o aplicaciones que ofrecen un cliente móvil.</p>\n    <p>Laravel Sanctum es un paquete de autenticación híbrido web / API que puede administrar todo el proceso de autenticación de su aplicación. Esto es posible porque cuando las aplicaciones basadas en Sanctum reciben una solicitud, Sanctum primero determinará si la solicitud incluye una cookie de sesión que hace referencia a una sesión autenticada. Sanctum logra esto llamando a los servicios de autenticación integrados de Laravel que discutimos anteriormente. Si la solicitud no se autentica a través de una cookie de sesión, Sanctum inspeccionará la solicitud de un token de API. Si hay un token de API, Sanctum autenticará la solicitud utilizando ese token. Para obtener más información sobre este proceso, consulte la documentación <span class=\"link\">\"cómo funciona\" de</span> Sanctum .</p>\n    <p>Laravel Sanctum es el paquete de API que hemos elegido incluir con el kit de inicio de la aplicación <span class=\"link\">Laravel Jetstream</span> porque creemos que es la mejor opción para la mayoría de las necesidades de autenticación de aplicaciones web.</p>\n    <p></p>\n    <h4 id=\"summary-choosing-your-stack\"><span class=\"link\">Resumen y elección de su pila</span></h4>\n    <p>En resumen, si se accederá a su aplicación mediante un navegador y está creando una aplicación monolítica de Laravel, su aplicación utilizará los servicios de autenticación integrados de Laravel.</p>\n    <p>A continuación, si su aplicación ofrece una API que será consumida por terceros, elegirá entre <span class=\"link\">Passport</span> o <span class=\"link\">Sanctum</span> para proporcionar autenticación de token de API para su aplicación. En general, se debería preferir Sanctum cuando sea posible, ya que es una solución simple y completa para la autenticación de API, autenticación de SPA y autenticación móvil, que incluye soporte para \"alcances\" o \"habilidades\".</p>\n    <p>Si está creando una aplicación de una sola página (SPA) que será impulsada por un backend de Laravel, debe usar <span class=\"link\">Laravel Sanctum</span> . Al usar Sanctum, deberá <span class=\"link\">implementar manualmente sus propias rutas de autenticación de backend</span> o utilizar <span class=\"link\">Laravel Fortify</span> como un servicio de backend de autenticación sin cabeza que proporciona rutas y controladores para funciones como registro, restablecimiento de contraseña, verificación de correo electrónico y más.</p>\n    <p>Se puede elegir Passport cuando su aplicación necesita absolutamente todas las características proporcionadas por la especificación OAuth2.</p>\n    <p>Y, si desea comenzar rápidamente, nos complace recomendar <span class=\"link\">Laravel Jetstream</span> como una forma rápida de iniciar una nueva aplicación Laravel que ya usa nuestra pila de autenticación preferida de los servicios de autenticación integrados de Laravel y Laravel Sanctum.</p>\n    <p></p>\n    <h2 id=\"authentication-quickstart\"><span class=\"link\">Inicio rápido de autenticación</span></h2>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Esta parte de la documentación analiza la autenticación de usuarios a través de los <span class=\"link\">kits de inicio de la aplicación Laravel</span> , que incluyen andamios de interfaz de usuario para ayudarlo a comenzar rápidamente. Si desea integrarse directamente con los sistemas de autenticación de Laravel, consulte la documentación sobre cómo <span class=\"link\">autenticar usuarios manualmente</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"install-a-starter-kit\"><span class=\"link\">Instalar un kit de inicio</span></h3>\n    <p>Primero, debe <span class=\"link\">instalar un kit de inicio de la aplicación Laravel</span> . Nuestros kits de inicio actuales, Laravel Breeze y Laravel Jetstream, ofrecen puntos de partida bellamente diseñados para incorporar la autenticación en su nueva aplicación Laravel.</p>\n    <p>Laravel Breeze es una implementación mínima y simple de todas las funciones de autenticación de Laravel, que incluyen inicio de sesión, registro, restablecimiento de contraseña, verificación de correo electrónico y confirmación de contraseña. La capa de vista de Laravel Breeze está formada por <span class=\"link\">plantillas Blade</span> simples diseñadas con <span class=\"link\">Tailwind CSS</span> . Breeze también ofrece una opción de andamio basado en <span class=\"link\">inercia</span> usando Vue o React.</p>\n    <p><span class=\"link\">Laravel Jetstream</span> es un kit de inicio de aplicación más robusto que incluye soporte para andamiaje de su aplicación con <span class=\"link\">Livewire</span> o <span class=\"link\">Inertia.js y Vue</span> . Además, Jetstream cuenta con soporte opcional para autenticación de dos factores, equipos, administración de perfiles, administración de sesiones del navegador, soporte de API a través de <span class=\"link\">Laravel Sanctum</span> , eliminación de cuentas y más.</p>\n    <p></p>\n    <h3 id=\"retrieving-the-authenticated-user\"><span class=\"link\">Recuperando el usuario autenticado</span></h3>\n    <p>Después de instalar un kit de inicio de autenticación y permitir que los usuarios se registren y autentiquen con su aplicación, a menudo necesitará interactuar con el usuario actualmente autenticado. Mientras maneja una solicitud entrante, puede acceder al usuario autenticado a través <code>Auth</code>del <code>user</code>método de la fachada :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Auth</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Retrieve the currently authenticated user...</span>\n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Retrieve the currently authenticated user's ID...</span>\n<span class=\"token variable\">$id</span> <span class=\"token operator\">=</span> Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Alternativamente, una vez que un usuario está autenticado, puede acceder al usuario autenticado a través de una <code>Illuminate\\Http\\Request</code>instancia. Recuerde, las clases con sugerencias de tipo se inyectarán automáticamente en los métodos de su controlador. Al escribir una sugerencia del <code>Illuminate\\Http\\Request</code>objeto, puede obtener un acceso conveniente al usuario autenticado desde cualquier método de controlador en su aplicación a través del <code>user</code>método de la solicitud :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlightController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Update the flight information for an existing flight.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// $request-&gt;user()</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p></p>\n    <h4 id=\"determining-if-the-current-user-is-authenticated\"><span class=\"link\">Determinar si el usuario actual está autenticado</span></h4>\n    <p>Para determinar si el usuario que realiza la solicitud HTTP entrante está autenticado, puede usar el <code>check</code>método en la <code>Auth</code>fachada. Este método regresará <code>true</code>si el usuario está autenticado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Auth</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The user is logged in...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Aunque es posible determinar si un usuario está autenticado mediante el <code>check</code>método, normalmente utilizará un middleware para verificar que el usuario esté autenticado antes de permitirle el acceso a determinadas rutas / controladores. Para obtener más información sobre esto, consulte la documentación sobre la <span class=\"link\">protección de rutas</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"protecting-routes\"><span class=\"link\">Protección de rutas</span></h3>\n    <p><span class=\"link\">El middleware de ruta</span> se puede utilizar para permitir que solo los usuarios autenticados accedan a una ruta determinada. Laravel se envía con un <code>auth</code>middleware, que hace referencia a la <code>Illuminate\\Auth\\Middleware\\Authenticate</code>clase. Dado que este middleware ya está registrado en el kernel HTTP de su aplicación, todo lo que necesita hacer es adjuntar el middleware a una definición de ruta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/flights'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Only authenticated users may access this route...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'auth'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"redirecting-unauthenticated-users\"><span class=\"link\">Redirigir usuarios no autenticados</span></h4>\n    <p>Cuando el <code>auth</code>middleware detecta un usuario no autenticado, lo redirigirá a la <code>login</code> <span class=\"link\">ruta nombrada</span> . Puede modificar este comportamiento actualizando la <code>redirectTo</code>función en el <code>app/Http/Middleware/Authenticate.php</code>archivo de su aplicación :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the path the user should be redirected to.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return string\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">redirectTo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h4 id=\"specifying-a-guard\"><span class=\"link\">Especificando un guardia</span></h4>\n    <p>Al adjuntar el <code>auth</code>middleware a una ruta, también puede especificar qué \"guardia\" debe usarse para autenticar al usuario. La protección especificada debe corresponder a una de las claves en la <code>guards</code>matriz de su <code>auth.php</code>archivo de configuración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/flights'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Only authenticated users may access this route...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'auth:admin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"login-throttling\"><span class=\"link\">Limitación de inicio de sesión</span></h3>\n    <p>Si está utilizando los <span class=\"link\">kits de inicio</span> Laravel Breeze o Laravel Jetstream , la limitación de velocidad se aplicará automáticamente a los intentos de inicio de sesión. De forma predeterminada, el usuario no podrá iniciar sesión durante un minuto si no proporciona las credenciales correctas después de varios intentos. La limitación es única para el nombre de usuario / dirección de correo electrónico del usuario y su dirección IP.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si desea limitar la tasa de otras rutas en su aplicación, consulte la <span class=\"link\">documentación de limitación de tasa</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h2 id=\"authenticating-users\"><span class=\"link\">Autenticación manual de usuarios</span></h2>\n    <p>No es necesario que utilice el andamio de autenticación incluido con los <span class=\"link\">kits de inicio de</span> la <span class=\"link\">aplicación</span> de Laravel . Si elige no usar este andamio, deberá administrar la autenticación de usuario utilizando las clases de autenticación de Laravel directamente. ¡No te preocupes, es pan comido!</p>\n    <p>Accederemos a los servicios de autenticación de Laravel a través de la <code>Auth</code> <span class=\"link\">fachada</span> , por lo que tendremos que asegurarnos de importar la <code>Auth</code>fachada en la parte superior de la clase. A continuación, veamos el <code>attempt</code>método. El <code>attempt</code>método se usa normalmente para manejar los intentos de autenticación desde el formulario de \"inicio de sesión\" de su aplicación. Si la autenticación es exitosa, debe volver a generar la <span class=\"link\">sesión</span> del usuario para evitar la <span class=\"link\">fijación de la sesión</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Auth</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Handle an authentication attempt.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$credentials</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'password'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'required'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">attempt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$credentials</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">regenerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">intended</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'dashboard'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'The provided credentials do not match our records.'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>El <code>attempt</code>método acepta una matriz de pares clave / valor como primer argumento. Los valores de la matriz se utilizarán para encontrar al usuario en la tabla de su base de datos. Entonces, en el ejemplo anterior, el usuario será recuperado por el valor de la <code>email</code>columna. Si se encuentra al usuario, la contraseña hash almacenada en la base de datos se comparará con el <code>password</code>valor pasado al método a través de la matriz. No debe codificar el <code>password</code>valor de la solicitud entrante , ya que el marco automáticamente codificará el valor antes de compararlo con la contraseña hash en la base de datos. Se iniciará una sesión autenticada para el usuario si las dos contraseñas hash coinciden.</p>\n    <p>Recuerde, los servicios de autenticación de Laravel recuperarán usuarios de su base de datos según la configuración del \"proveedor\" de su guardia de autenticación. En el <code>config/auth.php</code>archivo de configuración predeterminado , se especifica el proveedor de usuarios de Eloquent y se le indica que utilice el <code>App\\Models\\User</code>modelo al recuperar usuarios. Puede cambiar estos valores dentro de su archivo de configuración según las necesidades de su aplicación.</p>\n    <p>El <code>attempt</code>método regresará <code>true</code>si la autenticación fue exitosa. De lo contrario, <code>false</code>será devuelto.</p>\n    <p>El <code>intended</code>método proporcionado por el redirector de Laravel redirigirá al usuario a la URL a la que intentaba acceder antes de ser interceptado por el middleware de autenticación. Se puede proporcionar un URI alternativo a este método en caso de que el destino previsto no esté disponible.</p>\n    <p></p>\n    <h4 id=\"specifying-additional-conditions\"><span class=\"link\">Especificación de condiciones adicionales</span></h4>\n    <p>Si lo desea, también puede agregar condiciones de consulta adicionales a la consulta de autenticación además del correo electrónico y la contraseña del usuario. Para lograr esto, simplemente podemos agregar las condiciones de consulta a la matriz pasada al <code>attempt</code>método. Por ejemplo, podemos verificar que el usuario esté marcado como \"activo\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">attempt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$email</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'password'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'active'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Authentication was successful...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>En estos ejemplos, <code>email</code>no es una opción obligatoria, simplemente se utiliza como ejemplo. Debe usar cualquier nombre de columna que corresponda a un \"nombre de usuario\" en la tabla de su base de datos.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"accessing-specific-guard-instances\"><span class=\"link\">Acceso a instancias de guardia específicas</span></h4>\n    <p>A través <code>Auth</code>del <code>guard</code>método de la fachada , puede especificar qué instancia de guardia le gustaría utilizar al autenticar al usuario. Esto le permite administrar la autenticación para partes separadas de su aplicación utilizando modelos o tablas de usuarios autenticables completamente separados.</p>\n    <p>El nombre de guardia pasado al <code>guard</code>método debe corresponder a uno de los guardias configurados en su <code>auth.php</code>archivo de configuración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">guard</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'admin'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">attempt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$credentials</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h3 id=\"remembering-users\"><span class=\"link\">Recordando a los usuarios</span></h3>\n    <p>Muchas aplicaciones web proporcionan una casilla de verificación \"recordarme\" en su formulario de inicio de sesión. Si desea proporcionar la funcionalidad \"recordarme\" en su aplicación, puede pasar un valor booleano como segundo argumento del <code>attempt</code>método.</p>\n    <p>Cuando este valor es <code>true</code>, Laravel mantendrá al usuario autenticado indefinidamente o hasta que cierre la sesión manualmente. Su <code>users</code>tabla debe incluir la <code>remember_token</code>columna de cadena , que se utilizará para almacenar el token \"recordarme\". La <code>users</code>migración de la tabla incluida con las nuevas aplicaciones de Laravel ya incluye esta columna:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Auth</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">attempt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$email</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'password'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$remember</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The user is being remembered...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h3 id=\"other-authentication-methods\"><span class=\"link\">Otros métodos de autenticación</span></h3>\n    <p></p>\n    <h4 id=\"authenticate-a-user-instance\"><span class=\"link\">Autenticar una instancia de usuario</span></h4>\n    <p>Si necesita establecer una instancia de usuario existente como el usuario actualmente autenticado, puede pasar la instancia de usuario al método de la <code>Auth</code>fachada <code>login</code>. La instancia de usuario dada debe ser una implementación del <code>Illuminate\\Contracts\\Auth\\Authenticatable</code> <span class=\"link\">contrato</span> . El <code>App\\Models\\User</code>modelo incluido con Laravel ya implementa esta interfaz. Este método de autenticación es útil cuando ya tiene una instancia de usuario válida, como directamente después de que un usuario se registra en su aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Auth</span><span class=\"token punctuation\">;</span>\n\nAuth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede pasar un valor booleano como segundo argumento del <code>login</code>método. Este valor indica si se desea la funcionalidad \"recordarme\" para la sesión autenticada. Recuerde, esto significa que la sesión se autenticará indefinidamente o hasta que el usuario cierre sesión manualmente en la aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$remember</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si es necesario, puede especificar una protección de autenticación antes de llamar al <code>login</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">guard</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'admin'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"authenticate-a-user-by-id\"><span class=\"link\">Autenticar un usuario por ID</span></h4>\n    <p>Para autenticar a un usuario utilizando la clave principal de su registro de base de datos, puede utilizar el <code>loginUsingId</code>método. Este método acepta la clave principal del usuario que desea autenticar:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">loginUsingId</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede pasar un valor booleano como segundo argumento del <code>loginUsingId</code>método. Este valor indica si se desea la funcionalidad \"recordarme\" para la sesión autenticada. Recuerde, esto significa que la sesión se autenticará indefinidamente o hasta que el usuario cierre sesión manualmente en la aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">loginUsingId</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$remember</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"authenticate-a-user-once\"><span class=\"link\">Autenticar un usuario una vez</span></h4>\n    <p>Puede utilizar el <code>once</code>método para autenticar a un usuario con la aplicación para una sola solicitud. No se utilizarán sesiones ni cookies al llamar a este método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$credentials</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h2 id=\"http-basic-authentication\"><span class=\"link\">Autenticación básica HTTP</span></h2>\n    <p><span class=\"link\">La autenticación básica HTTP</span> proporciona una forma rápida de autenticar a los usuarios de su aplicación sin configurar una página de \"inicio de sesión\" dedicada. Para comenzar, adjunte el <code>auth.basic</code> <span class=\"link\">middleware</span> a una ruta. El <code>auth.basic</code>middleware está incluido con el marco de Laravel, por lo que no es necesario definirlo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/profile'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Only authenticated users may access this route...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'auth.basic'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Una vez que el middleware se haya adjuntado a la ruta, se le solicitarán automáticamente las credenciales cuando acceda a la ruta en su navegador. De forma predeterminada, el <code>auth.basic</code>middleware asumirá que la <code>email</code>columna de la <code>users</code>tabla de su base de datos es el \"nombre de usuario\" del usuario.</p>\n    <p></p>\n    <h4 id=\"a-note-on-fastcgi\"><span class=\"link\">Una nota sobre FastCGI</span></h4>\n    <p>Si está utilizando PHP FastCGI y Apache para servir su aplicación Laravel, es posible que la autenticación HTTP básica no funcione correctamente. Para corregir estos problemas, se pueden agregar las siguientes líneas al <code>.htaccess</code>archivo de su aplicación :</p>\n    <pre class=\" language-php\"><code class=\" language-php\">RewriteCond <span class=\"token operator\">%</span><span class=\"token punctuation\">{</span><span class=\"token constant\">HTTP</span><span class=\"token punctuation\">:</span>Authorization<span class=\"token punctuation\">}</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span>$\nRewriteRule <span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">E</span><span class=\"token operator\">=</span><span class=\"token constant\">HTTP_AUTHORIZATION</span><span class=\"token punctuation\">:</span><span class=\"token operator\">%</span><span class=\"token punctuation\">{</span><span class=\"token constant\">HTTP</span><span class=\"token punctuation\">:</span>Authorization<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre>\n    <p></p>\n    <h3 id=\"stateless-http-basic-authentication\"><span class=\"link\">Autenticación básica HTTP sin estado</span></h3>\n    <p>También puede utilizar la autenticación básica HTTP sin configurar una cookie de identificación de usuario en la sesión. Esto es principalmente útil si elige utilizar la autenticación HTTP para autenticar solicitudes a la API de su aplicación. Para lograr esto, <span class=\"link\">defina un middleware</span> que llame al <code>onceBasic</code>método. Si el <code>onceBasic</code>método no devuelve ninguna respuesta , la solicitud puede pasarse más a la aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Middleware</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Auth</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthenticateOnceWithBasicAuth</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Handle an incoming request.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\Closure  $next\n     * @return mixed\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">onceBasic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$next</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>A continuación, <span class=\"link\">registre el middleware de ruta</span> y adjúntelo a una ruta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/api/user'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Only authenticated users may access this route...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'auth.basic.once'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"logging-out\"><span class=\"link\">Saliendo de tu cuenta</span></h2>\n    <p>Para desconectar manualmente a los usuarios de su aplicación, puede utilizar el <code>logout</code>método proporcionado por la <code>Auth</code>fachada. Esto eliminará la información de autenticación de la sesión del usuario para que las solicitudes posteriores no se autentiquen.</p>\n    <p>Además de llamar al <code>logout</code>método, se recomienda que invalide la sesión del usuario y regenere su <span class=\"link\">token CSRF</span> . Después de cerrar la sesión del usuario, normalmente lo redirigiría a la raíz de su aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Auth</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Log the user out of the application.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return \\Illuminate\\Http\\Response\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">logout</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">invalidate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">regenerateToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h3 id=\"invalidating-sessions-on-other-devices\"><span class=\"link\">Invalidación de sesiones en otros dispositivos</span></h3>\n    <p>Laravel también proporciona un mecanismo para invalidar y \"cerrar sesión\" las sesiones de un usuario que están activas en otros dispositivos sin invalidar la sesión en su dispositivo actual. Esta función se utiliza normalmente cuando un usuario está cambiando o actualizando su contraseña y le gustaría invalidar sesiones en otros dispositivos mientras mantiene autenticado el dispositivo actual.</p>\n    <p>Antes de comenzar, debe asegurarse de que el <code>Illuminate\\Session\\Middleware\\AuthenticateSession</code>middleware esté presente y sin comentarios en el grupo de middleware de su <code>App\\Http\\Kernel</code>clase <code>web</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'web'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// ...</span>\n    \\<span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Session<span class=\"token punctuation\">\\</span>Middleware<span class=\"token punctuation\">\\</span>AuthenticateSession</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    <p>Luego, puede utilizar el <code>logoutOtherDevices</code>método proporcionado por la <code>Auth</code>fachada. Este método requiere que el usuario confirme su contraseña actual, que su aplicación debe aceptar a través de un formulario de entrada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Auth</span><span class=\"token punctuation\">;</span>\n\nAuth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">logoutOtherDevices</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$currentPassword</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Cuando <code>logoutOtherDevices</code>se invoca el método, las otras sesiones del usuario se invalidarán por completo, lo que significa que se \"cerrarán la sesión\" de todos los guardias por los que fueron previamente autenticados.</p>\n    <p></p>\n    <h2 id=\"password-confirmation\"><span class=\"link\">Confirmación de contraseña</span></h2>\n    <p>Mientras crea su aplicación, es posible que ocasionalmente tenga acciones que requieran que el usuario confirme su contraseña antes de realizar la acción o antes de que el usuario sea redirigido a un área sensible de la aplicación. Laravel incluye middleware integrado para facilitar este proceso. La implementación de esta función requerirá que defina dos rutas: una ruta para mostrar una vista pidiendo al usuario que confirme su contraseña y otra ruta para confirmar que la contraseña es válida y redirigir al usuario a su destino previsto.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>La siguiente documentación explica cómo integrarse directamente con las funciones de confirmación de contraseña de Laravel; sin embargo, si desea comenzar más rápido, los <span class=\"link\">kits de inicio de la aplicación Laravel</span> incluyen soporte para esta función.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"password-confirmation-configuration\"><span class=\"link\">Configuración</span></h3>\n    <p>Después de confirmar su contraseña, no se le pedirá al usuario que vuelva a confirmar su contraseña durante tres horas. Sin embargo, puede configurar el período de tiempo antes de que se le vuelva a solicitar la contraseña al usuario cambiando el valor del valor de <code>password_timeout</code>configuración dentro del <code>config/auth.php</code>archivo de configuración de su aplicación .</p>\n    <p></p>\n    <h3 id=\"password-confirmation-routing\"><span class=\"link\">Enrutamiento</span></h3>\n    <p></p>\n    <h4 id=\"the-password-confirmation-form\"><span class=\"link\">El formulario de confirmación de contraseña</span></h4>\n    <p>Primero, definiremos una ruta para mostrar una vista que solicita al usuario que confirme su contraseña:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/confirm-password'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'auth.confirm-password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'auth'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'password.confirm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Como era de esperar, la vista que devuelve esta ruta debe tener un formulario que contenga un <code>password</code>campo. Además, siéntase libre de incluir texto dentro de la vista que explique que el usuario está ingresando a un área protegida de la aplicación y debe confirmar su contraseña.</p>\n    <p></p>\n    <h4 id=\"confirming-the-password\"><span class=\"link\">Confirmación de la contraseña</span></h4>\n    <p>A continuación, definiremos una ruta que manejará la solicitud de formulario desde la vista \"confirmar contraseña\". Esta ruta será responsable de validar la contraseña y redirigir al usuario a su destino previsto:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Hash</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Redirect</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/confirm-password'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> Hash<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">password</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'password'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'The provided password does not match our records.'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">passwordConfirmed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">intended</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'auth'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'throttle:6,1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'password.confirm'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Antes de continuar, examinemos esta ruta con más detalle. Primero, <code>password</code>se determina que el campo de la solicitud coincide realmente con la contraseña del usuario autenticado. Si la contraseña es válida, debemos informar a la sesión de Laravel que el usuario ha confirmado su contraseña. El <code>passwordConfirmed</code>método establecerá una marca de tiempo en la sesión del usuario que Laravel puede usar para determinar cuándo el usuario confirmó por última vez su contraseña. Finalmente, podemos redirigir al usuario a su destino previsto.</p>\n    <p></p>\n    <h3 id=\"password-confirmation-protecting-routes\"><span class=\"link\">Protección de rutas</span></h3>\n    <p>Debe asegurarse de que se asigne el <code>password.confirm</code>middleware a cualquier ruta que realice una acción que requiera una confirmación de contraseña reciente . Este middleware se incluye con la instalación predeterminada de Laravel y almacenará automáticamente el destino deseado del usuario en la sesión para que el usuario pueda ser redirigido a esa ubicación después de confirmar su contraseña. Después de almacenar el destino deseado del usuario en la sesión, el middleware redirigirá al usuario a la <code>password.confirm</code> <span class=\"link\">ruta nombrada</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/settings'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'password.confirm'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/settings'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'password.confirm'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"adding-custom-guards\"><span class=\"link\">Agregar guardias personalizados</span></h2>\n    <p>Puede definir sus propias protecciones de autenticación utilizando el <code>extend</code>método de la <code>Auth</code>fachada. Debe realizar su llamada al <code>extend</code>método dentro de un <span class=\"link\">proveedor de servicios</span> . Dado que Laravel ya se envía con un <code>AuthServiceProvider</code>, podemos colocar el código en ese proveedor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Services<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>JwtGuard</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Providers<span class=\"token punctuation\">\\</span>AuthServiceProvider</span> <span class=\"token keyword\">as</span> ServiceProvider<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Auth</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Register any application authentication / authorization services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">registerPolicies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'jwt'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$app</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Return an instance of Illuminate\\Contracts\\Auth\\Guard...</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JwtGuard</span><span class=\"token punctuation\">(</span>Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">createUserProvider</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$config</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'provider'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Como puede ver en el ejemplo anterior, la devolución de llamada pasada al <code>extend</code>método debería devolver una implementación de <code>Illuminate\\Contracts\\Auth\\Guard</code>. Esta interfaz contiene algunos métodos que deberá implementar para definir una protección personalizada. Una vez que se ha definido su guardia personalizada, puede hacer referencia a la guardia en la <code>guards</code>configuración de su <code>auth.php</code>archivo de configuración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'guards'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'api'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'driver'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'jwt'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'provider'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    <p></p>\n    <h3 id=\"closure-request-guards\"><span class=\"link\">Guardias de solicitud de cierre</span></h3>\n    <p>La forma más sencilla de implementar un sistema de autenticación personalizado basado en solicitudes HTTP es mediante el <code>Auth::viaRequest</code>método. Este método le permite definir rápidamente su proceso de autenticación utilizando un solo cierre.</p>\n    <p>Para comenzar, llame al <code>Auth::viaRequest</code>método dentro del <code>boot</code>método de su <code>AuthServiceProvider</code>. El <code>viaRequest</code>método acepta un nombre de controlador de autenticación como primer argumento. Este nombre puede ser cualquier cadena que describa su guardia personalizada. El segundo argumento pasado al método debería ser un cierre que recibe la solicitud HTTP entrante y devuelve una instancia de usuario o, si falla la autenticación, <code>null</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Auth</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Register any application authentication / authorization services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">registerPolicies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">viaRequest</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'custom-token'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'token'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">token</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Una vez que se ha definido su controlador de autenticación personalizado, puede configurarlo como un controlador dentro de la <code>guards</code>configuración de su <code>auth.php</code>archivo de configuración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'guards'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'api'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'driver'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'custom-token'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    <p></p>\n    <h2 id=\"adding-custom-user-providers\"><span class=\"link\">Agregar proveedores de usuarios personalizados</span></h2>\n    <p>Si no está utilizando una base de datos relacional tradicional para almacenar sus usuarios, deberá ampliar Laravel con su propio proveedor de usuarios de autenticación. Usaremos el <code>provider</code>método en la <code>Auth</code>fachada para definir un proveedor de usuarios personalizado. El solucionador del proveedor de usuarios debería devolver una implementación de <code>Illuminate\\Contracts\\Auth\\UserProvider</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Extensions<span class=\"token punctuation\">\\</span>MongoUserProvider</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Providers<span class=\"token punctuation\">\\</span>AuthServiceProvider</span> <span class=\"token keyword\">as</span> ServiceProvider<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Auth</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Register any application authentication / authorization services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">registerPolicies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Auth<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">provider</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'mongo'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$app</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Return an instance of Illuminate\\Contracts\\Auth\\UserProvider...</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MongoUserProvider</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$app</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'mongo.connection'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Una vez que haya registrado el proveedor utilizando el <code>provider</code>método, puede cambiar al nuevo proveedor de usuario en su <code>auth.php</code>archivo de configuración. Primero, defina un <code>provider</code>que use su nuevo controlador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'providers'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'users'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'driver'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'mongo'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    <p>Finalmente, puede hacer referencia a este proveedor en su <code>guards</code>configuración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'guards'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'web'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'driver'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'session'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'provider'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    <p></p>\n    <h3 id=\"the-user-provider-contract\"><span class=\"link\">El contrato de proveedor de usuario</span></h3>\n    <p><code>Illuminate\\Contracts\\Auth\\UserProvider</code>las implementaciones son responsables de obtener una <code>Illuminate\\Contracts\\Auth\\Authenticatable</code>implementación de un sistema de almacenamiento persistente, como MySQL, MongoDB, etc. Estas dos interfaces permiten que los mecanismos de autenticación de Laravel continúen funcionando independientemente de cómo se almacenan los datos del usuario o qué tipo de clase se usa para representar el usuario autenticado:</p>\n    <p>Echemos un vistazo al <code>Illuminate\\Contracts\\Auth\\UserProvider</code>contrato:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Auth</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">retrieveById</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$identifier</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">retrieveByToken</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$identifier</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$token</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateRememberToken</span><span class=\"token punctuation\">(</span>Authenticatable <span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$token</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">retrieveByCredentials</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$credentials</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">validateCredentials</span><span class=\"token punctuation\">(</span>Authenticatable <span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$credentials</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>La <code>retrieveById</code>función normalmente recibe una clave que representa al usuario, como un ID de incremento automático de una base de datos MySQL. El <code>Authenticatable</code>método debe recuperar y devolver la implementación que coincida con el ID.</p>\n    <p>La <code>retrieveByToken</code>función recupera a un usuario por su único <code>$identifier</code>y \"recuérdame\" <code>$token</code>, normalmente almacenado en una columna de base de datos como <code>remember_token</code>. Al igual que con el método anterior, <code>Authenticatable</code>este método debe devolver la implementación con un valor de token coincidente.</p>\n    <p>El <code>updateRememberToken</code>método actualiza la <code>$user</code>instancia <code>remember_token</code>con el nuevo <code>$token</code>. Se asigna un token nuevo a los usuarios en un intento de autenticación \"recuérdame\" exitoso o cuando el usuario cierra la sesión.</p>\n    <p>El <code>retrieveByCredentials</code>método recibe la matriz de credenciales que se le pasa al <code>Auth::attempt</code>método cuando intenta autenticarse con una aplicación. Luego, el método debe \"consultar\" el almacenamiento persistente subyacente para el usuario que coincida con esas credenciales. Normalmente, este método ejecutará una consulta con una condición \"dónde\" que busca un registro de usuario con un \"nombre de usuario\" que coincida con el valor de <code>$credentials['username']</code>. El método debería devolver una implementación de <code>Authenticatable</code>. <strong>Este método no debe intentar realizar ninguna validación o autenticación de contraseña.</strong></p>\n    <p>El <code>validateCredentials</code>método debe comparar lo dado <code>$user</code>con el <code>$credentials</code>para autenticar al usuario. Por ejemplo, este método normalmente utilizará el <code>Hash::check</code>método para comparar el valor de <code>$user-&gt;getAuthPassword()</code>con el valor de <code>$credentials['password']</code>. Este método debe devolver <code>true</code>o <code>false</code>indicar si la contraseña es válida.</p>\n    <p></p>\n    <h3 id=\"the-authenticatable-contract\"><span class=\"link\">El contrato autenticable</span></h3>\n    <p>Ahora que hemos explorado cada uno de los métodos en el <code>UserProvider</code>, echemos un vistazo al <code>Authenticatable</code>contrato. Recuerde, los proveedores usuario debe devolver las implementaciones de esta interfaz desde el <code>retrieveById</code>, <code>retrieveByToken</code>y <code>retrieveByCredentials</code>métodos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Auth</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Authenticatable</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAuthIdentifierName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAuthIdentifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAuthPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getRememberToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setRememberToken</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getRememberTokenName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Esta interfaz es simple. El <code>getAuthIdentifierName</code>método debe devolver el nombre del campo \"clave principal\" del usuario y el <code>getAuthIdentifier</code>método debe devolver la \"clave principal\" del usuario. Cuando se usa un back-end de MySQL, esta probablemente sea la clave primaria de incremento automático asignada al registro del usuario. El <code>getAuthPassword</code>método debe devolver la contraseña hash del usuario.</p>\n    <p>Esta interfaz permite que el sistema de autenticación funcione con cualquier clase de \"usuario\", independientemente del ORM o la capa de abstracción de almacenamiento que esté utilizando. Por defecto, Laravel incluye una <code>App\\Models\\User</code>clase en el <code>app/Models</code>directorio que implementa esta interfaz.</p>\n    <p></p>\n    <h2 id=\"events\"><span class=\"link\">Eventos</span></h2>\n    <p>Laravel envía una variedad de <span class=\"link\">eventos</span> durante el proceso de autenticación. Puede adjuntar oyentes a estos eventos en su <code>EventServiceProvider</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The event listener mappings for the application.\n *\n * @var array\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$listen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'Illuminate\\Auth\\Events\\Registered'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'App\\Listeners\\LogRegisteredUser'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token single-quoted-string string\">'Illuminate\\Auth\\Events\\Attempting'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'App\\Listeners\\LogAuthenticationAttempt'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token single-quoted-string string\">'Illuminate\\Auth\\Events\\Authenticated'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'App\\Listeners\\LogAuthenticated'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token single-quoted-string string\">'Illuminate\\Auth\\Events\\Login'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'App\\Listeners\\LogSuccessfulLogin'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token single-quoted-string string\">'Illuminate\\Auth\\Events\\Failed'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'App\\Listeners\\LogFailedLogin'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token single-quoted-string string\">'Illuminate\\Auth\\Events\\Validated'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'App\\Listeners\\LogValidated'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token single-quoted-string string\">'Illuminate\\Auth\\Events\\Verified'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'App\\Listeners\\LogVerified'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token single-quoted-string string\">'Illuminate\\Auth\\Events\\Logout'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'App\\Listeners\\LogSuccessfulLogout'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token single-quoted-string string\">'Illuminate\\Auth\\Events\\CurrentDeviceLogout'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'App\\Listeners\\LogCurrentDeviceLogout'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token single-quoted-string string\">'Illuminate\\Auth\\Events\\OtherDeviceLogout'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'App\\Listeners\\LogOtherDeviceLogout'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token single-quoted-string string\">'Illuminate\\Auth\\Events\\Lockout'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'App\\Listeners\\LogLockout'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token single-quoted-string string\">'Illuminate\\Auth\\Events\\PasswordReset'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'App\\Listeners\\LogPasswordReset'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n</div>"
    },
    {
      "title": "Autorización",
      "subtitle": "SEGURIDAD",
      "contenido": "<div>\n    <h1>Autorización</h1>    \n    <p></p>\n    <h2 id=\"introduction\"><span class=\"link\">Introducción</span></h2>\n    <p>Además de proporcionar servicios de <span class=\"link\">autenticación</span> integrados , Laravel también proporciona una forma sencilla de autorizar las acciones del usuario contra un recurso determinado. Por ejemplo, aunque un usuario esté autenticado, es posible que no esté autorizado para actualizar o eliminar ciertos modelos de Eloquent o registros de bases de datos administrados por su aplicación. Las funciones de autorización de Laravel proporcionan una forma fácil y organizada de gestionar este tipo de comprobaciones de autorización.</p>\n    <p>Laravel proporciona dos formas principales de autorizar acciones: <span class=\"link\">puertas</span> y <span class=\"link\">políticas</span> . Piense en puertas y políticas como rutas y controladores. Las puertas proporcionan un enfoque de autorización simple y basado en cierres, mientras que las políticas, como los controladores, agrupan la lógica en torno a un modelo o recurso en particular. En esta documentación, exploraremos las puertas primero y luego examinaremos las políticas.</p>\n    <p>No es necesario que elija entre el uso exclusivo de puertas o el uso exclusivo de políticas al crear una aplicación. La mayoría de las aplicaciones probablemente contendrán alguna combinación de puertas y políticas, ¡y eso está perfectamente bien! Las puertas son más aplicables a acciones que no están relacionadas con ningún modelo o recurso, como ver un panel de administrador. Por el contrario, las políticas deben usarse cuando desee autorizar una acción para un modelo o recurso en particular.</p>\n    <p></p>\n    <h2 id=\"gates\"><span class=\"link\">Puertas</span></h2>\n    <p></p>\n    <h3 id=\"writing-gates\"><span class=\"link\">Puertas de escritura</span></h3>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Las puertas son una excelente manera de aprender los conceptos básicos de las funciones de autorización de Laravel; sin embargo, al crear aplicaciones robustas de Laravel, debería considerar el uso de <span class=\"link\">políticas</span> para organizar sus reglas de autorización.</p></p></div>\n    </blockquote>\n    <p>Las puertas son simplemente cierres que determinan si un usuario está autorizado para realizar una acción determinada. Normalmente, las puertas se definen dentro del <code>boot</code>método de la <code>App\\Providers\\AuthServiceProvider</code>clase que utiliza la <code>Gate</code>fachada. Las puertas siempre reciben una instancia de usuario como primer argumento y, opcionalmente, pueden recibir argumentos adicionales, como un modelo Eloquent relevante.</p>\n    <p>En este ejemplo, definiremos una puerta para determinar si un usuario puede actualizar un <code>App\\Models\\Post</code>modelo determinado . La puerta logrará esto comparando al usuario <code>id</code>con el <code>user_id</code>del usuario que creó la publicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Gate</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Register any authentication / authorization services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">registerPolicies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Gate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'update-post'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> Post <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">user_id</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Al igual que los controladores, las puertas también se pueden definir mediante una matriz de devolución de llamada de clase:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Policies<span class=\"token punctuation\">\\</span>PostPolicy</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Gate</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Register any authentication / authorization services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">registerPolicies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Gate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'update-post'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>PostPolicy<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'update'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h3 id=\"authorizing-actions-via-gates\"><span class=\"link\">Autorizar acciones</span></h3>\n    <p>Para autorizar una acción mediante puertas, debe utilizar los métodos <code>allows</code>o <code>denies</code>proporcionados por la <code>Gate</code>fachada. Tenga en cuenta que no es necesario que pase el usuario autenticado actualmente a estos métodos. Laravel se encargará automáticamente de pasar al usuario por el cierre de la puerta. Es típico llamar a los métodos de autorización de puerta dentro de los controladores de su aplicación antes de realizar una acción que requiere autorización:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Gate</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PostController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Update the given post.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\Post  $post\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> Post <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> Gate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">allows</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'update-post'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token number\">403</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Update the post...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Si desea determinar si un usuario que no sea el usuario actualmente autenticado está autorizado para realizar una acción, puede usar el <code>forUser</code>método en la <code>Gate</code>fachada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Gate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">forUser</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">allows</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'update-post'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The user can update the post...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Gate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">forUser</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">denies</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'update-post'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The user can't update the post...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Puede autorizar varias acciones a la vez utilizando los métodos <code>any</code>o <code>none</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Gate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'update-post'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'delete-post'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The user can update or delete the post...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Gate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">none</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'update-post'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'delete-post'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The user can't update or delete the post...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h4 id=\"authorizing-or-throwing-exceptions\"><span class=\"link\">Autorizar o lanzar excepciones</span></h4>\n    <p>Si desea intentar autorizar una acción y lanzar automáticamente una <code>Illuminate\\Auth\\Access\\AuthorizationException</code>si el usuario no puede realizar la acción dada, puede usar el método de la <code>Gate</code>fachada <code>authorize</code>. Las instancias de <code>AuthorizationException</code>se convierten automáticamente en una respuesta HTTP 403 por el controlador de excepciones de Laravel:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Gate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">authorize</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'update-post'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The action is authorized...</span></code></pre>\n    <p></p>\n    <h4 id=\"gates-supplying-additional-context\"><span class=\"link\">Proporcionar contexto adicional</span></h4>\n    <p>Los métodos de compuerta para capacidades de autorización ( <code>allows</code>, <code>denies</code>, <code>check</code>, <code>any</code>, <code>none</code>, <code>authorize</code>, <code>can</code>, <code>cannot</code>) y la autorización de <span class=\"link\">las directivas de la lámina</span> ( <code>@can</code>, <code>@cannot</code>, <code>@canany</code>) pueden recibir una matriz como su segundo argumento. Estos elementos de matriz se pasan como parámetros al cierre de la puerta y se pueden usar para un contexto adicional al tomar decisiones de autorización:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Category</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Gate</span><span class=\"token punctuation\">;</span>\n\nGate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'create-post'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> Category <span class=\"token variable\">$category</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$pinned</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">canPublishToGroup</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$category</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">group</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">elseif</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$pinned</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">canPinPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Gate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'create-post'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token variable\">$category</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$pinned</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The user can create the post...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h3 id=\"gate-responses\"><span class=\"link\">Respuestas de puerta</span></h3>\n    <p>Hasta ahora, solo hemos examinado las puertas que devuelven valores booleanos simples. Sin embargo, a veces es posible que desee devolver una respuesta más detallada, incluido un mensaje de error. Para hacerlo, puede regresar <code>Illuminate\\Auth\\Access\\Response</code>desde su puerta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>Access<span class=\"token punctuation\">\\</span>Response</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Gate</span><span class=\"token punctuation\">;</span>\n\nGate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'edit-settings'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">isAdmin</span>\n                <span class=\"token operator\">?</span> Response<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">allow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">:</span> Response<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">deny</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'You must be an administrator.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Incluso cuando devuelve una respuesta de autorización desde su puerta, el <code>Gate::allows</code>método seguirá devolviendo un valor booleano simple; sin embargo, puede usar el <code>Gate::inspect</code>método para obtener la respuesta de autorización completa devuelta por la puerta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Gate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">inspect</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'edit-settings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">allowed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The action is authorized...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Al usar el <code>Gate::authorize</code>método, que arroja un <code>AuthorizationException</code>si la acción no está autorizada, el mensaje de error proporcionado por la respuesta de autorización se propagará a la respuesta HTTP:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Gate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">authorize</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'edit-settings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The action is authorized...</span></code></pre>\n    <p></p>\n    <h3 id=\"intercepting-gate-checks\"><span class=\"link\">Interceptación de controles de puerta</span></h3>\n    <p>A veces, es posible que desee otorgar todas las habilidades a un usuario específico. Puede utilizar el <code>before</code>método para definir un cierre que se ejecuta antes de todas las demás verificaciones de autorización:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Gate</span><span class=\"token punctuation\">;</span>\n\nGate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ability</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isAdministrator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si el <code>before</code>cierre arroja un resultado no nulo, ese resultado se considerará el resultado de la verificación de autorización.</p>\n    <p>Puede utilizar el <code>after</code>método para definir un cierre que se ejecutará después de todas las demás verificaciones de autorización:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Gate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ability</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$result</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$arguments</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isAdministrator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>De manera similar al <code>before</code>método, si el <code>after</code>cierre arroja un resultado no nulo, ese resultado se considerará el resultado de la verificación de autorización.</p>\n    <p></p>\n    <h2 id=\"creating-policies\"><span class=\"link\">Creación de políticas</span></h2>\n    <p></p>\n    <h3 id=\"generating-policies\"><span class=\"link\">Generando Políticas</span></h3>\n    <p>Las políticas son clases que organizan la lógica de autorización en torno a un modelo o recurso en particular. Por ejemplo, si tu aplicación es un blog, es posible que tengas un <code>App\\Models\\Post</code>modelo y un correspondiente <code>App\\Policies\\PostPolicy</code>para autorizar acciones del usuario como crear o actualizar publicaciones.</p>\n    <p>Puede generar una política utilizando el <code>make:policy</code>comando Artisan. La política generada se colocará en el <code>app/Policies</code>directorio. Si este directorio no existe en su aplicación, Laravel lo creará por usted:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>policy PostPolicy</code></pre>\n    <p>El <code>make:policy</code>comando generará una clase de política vacía. Si desea generar una clase con métodos de política de ejemplo relacionados con la visualización, creación, actualización y eliminación del recurso, puede proporcionar una <code>--model</code>opción al ejecutar el comando:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>policy PostPolicy <span class=\"token operator\">--</span>model<span class=\"token operator\">=</span>Post</code></pre>\n    <p></p>\n    <h3 id=\"registering-policies\"><span class=\"link\">Políticas de registro</span></h3>\n    <p>Una vez que se ha creado la clase de política, es necesario registrarla. El registro de políticas es la forma en que podemos informar a Laravel qué política utilizar al autorizar acciones contra un tipo de modelo determinado.</p>\n    <p>El <code>App\\Providers\\AuthServiceProvider</code>incluido con las nuevas aplicaciones de Laravel contiene una <code>policies</code>propiedad que asigna sus modelos Eloquent a sus políticas correspondientes. El registro de una política le indicará a Laravel qué política utilizar al autorizar acciones contra un modelo Eloquent determinado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Policies<span class=\"token punctuation\">\\</span>PostPolicy</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Providers<span class=\"token punctuation\">\\</span>AuthServiceProvider</span> <span class=\"token keyword\">as</span> ServiceProvider<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Gate</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The policy mappings for the application.\n     *\n     * @var array\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$policies</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> PostPolicy<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Register any application authentication / authorization services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">registerPolicies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p></p>\n    <h4 id=\"policy-auto-discovery\"><span class=\"link\">Detección automática de políticas</span></h4>\n    <p>En lugar de registrar manualmente las políticas del modelo, Laravel puede descubrir políticas automáticamente siempre que el modelo y la política sigan las convenciones de nomenclatura estándar de Laravel. Específicamente, las políticas deben estar en un <code>Policies</code>directorio en o encima del directorio que contiene sus modelos. Entonces, por ejemplo, los modelos pueden colocarse en el <code>app/Models</code>directorio mientras que las políticas pueden colocarse en el <code>app/Policies</code>directorio. En esta situación, Laravel verificará las políticas en <code>app/Models/Policies</code>ese momento <code>app/Policies</code>. Además, el nombre de la política debe coincidir con el nombre del modelo y tener un <code>Policy</code>sufijo. Entonces, un <code>User</code>modelo correspondería a una <code>UserPolicy</code>clase de política.</p>\n    <p>Si desea definir su propia lógica de descubrimiento de políticas, puede registrar una devolución de llamada de descubrimiento de políticas personalizada utilizando el <code>Gate::guessPolicyNamesUsing</code>método. Por lo general, este método debe llamarse desde el <code>boot</code>método de su aplicación <code>AuthServiceProvider</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Gate</span><span class=\"token punctuation\">;</span>\n\nGate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">guessPolicyNamesUsing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$modelClass</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Return the name of the policy class for the given model...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Cualquier política que se asigne explícitamente en su <code>AuthServiceProvider</code>tendrá prioridad sobre cualquier política potencialmente descubierta automáticamente.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h2 id=\"writing-policies\"><span class=\"link\">Políticas de redacción</span></h2>\n    <p></p>\n    <h3 id=\"policy-methods\"><span class=\"link\">Métodos de política</span></h3>\n    <p>Una vez que se haya registrado la clase de política, puede agregar métodos para cada acción que autorice. Por ejemplo, definamos un <code>update</code>método en nuestro <code>PostPolicy</code>que determina si un determinado <code>App\\Models\\User</code>puede actualizar una determinada <code>App\\Models\\Post</code>instancia.</p>\n    <p>El <code>update</code>método recibirá una <code>User</code>y una <code>Post</code>instancia como sus argumentos, y debería devolver <code>true</code>o <code>false</code>indicar si el usuario está autorizado a actualizar el dado <code>Post</code>. Entonces, en este ejemplo, verificaremos que el usuario <code>id</code>coincida con el <code>user_id</code>de la publicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Policies</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PostPolicy</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Determine if the given post can be updated by the user.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @param  \\App\\Models\\Post  $post\n     * @return bool\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> Post <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">user_id</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Puede continuar definiendo métodos adicionales en la política según sea necesario para las diversas acciones que autoriza. Por ejemplo, puede definir <code>view</code>o <code>delete</code>métodos para autorizar varias <code>Post</code>acciones relacionadas, pero recuerde que es libre de dar a sus métodos de política el nombre que desee.</p>\n    <p>Si ha utilizado la <code>--model</code>opción cuando la generación de su política a través de la consola de Artisan, que ya contendrá los métodos para <code>viewAny</code>, <code>view</code>, <code>create</code>, <code>update</code>, <code>delete</code>, <code>restore</code>, y <code>forceDelete</code>acciones.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Todas las políticas se resuelven a través del <span class=\"link\">contenedor de servicios de</span> Laravel , lo que le permite indicar las dependencias necesarias en el constructor de la política para que se inyecten automáticamente.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"policy-responses\"><span class=\"link\">Respuestas de política</span></h3>\n    <p>Hasta ahora, solo hemos examinado métodos de política que devuelven valores booleanos simples. Sin embargo, a veces es posible que desee devolver una respuesta más detallada, incluido un mensaje de error. Para hacerlo, puede devolver una <code>Illuminate\\Auth\\Access\\Response</code>instancia de su método de política:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>Access<span class=\"token punctuation\">\\</span>Response</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Determine if the given post can be updated by the user.\n *\n * @param  \\App\\Models\\User  $user\n * @param  \\App\\Models\\Post  $post\n * @return \\Illuminate\\Auth\\Access\\Response\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> Post <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">user_id</span>\n                <span class=\"token operator\">?</span> Response<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">allow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">:</span> Response<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">deny</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'You do not own this post.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Al devolver una respuesta de autorización de su política, el <code>Gate::allows</code>método seguirá devolviendo un valor booleano simple; sin embargo, puede usar el <code>Gate::inspect</code>método para obtener la respuesta de autorización completa devuelta por la puerta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Gate</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> Gate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">inspect</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'update'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">allowed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The action is authorized...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Al usar el <code>Gate::authorize</code>método, que arroja un <code>AuthorizationException</code>si la acción no está autorizada, el mensaje de error proporcionado por la respuesta de autorización se propagará a la respuesta HTTP:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Gate<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">authorize</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'update'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The action is authorized...</span></code></pre>\n    <p></p>\n    <h3 id=\"methods-without-models\"><span class=\"link\">Métodos sin modelos</span></h3>\n    <p>Algunos métodos de política solo reciben una instancia del usuario actualmente autenticado. Esta situación es más común a la hora de autorizar <code>create</code>acciones. Por ejemplo, si está creando un blog, es posible que desee determinar si un usuario está autorizado para crear publicaciones. En estas situaciones, su método de política solo debe esperar recibir una instancia de usuario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Determine if the given user can create posts.\n *\n * @param  \\App\\Models\\User  $user\n * @return bool\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">role</span> <span class=\"token operator\">==</span> <span class=\"token single-quoted-string string\">'writer'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h3 id=\"guest-users\"><span class=\"link\">Usuarios invitados</span></h3>\n    <p>De forma predeterminada, todas las puertas y políticas regresan automáticamente <code>false</code>si la solicitud HTTP entrante no fue iniciada por un usuario autenticado. Sin embargo, puede permitir que estas verificaciones de autorización pasen a sus puertas y políticas declarando una sugerencia de tipo \"opcional\" o proporcionando un <code>null</code>valor predeterminado para la definición del argumento del usuario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Policies</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PostPolicy</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Determine if the given post can be updated by the user.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @param  \\App\\Models\\Post  $post\n     * @return bool\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> Post <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">optional</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">user_id</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p></p>\n    <h3 id=\"policy-filters\"><span class=\"link\">Filtros de políticas</span></h3>\n    <p>Para ciertos usuarios, es posible que desee autorizar todas las acciones dentro de una política determinada. Para lograr esto, defina un <code>before</code>método en la política. El <code>before</code>método se ejecutará antes que cualquier otro método de la política, lo que le dará la oportunidad de autorizar la acción antes de que se llame al método de política deseado. Esta función se utiliza con mayor frecuencia para autorizar a los administradores de aplicaciones a realizar cualquier acción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Perform pre-authorization checks.\n *\n * @param  \\App\\Models\\User  $user\n * @param  string  $ability\n * @return void|bool\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ability</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isAdministrator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Si desea denegar todas las comprobaciones de autorización para un tipo particular de usuario, puede regresar <code>false</code>del <code>before</code>método. Si <code>null</code>se devuelve, la verificación de autorización pasará al método de la póliza.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>El <code>before</code>método de una clase política no será llamado si la clase no contiene un método con el mismo nombre que el nombre de la capacidad que se comprueba.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h2 id=\"authorizing-actions-using-policies\"><span class=\"link\">Autorización de acciones mediante políticas</span></h2>\n    <p></p>\n    <h3 id=\"via-the-user-model\"><span class=\"link\">A través del modelo de usuario</span></h3>\n    <p>El <code>App\\Models\\User</code>modelo que se incluye con su aplicación Laravel incluye dos métodos útiles para autorizar acciones: <code>can</code>y <code>cannot</code>. Los métodos <code>can</code>y <code>cannot</code>reciben el nombre de la acción que desea autorizar y el modelo correspondiente. Por ejemplo, determinemos si un usuario está autorizado a actualizar un <code>App\\Models\\Post</code>modelo determinado . Normalmente, esto se hará dentro de un método de controlador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PostController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Update the given post.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\Post  $post\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> Post <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">cannot</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'update'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token number\">403</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Update the post...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Si <span class=\"link\">se registra</span> una <span class=\"link\">política</span> para el modelo dado, el <code>can</code>método llamará automáticamente a la política adecuada y devolverá el resultado booleano. Si no se registra ninguna política para el modelo, el <code>can</code>método intentará llamar a la puerta basada en cierres que coincida con el nombre de acción dado.</p>\n    <p></p>\n    <h4 id=\"user-model-actions-that-dont-require-models\"><span class=\"link\">Acciones que no requieren modelos</span></h4>\n    <p>Recuerde, algunas acciones pueden corresponder a métodos de política como <code>create</code>ese que no requieren una instancia de modelo. En estas situaciones, puede pasar un nombre de clase al <code>can</code>método. El nombre de la clase se utilizará para determinar qué política utilizar al autorizar la acción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PostController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Create a post.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">store</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">cannot</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'create'</span><span class=\"token punctuation\">,</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token number\">403</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Create the post...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p></p>\n    <h3 id=\"via-controller-helpers\"><span class=\"link\">A través de controladores auxiliares</span></h3>\n    <p>Además de los métodos útiles proporcionados al <code>App\\Models\\User</code>modelo, Laravel proporciona un <code>authorize</code>método útil para cualquiera de sus controladores que amplían la <code>App\\Http\\Controllers\\Controller</code>clase base.</p>\n    <p>Al igual que el <code>can</code>método, este método acepta el nombre de la acción que desea autorizar y el modelo correspondiente. Si la acción no está autorizada, el <code>authorize</code>método generará una <code>Illuminate\\Auth\\Access\\AuthorizationException</code>excepción que el controlador de excepciones de Laravel convertirá automáticamente en una respuesta HTTP con un código de estado 403:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PostController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Update the given blog post.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\Post  $post\n     * @return \\Illuminate\\Http\\Response\n     *\n     * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> Post <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">authorize</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'update'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// The current user can update the blog post...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p></p>\n    <h4 id=\"controller-actions-that-dont-require-models\"><span class=\"link\">Acciones que no requieren modelos</span></h4>\n    <p>Como se discutió anteriormente, algunos métodos de políticas como <code>create</code>no requieren una instancia de modelo. En estas situaciones, debe pasar un nombre de clase al <code>authorize</code>método. El nombre de la clase se utilizará para determinar qué política utilizar al autorizar la acción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Create a new blog post.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return \\Illuminate\\Http\\Response\n *\n * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">authorize</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'create'</span><span class=\"token punctuation\">,</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// The current user can create blog posts...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h4 id=\"authorizing-resource-controllers\"><span class=\"link\">Autorizar controladores de recursos</span></h4>\n    <p>Si está utilizando <span class=\"link\">controladores de recursos</span> , puede hacer uso del <code>authorizeResource</code>método en el constructor de su controlador. Este método adjuntará las <code>can</code>definiciones de middleware adecuadas a los métodos del controlador de recursos.</p>\n    <p>El <code>authorizeResource</code>método acepta el nombre de la clase del modelo como primer argumento y el nombre del parámetro de ruta / solicitud que contendrá la ID del modelo como segundo argumento. Debe asegurarse de que su <span class=\"link\">controlador de recursos</span> se cree usando la <code>--model</code>bandera para que tenga las firmas de método requeridas y las sugerencias de tipo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PostController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Create the controller instance.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">authorizeResource</span><span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'post'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Los siguientes métodos de controlador se asignarán a su método de política correspondiente. Cuando las solicitudes se enrutan al método de controlador dado, el método de política correspondiente se invocará automáticamente antes de que se ejecute el método de controlador:</p>\n    <table>\n        <thead>\n        <tr>\n            <th>Método del controlador</th>\n            <th>Método de política</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td>índice</td>\n            <td>viewAny</td>\n        </tr>\n        <tr>\n            <td>show</td>\n            <td>vista</td>\n        </tr>\n        <tr>\n            <td>crear</td>\n            <td>crear</td>\n        </tr>\n        <tr>\n            <td>Tienda</td>\n            <td>crear</td>\n        </tr>\n        <tr>\n            <td>editar</td>\n            <td>actualizar</td>\n        </tr>\n        <tr>\n            <td>actualizar</td>\n            <td>actualizar</td>\n        </tr>\n        <tr>\n            <td>destruir</td>\n            <td>Eliminar</td>\n        </tr>\n        </tbody>\n    </table>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Es posible utilizar el <code>make:policy</code>comando con la <code>--model</code>opción de generar rápidamente una clase política para un modelo dado: <code>php artisan make:policy PostPolicy --model=Post</code>.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"via-middleware\"><span class=\"link\">A través de Middleware</span></h3>\n    <p>Laravel incluye un middleware que puede autorizar acciones antes de que la solicitud entrante llegue incluso a sus rutas o controladores. De forma predeterminada, al <code>Illuminate\\Auth\\Middleware\\Authorize</code>middleware se le asigna la <code>can</code>clave en su <code>App\\Http\\Kernel</code>clase. Exploremos un ejemplo del uso del <code>can</code>middleware para autorizar que un usuario pueda actualizar una publicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/post/{post}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Post <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The current user may update the post...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'can:update,post'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>En este ejemplo, pasamos <code>can</code>dos argumentos al middleware. El primero es el nombre de la acción que deseamos autorizar y el segundo es el parámetro de ruta que deseamos pasar al método de política. En este caso, dado que estamos utilizando un <span class=\"link\">enlace de modelo implícito</span> , se <code>App\\Models\\Post</code>pasará un modelo al método de política. Si el usuario no está autorizado para realizar la acción dada, el middleware devolverá una respuesta HTTP con un código de estado 403.</p>\n    <p></p>\n    <h4 id=\"middleware-actions-that-dont-require-models\"><span class=\"link\">Acciones que no requieren modelos</span></h4>\n    <p>Nuevamente, algunos métodos de política como <code>create</code>no requieren una instancia de modelo. En estas situaciones, puede pasar un nombre de clase al middleware. El nombre de la clase se utilizará para determinar qué política utilizar al autorizar la acción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/post'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The current user may create posts...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'can:create,App\\Models\\Post'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"via-blade-templates\"><span class=\"link\">A través de plantillas Blade</span></h3>\n    <p>Al escribir plantillas Blade, es posible que desee mostrar una parte de la página solo si el usuario está autorizado para realizar una acción determinada. Por ejemplo, es posible que desee mostrar un formulario de actualización para una publicación de blog solo si el usuario puede actualizar la publicación. En esta situación, puede utilizar las directivas <code>@can</code>y <code>@cannot</code>:</p>\n    <pre class=\" language-html\"><code class=\" language-html\">@can('update', $post)\n    <span class=\"token comment\">&lt;!-- The current user can update the post... --&gt;</span>\n@elsecan('create', App\\Models\\Post::class)\n    <span class=\"token comment\">&lt;!-- The current user can create new posts... --&gt;</span>\n@else\n    <span class=\"token comment\">&lt;!-- ... --&gt;</span>\n@endcan\n\n@cannot('update', $post)\n    <span class=\"token comment\">&lt;!-- The current user cannot update the post... --&gt;</span>\n@elsecannot('create', App\\Models\\Post::class)\n    <span class=\"token comment\">&lt;!-- The current user cannot create new posts... --&gt;</span>\n@endcannot</code></pre>\n    <p>Estas directivas son atajos convenientes para la redacción <code>@if</code>y las <code>@unless</code>declaraciones. Las declaraciones <code>@can</code>y <code>@cannot</code>anteriores son equivalentes a las siguientes declaraciones:</p>\n    <pre class=\" language-html\"><code class=\" language-html\">@if (Auth::user()-&gt;can('update', $post))\n    <span class=\"token comment\">&lt;!-- The current user can update the post... --&gt;</span>\n@endif\n\n@unless (Auth::user()-&gt;can('update', $post))\n    <span class=\"token comment\">&lt;!-- The current user cannot update the post... --&gt;</span>\n@endunless</code></pre>\n    <p>También puede determinar si un usuario está autorizado para realizar alguna acción de una determinada variedad de acciones. Para lograr esto, use la <code>@canany</code>directiva:</p>\n    <pre class=\" language-html\"><code class=\" language-html\">@canany(['update', 'view', 'delete'], $post)\n    <span class=\"token comment\">&lt;!-- The current user can update, view, or delete the post... --&gt;</span>\n@elsecanany(['create'], \\App\\Models\\Post::class)\n    <span class=\"token comment\">&lt;!-- The current user can create a post... --&gt;</span>\n@endcanany</code></pre>\n    <p></p>\n    <h4 id=\"blade-actions-that-dont-require-models\"><span class=\"link\">Acciones que no requieren modelos</span></h4>\n    <p>Como la mayoría de los otros métodos de autorización, puede pasar un nombre de clase a las directivas <code>@can</code>y <code>@cannot</code>si la acción no requiere una instancia de modelo:</p>\n    <pre class=\" language-html\"><code class=\" language-html\">@can('create', App\\Models\\Post::class)\n    <span class=\"token comment\">&lt;!-- The current user can create posts... --&gt;</span>\n@endcan\n\n@cannot('create', App\\Models\\Post::class)\n    <span class=\"token comment\">&lt;!-- The current user can't create posts... --&gt;</span>\n@endcannot</code></pre>\n    <p></p>\n    <h3 id=\"supplying-additional-context\"><span class=\"link\">Proporcionar contexto adicional</span></h3>\n    <p>Al autorizar acciones mediante políticas, puede pasar una matriz como segundo argumento a las diversas funciones de autorización y ayudantes. El primer elemento de la matriz se utilizará para determinar qué política se debe invocar, mientras que el resto de los elementos de la matriz se pasan como parámetros al método de política y se pueden utilizar para un contexto adicional al tomar decisiones de autorización. Por ejemplo, considere la siguiente <code>PostPolicy</code>definición de método que contiene un <code>$category</code>parámetro adicional :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Determine if the given post can be updated by the user.\n *\n * @param  \\App\\Models\\User  $user\n * @param  \\App\\Models\\Post  $post\n * @param  int  $category\n * @return bool\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> Post <span class=\"token variable\">$post</span><span class=\"token punctuation\">,</span> int <span class=\"token variable\">$category</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span> <span class=\"token operator\">===</span> <span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">user_id</span> <span class=\"token operator\">&amp;&amp;</span>\n           <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">canUpdateCategory</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$category</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Al intentar determinar si el usuario autenticado puede actualizar una publicación determinada, podemos invocar este método de política de la siguiente manera:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Update the given blog post.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @param  \\App\\Models\\Post  $post\n * @return \\Illuminate\\Http\\Response\n *\n * @throws \\Illuminate\\Auth\\Access\\AuthorizationException\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">,</span> Post <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">authorize</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'update'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token variable\">$post</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">category</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// The current user can update the blog post...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</div>"
    },
    {
      "title": "Primeros pasos",
      "subtitle": "BASE DE DATOS",
      "contenido": "<div>\n    <h1>Base de datos: Primeros pasos</h1>\n    <p></p>\n    <h2 id=\"introduction\"><span class=\"link\">Introducción</span></h2>\n    <p>Casi todas las aplicaciones web modernas interactúan con una base de datos. Laravel hace que la interacción con bases de datos sea extremadamente simple en una variedad de bases de datos compatibles utilizando SQL sin procesar, un <span class=\"link\">generador de consultas fluido</span> y el <span class=\"link\">ORM de Eloquent</span> . Actualmente, Laravel proporciona soporte de primera para cuatro bases de datos:</p>\n    <div class=\"content-list\">\n        <ul>\n            <li>MySQL 5.7+ ( <span class=\"link\">Política de versiones</span> )</li>\n            <li>PostgreSQL 9.6+ ( <span class=\"link\">Política de versiones</span> )</li>\n            <li>SQLite 3.8.8+</li>\n            <li>SQL Server 2017+ ( <span class=\"link\">política de versión</span> )</li>\n        </ul>\n    </div>\n    <p></p>\n    <h3 id=\"configuration\"><span class=\"link\">Configuración</span></h3>\n    <p>La configuración de los servicios de la base de datos de Laravel se encuentra en el <code>config/database.php</code>archivo de configuración de su aplicación . En este archivo, puede definir todas las conexiones de su base de datos, así como especificar qué conexión debe usarse de forma predeterminada. La mayoría de las opciones de configuración dentro de este archivo están controladas por los valores de las variables de entorno de su aplicación. En este archivo se proporcionan ejemplos para la mayoría de los sistemas de bases de datos compatibles con Laravel.</p>\n    <p>De forma predeterminada, la <span class=\"link\">configuración del entorno de</span> muestra de Laravel está lista para usar con <span class=\"link\">Laravel Sail</span> , que es una configuración de Docker para desarrollar aplicaciones de Laravel en su máquina local. Sin embargo, puede modificar la configuración de su base de datos según sea necesario para su base de datos local.</p>\n    <p></p>\n    <h4 id=\"sqlite-configuration\"><span class=\"link\">Configuración de SQLite</span></h4>\n    <p>Las bases de datos SQLite están contenidas en un solo archivo en su sistema de archivos. Se puede crear una nueva base de datos SQLite utilizando el <code>touch</code>comando en su terminal: <code>touch database/database.sqlite</code>. Una vez creada la base de datos, puede configurar fácilmente sus variables de entorno para que apunten a esta base de datos colocando la ruta absoluta a la base de datos en la <code>DB_DATABASE</code>variable de entorno:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB_CONNECTION</span><span class=\"token operator\">=</span>sqlite\n<span class=\"token constant\">DB_DATABASE</span><span class=\"token operator\">=</span><span class=\"token operator\">/</span>absolute<span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span>database<span class=\"token punctuation\">.</span>sqlite</code></pre>\n    <p>Para habilitar restricciones de clave externa para conexiones SQLite, debe establecer la <code>DB_FOREIGN_KEYS</code>variable de entorno en <code>true</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB_FOREIGN_KEYS</span><span class=\"token operator\">=</span><span class=\"token boolean constant\">true</span></code></pre>\n    <p></p>\n    <h4 id=\"mssql-configuration\"><span class=\"link\">Configuración de Microsoft SQL Server</span></h4>\n    <p>Para usar una base de datos de Microsoft SQL Server, debe asegurarse de tener instaladas las extensiones de PHP <code>sqlsrv</code>y <code>pdo_sqlsrv</code>las dependencias que puedan requerir, como el controlador ODBC de Microsoft SQL.</p>\n    <p></p>\n    <h4 id=\"configuration-using-urls\"><span class=\"link\">Configuración mediante URL</span></h4>\n    <p>Típicamente, las conexiones de base de datos se configuran utilizando varios valores de configuración, tales como <code>host</code>, <code>database</code>, <code>username</code>, <code>password</code>, etc. Cada uno de estos valores de configuración tiene su propia variable de entorno correspondiente. Esto significa que al configurar la información de conexión de su base de datos en un servidor de producción, debe administrar varias variables de entorno.</p>\n    <p>Algunos proveedores de bases de datos administradas, como AWS y Heroku, proporcionan una única \"URL\" de base de datos que contiene toda la información de conexión para la base de datos en una sola cadena. Una URL de base de datos de ejemplo puede tener un aspecto similar al siguiente:</p>\n    <pre class=\" language-html\"><code class=\" language-html\">mysql://root:password@127.0.0.1/forge?charset=UTF-8</code></pre>\n    <p>Estas URL suelen seguir una convención de esquema estándar:</p>\n    <pre class=\" language-html\"><code class=\" language-html\">driver://username:password@host:port/database?options</code></pre>\n    <p>Para mayor comodidad, Laravel admite estas URL como una alternativa a la configuración de su base de datos con múltiples opciones de configuración. Si la opción de configuración <code>url</code>(o <code>DATABASE_URL</code>la variable de entorno correspondiente ) está presente, se utilizará para extraer la conexión de la base de datos y la información de las credenciales.</p>\n    <p></p>\n    <h3 id=\"read-and-write-connections\"><span class=\"link\">Conexiones de lectura y escritura</span></h3>\n    <p>A veces, es posible que desee utilizar una conexión de base de datos para las sentencias SELECT y otra para las sentencias INSERT, UPDATE y DELETE. Laravel hace que esto sea muy sencillo, y siempre se utilizarán las conexiones adecuadas, ya sea que esté utilizando consultas sin formato, el generador de consultas o el ORM de Eloquent.</p>\n    <p>Para ver cómo se deben configurar las conexiones de lectura / escritura, veamos este ejemplo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token single-quoted-string string\">'mysql'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'read'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'host'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'192.168.1.1'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'196.168.1.2'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'write'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'host'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'196.168.1.3'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'sticky'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'driver'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'mysql'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'database'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'database'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'username'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'root'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'password'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'charset'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'utf8mb4'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'collation'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'utf8mb4_unicode_ci'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'prefix'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    <p>Tenga en cuenta que tres teclas se han añadido a la matriz de configuración: <code>read</code>, <code>write</code>y <code>sticky</code>. El <code>read</code>y <code>write</code>teclas tienen valores de matriz que contienen una sola tecla: <code>host</code>. El resto de las opciones de la base de datos para las conexiones <code>read</code>y <code>write</code>se fusionarán desde la <code>mysql</code>matriz de configuración principal .</p>\n    <p>Solo necesita colocar elementos en las matrices <code>read</code>y <code>write</code>si desea anular los valores de la <code>mysql</code>matriz principal . Entonces, en este caso, <code>192.168.1.1</code>se usará como host para la conexión de \"lectura\", mientras <code>192.168.1.3</code>que se usará para la conexión de \"escritura\". Las credenciales de la base de datos, el prefijo, el juego de caracteres y todas las demás opciones de la <code>mysql</code>matriz principal se compartirán en ambas conexiones. Cuando existen varios valores en la <code>host</code>matriz de configuración, se elegirá aleatoriamente un host de base de datos para cada solicitud.</p>\n    <p></p>\n    <h4 id=\"the-sticky-option\"><span class=\"link\">La <code>sticky</code>Opcion</span></h4>\n    <p>La <code>sticky</code>opción es un valor <em>opcional</em> que se puede utilizar para permitir la lectura inmediata de registros que se han escrito en la base de datos durante el ciclo de solicitud actual. Si la <code>sticky</code>opción está habilitada y se ha realizado una operación de \"escritura\" en la base de datos durante el ciclo de solicitud actual, cualquier otra operación de \"lectura\" utilizará la conexión de \"escritura\". Esto asegura que cualquier dato escrito durante el ciclo de solicitud pueda leerse inmediatamente desde la base de datos durante esa misma solicitud. Depende de usted decidir si este es el comportamiento deseado para su aplicación.</p>\n    <p></p>\n    <h2 id=\"running-queries\"><span class=\"link\">Ejecución de consultas SQL</span></h2>\n    <p>Una vez que haya configurado su conexión a la base de datos, puede ejecutar consultas usando la <code>DB</code>fachada. La <code>DB</code>fachada proporciona métodos para cada tipo de consulta: <code>select</code>, <code>update</code>, <code>insert</code>, <code>delete</code>, y <code>statement</code>.</p>\n    <p></p>\n    <h4 id=\"running-a-select-query\"><span class=\"link\">Ejecución de una consulta de selección</span></h4>\n    <p>Para ejecutar una consulta SELECT básica, puede usar el <code>select</code>método en la <code>DB</code>fachada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Show a list of all of the application's users.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'select * from users where active = ?'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user.index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'users'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$users</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>El primer argumento que se pasa al <code>select</code>método es la consulta SQL, mientras que el segundo argumento es cualquier enlace de parámetro que deba vincularse a la consulta. Normalmente, estos son los valores de las <code>where</code>restricciones de la cláusula. El enlace de parámetros proporciona protección contra la inyección de SQL.</p>\n    <p>El <code>select</code>método siempre devolverá una cantidad <code>array</code>de resultados. Cada resultado dentro de la matriz será un <code>stdClass</code>objeto PHP que representa un registro de la base de datos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'select * from users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h4 id=\"using-named-bindings\"><span class=\"link\">Usar enlaces con nombre</span></h4>\n    <p>En lugar de usar <code>?</code>para representar sus enlaces de parámetros, puede ejecutar una consulta usando enlaces con nombre:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$results</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'select * from users where id = :id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"running-an-insert-statement\"><span class=\"link\">Ejecución de una declaración de inserción</span></h4>\n    <p>Para ejecutar una <code>insert</code>declaración, puede utilizar el <code>insert</code>método en la <code>DB</code>fachada. Al igual que <code>select</code>, este método acepta la consulta SQL como su primer argumento y los enlaces como su segundo argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'insert into users (id, name) values (?, ?)'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Marc'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"running-an-update-statement\"><span class=\"link\">Ejecución de una declaración de actualización</span></h4>\n    <p>El <code>update</code>método debe usarse para actualizar los registros existentes en la base de datos. El método devuelve el número de filas afectadas por la declaración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$affected</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'update users set votes = 100 where name = ?'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Anita'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"running-a-delete-statement\"><span class=\"link\">Ejecución de una declaración de eliminación</span></h4>\n    <p>El <code>delete</code>método debe utilizarse para eliminar registros de la base de datos. Como <code>update</code>, el número de filas afectadas será devuelto por el método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$deleted</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'delete from users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"running-a-general-statement\"><span class=\"link\">Ejecución de una declaración general</span></h4>\n    <p>Algunas declaraciones de la base de datos no devuelven ningún valor. Para este tipo de operaciones, puede utilizar el <code>statement</code>método en la <code>DB</code>fachada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">statement</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'drop table users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"running-an-unprepared-statement\"><span class=\"link\">Ejecución de una declaración no preparada</span></h4>\n    <p>A veces, es posible que desee ejecutar una instrucción SQL sin vincular ningún valor. Puede usar el método de la <code>DB</code>fachada <code>unprepared</code>para lograr esto:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">unprepared</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'update users set votes = 100 where name = \"Dries\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Dado que las declaraciones no preparadas no vinculan parámetros, pueden ser vulnerables a la inyección de SQL. Nunca debe permitir valores controlados por el usuario dentro de una declaración no preparada.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"implicit-commits-in-transactions\"><span class=\"link\">Compromisos implícitos</span></h4>\n    <p>Cuando utilice los métodos de <code>DB</code>fachada <code>statement</code>y <code>unprepared</code>dentro de las transacciones, debe tener cuidado de evitar declaraciones que causen <span class=\"link\">confirmaciones implícitas</span> . Estas declaraciones harán que el motor de la base de datos comprometa indirectamente toda la transacción, dejando a Laravel inconsciente del nivel de transacción de la base de datos. Un ejemplo de tal declaración es la creación de una tabla de base de datos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">unprepared</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'create table a (col varchar(1) null)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Consulte el manual de MySQL para obtener <span class=\"link\">una lista de todas las declaraciones</span> que desencadenan confirmaciones implícitas.</p>\n    <p></p>\n    <h3 id=\"using-multiple-database-connections\"><span class=\"link\">Uso de múltiples conexiones de bases de datos</span></h3>\n    <p>Si su aplicación define múltiples conexiones en su <code>config/database.php</code>archivo de configuración, puede acceder a cada conexión a través del <code>connection</code>método proporcionado por la <code>DB</code>fachada. El nombre de la conexión pasada al <code>connection</code>método debe corresponder a una de las conexiones listadas en su <code>config/database.php</code>archivo de configuración o configuradas en tiempo de ejecución usando el <code>config</code>ayudante:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">connection</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'sqlite'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede acceder a la instancia de PDO subyacente sin procesar de una conexión utilizando el <code>getPdo</code>método en una instancia de conexión:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$pdo</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">connection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getPdo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"listening-for-query-events\"><span class=\"link\">Escuchar eventos de consulta</span></h3>\n    <p>Si desea especificar un cierre que se invoca para cada consulta SQL ejecutada por su aplicación, puede usar el método de la <code>DB</code>fachada <code>listen</code>. Este método puede ser útil para registrar consultas o depurar. Puede registrar el cierre de su escucha de consulta en el <code>boot</code>método de un <span class=\"link\">proveedor de servicios</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>ServiceProvider</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AppServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Register any application services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// $query-&gt;sql;</span>\n            <span class=\"token comment\">// $query-&gt;bindings;</span>\n            <span class=\"token comment\">// $query-&gt;time;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p></p>\n    <h2 id=\"database-transactions\"><span class=\"link\">Transacciones de base de datos</span></h2>\n    <p>Puede utilizar el <code>transaction</code>método proporcionado por la <code>DB</code>fachada para ejecutar un conjunto de operaciones dentro de una transacción de base de datos. Si se lanza una excepción dentro del cierre de la transacción, la transacción se revertirá automáticamente. Si el cierre se ejecuta con éxito, la transacción se confirmará automáticamente. No necesita preocuparse por retroceder o comprometerse manualmente mientras usa el <code>transaction</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'update users set votes = 1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'delete from posts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"handling-deadlocks\"><span class=\"link\">Manejo de interbloqueos</span></h4>\n    <p>El <code>transaction</code>método acepta un segundo argumento opcional que define el número de veces que se debe reintentar una transacción cuando se produce un punto muerto. Una vez que se hayan agotado estos intentos, se lanzará una excepción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'update users set votes = 1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'delete from posts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"manually-using-transactions\"><span class=\"link\">Uso manual de transacciones</span></h4>\n    <p>Si desea comenzar una transacción manualmente y tener un control completo sobre las reversiones y confirmaciones, puede utilizar el <code>beginTransaction</code>método proporcionado por la <code>DB</code>fachada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede revertir la transacción a través del <code>rollBack</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">rollBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Por último, puede confirmar una transacción a través del <code>commit</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Los <code>DB</code>métodos de transacción de la fachada controlan las transacciones tanto para el <span class=\"link\">generador de consultas</span> como para <span class=\"link\">Eloquent ORM</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h2 id=\"connecting-to-the-database-cli\"><span class=\"link\">Conexión a la CLI de la base de datos</span></h2>\n    <p>Si desea conectarse a la CLI de su base de datos, puede usar el <code>db</code>comando Artisan:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan db</code></pre>\n    <p>Si es necesario, puede especificar un nombre de conexión de base de datos para conectarse a una conexión de base de datos que no sea la conexión predeterminada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan db mysql</code></pre>\n</div>"
    },
    {
      "title": "Base de datos: generador de consultas",
      "subtitle": "BASE DE DATOS",
      "contenido": "<div>\n    <h1>Base de datos: generador de consultas</h1>\n    <p></p>\n    <h2 id=\"introduction\"><span class=\"link\">Introducción</span></h2>\n    <p>El generador de consultas de base de datos de Laravel proporciona una interfaz cómoda y fluida para crear y ejecutar consultas de base de datos. Se puede utilizar para realizar la mayoría de las operaciones de base de datos en su aplicación y funciona perfectamente con todos los sistemas de base de datos compatibles con Laravel.</p>\n    <p>El generador de consultas de Laravel utiliza el enlace de parámetros PDO para proteger su aplicación contra ataques de inyección SQL. No es necesario limpiar o desinfectar las cadenas pasadas al generador de consultas como enlaces de consultas.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>PDO no admite nombres de columna vinculantes. Por lo tanto, nunca debe permitir que la entrada del usuario dicte los nombres de las columnas a las que hacen referencia sus consultas, incluidas las columnas \"ordenar por\".</p></p></div>\n    </blockquote>\n    <p></p>\n    <h2 id=\"running-database-queries\"><span class=\"link\">Ejecución de consultas de base de datos</span></h2>\n    <p></p>\n    <h4 id=\"retrieving-all-rows-from-a-table\"><span class=\"link\">Recuperar todas las filas de una tabla</span></h4>\n    <p>Puede utilizar el <code>table</code>método proporcionado por la <code>DB</code>fachada para iniciar una consulta. El <code>table</code>método devuelve una instancia de generador de consultas fluida para la tabla dada, lo que le permite encadenar más restricciones en la consulta y, finalmente, recuperar los resultados de la consulta utilizando el <code>get</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Show a list of all of the application's users.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user.index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'users'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$users</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>El <code>get</code>método devuelve una <code>Illuminate\\Support\\Collection</code>instancia que contiene los resultados de la consulta donde cada resultado es una instancia del <code>stdClass</code>objeto PHP . Puede acceder al valor de cada columna accediendo a la columna como una propiedad del objeto:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Las colecciones de Laravel proporcionan una variedad de métodos extremadamente poderosos para mapear y reducir datos. Para obtener más información sobre las colecciones de Laravel, consulte la <span class=\"link\">documentación de</span> la <span class=\"link\">colección</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"retrieving-a-single-row-column-from-a-table\"><span class=\"link\">Recuperar una sola fila / columna de una tabla</span></h4>\n    <p>Si solo necesita recuperar una sola fila de una tabla de base de datos, puede usar el método de la <code>DB</code>fachada <code>first</code>. Este método devolverá un solo <code>stdClass</code>objeto:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'John'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">email</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si no necesita una fila completa, puede extraer un solo valor de un registro usando el <code>value</code>método. Este método devolverá el valor de la columna directamente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$email</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'John'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Para recuperar una sola fila por su <code>id</code>valor de columna, use el <code>find</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"retrieving-a-list-of-column-values\"><span class=\"link\">Recuperar una lista de valores de columna</span></h4>\n    <p>Si desea recuperar una <code>Illuminate\\Support\\Collection</code>instancia que contiene los valores de una sola columna, puede usar el <code>pluck</code>método. En este ejemplo, recuperaremos una colección de títulos de usuario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$titles</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pluck</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$titles</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$title</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Puede especificar la columna que la colección resultante debe usar como sus claves proporcionando un segundo argumento al <code>pluck</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$titles</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">pluck</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$titles</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$title</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h3 id=\"chunking-results\"><span class=\"link\">Resultados de fragmentación</span></h3>\n    <p>Si necesita trabajar con miles de registros de bases de datos, considere usar el <code>chunk</code>método proporcionado por la <code>DB</code>fachada. Este método recupera una pequeña parte de los resultados a la vez y alimenta cada parte en un cierre para su procesamiento. Por ejemplo, recuperemos toda la <code>users</code>tabla en fragmentos de 100 registros a la vez:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">chunk</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede evitar que se procesen más fragmentos regresando <code>false</code>del cierre:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">chunk</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Process the records...</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si actualiza los registros de la base de datos mientras fragmenta los resultados, los resultados de fragmentos podrían cambiar de formas inesperadas. Si planea actualizar los registros recuperados durante la fragmentación, siempre es mejor utilizar el <code>chunkById</code>método en su lugar. Este método paginará automáticamente los resultados según la clave principal del registro:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">chunkById</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'active'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Al actualizar o eliminar registros dentro de la devolución de llamada del fragmento, cualquier cambio en la clave principal o en las claves externas podría afectar la consulta del fragmento. Esto podría provocar que los registros no se incluyan en los resultados fragmentados.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"streaming-results-lazily\"><span class=\"link\">Transmisión de resultados con pereza</span></h3>\n    <p>El <code>lazy</code>método funciona de manera similar a <span class=\"link\">la <code>chunk</code>método</span> en el sentido de que se ejecuta la consulta en trozos. Sin embargo, en lugar de pasar cada fragmento a una devolución de llamada, el <code>lazy()</code>método devuelve un <span class=\"link\"><code>LazyCollection</code></span>, que le permite interactuar con los resultados como una única secuencia:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Una vez más, si planea actualizar los registros recuperados mientras los itera, es mejor usar el <code>lazyById</code>método en su lugar. Este método paginará automáticamente los resultados según la clave principal del registro:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">lazyById</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'active'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Al actualizar o eliminar registros mientras se itera sobre ellos, cualquier cambio en la clave principal o en las claves externas podría afectar la consulta de fragmentos. Esto podría provocar que los registros no se incluyan en los resultados.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"aggregates\"><span class=\"link\">Agregados</span></h3>\n    <p>El generador de consultas también proporciona una variedad de métodos para la recuperación de valores agregados como <code>count</code>, <code>max</code>, <code>min</code>, <code>avg</code>, y <code>sum</code>. Puede llamar a cualquiera de estos métodos después de construir su consulta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$price</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'orders'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'price'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Por supuesto, puede combinar estos métodos con otras cláusulas para ajustar cómo se calcula su valor agregado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$price</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'orders'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'finalized'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">avg</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'price'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"determining-if-records-exist\"><span class=\"link\">Determinar si existen registros</span></h4>\n    <p>En lugar de usar el <code>count</code>método para determinar si existen registros que coincidan con las restricciones de su consulta, puede usar los métodos <code>exists</code>y <code>doesntExist</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'orders'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'finalized'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'orders'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'finalized'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">doesntExist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p></p>\n    <h2 id=\"select-statements\"><span class=\"link\">Seleccionar declaraciones</span></h2>\n    <p></p>\n    <h4 id=\"specifying-a-select-clause\"><span class=\"link\">Especificar una cláusula de selección</span></h4>\n    <p>Es posible que no siempre desee seleccionar todas las columnas de una tabla de base de datos. Con el <code>select</code>método, puede especificar una cláusula de \"selección\" personalizada para la consulta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email as user_email'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>distinct</code>método le permite forzar la consulta para que devuelva resultados distintos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si ya tiene una instancia del generador de consultas y desea agregar una columna a su cláusula de selección existente, puede usar el <code>addSelect</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$query</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">addSelect</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"raw-expressions\"><span class=\"link\">Expresiones crudas</span></h2>\n    <p>A veces, es posible que deba insertar una cadena arbitraria en una consulta. Para crear una expresión de cadena sin formato, puede utilizar el <code>raw</code>método proporcionado por la <code>DB</code>fachada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n             <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">raw</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'count(*) as user_count, status'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n             <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'status'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&lt;&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n             <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'status'</span><span class=\"token punctuation\">)</span>\n             <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p> Las declaraciones sin procesar se inyectarán en la consulta como cadenas, por lo que debe tener mucho cuidado para evitar crear vulnerabilidades de inyección de SQL.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"raw-methods\"><span class=\"link\">Métodos crudos</span></h3>\n    <p>En lugar de utilizar el <code>DB::raw</code>método, también puede utilizar los siguientes métodos para insertar una expresión sin formato en varias partes de su consulta. <strong>Recuerde, Laravel no puede garantizar que cualquier consulta que utilice expresiones sin formato esté protegida contra vulnerabilidades de inyección de SQL.</strong></p>\n    <p></p>\n    <h4 id=\"selectraw\"><span class=\"link\"><code>selectRaw</code></span></h4>\n    <p>El <code>selectRaw</code>método se puede utilizar en lugar de <code>addSelect(DB::raw(...))</code>. Este método acepta una matriz opcional de enlaces como segundo argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$orders</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'orders'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">selectRaw</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'price * ? as price_with_tax'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1.0825</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"whereraw-orwhereraw\"><span class=\"link\"><code>whereRaw / orWhereRaw</code></span></h4>\n    <p>Los métodos <code>whereRaw</code>y <code>orWhereRaw</code>se pueden utilizar para inyectar una cláusula \"where\" sin formato en su consulta. Estos métodos aceptan una matriz opcional de enlaces como segundo argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$orders</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'orders'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereRaw</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'price &gt; IF(state = \"TX\", ?, 100)'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">200</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"havingraw-orhavingraw\"><span class=\"link\"><code>havingRaw / orHavingRaw</code></span></h4>\n    <p>Los métodos <code>havingRaw</code>y <code>orHavingRaw</code>se pueden utilizar para proporcionar una cadena sin formato como el valor de la cláusula \"teniendo\". Estos métodos aceptan una matriz opcional de enlaces como segundo argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$orders</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'orders'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'department'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">raw</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'SUM(price) as total_sales'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'department'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">havingRaw</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'SUM(price) &gt; ?'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2500</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"orderbyraw\"><span class=\"link\"><code>orderByRaw</code></span></h4>\n    <p>El <code>orderByRaw</code>método se puede utilizar para proporcionar una cadena sin formato como valor de la cláusula \"order by\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$orders</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'orders'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderByRaw</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'updated_at - created_at DESC'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"groupbyraw\"><span class=\"link\"><code>groupByRaw</code></span></h3>\n    <p>El <code>groupByRaw</code>método se puede utilizar para proporcionar una cadena sin formato como valor de la <code>group by</code>cláusula:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$orders</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'orders'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'city'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'state'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">groupByRaw</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'city, state'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"joins\"><span class=\"link\">Uniones</span></h2>\n    <p></p>\n    <h4 id=\"inner-join-clause\"><span class=\"link\">Cláusula de unión interna</span></h4>\n    <p>El generador de consultas también se puede utilizar para agregar cláusulas de combinación a sus consultas. Para realizar una \"unión interna\" básica, puede utilizar el <code>join</code>método en una instancia del generador de consultas. El primer argumento que se pasa al <code>join</code>método es el nombre de la tabla a la que necesita unirse, mientras que los argumentos restantes especifican las restricciones de columna para la combinación. Incluso puede unir varias tablas en una sola consulta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'contacts'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'users.id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'='</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'contacts.user_id'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'orders'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'users.id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'='</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'orders.user_id'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users.*'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'contacts.phone'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'orders.price'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"left-join-right-join-clause\"><span class=\"link\">Cláusula de unión a la izquierda / unión a la derecha</span></h4>\n    <p>Si desea realizar una \"combinación izquierda\" o \"combinación derecha\" en lugar de una \"combinación interna\", utilice los métodos <code>leftJoin</code>o <code>rightJoin</code>. Estos métodos tienen la misma firma que el <code>join</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">leftJoin</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'posts'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'users.id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'='</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'posts.user_id'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">rightJoin</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'posts'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'users.id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'='</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'posts.user_id'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"cross-join-clause\"><span class=\"link\">Cláusula de unión cruzada</span></h4>\n    <p>Puede utilizar el <code>crossJoin</code>método para realizar una \"combinación cruzada\". Las uniones cruzadas generan un producto cartesiano entre la primera tabla y la tabla unida:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$sizes</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'sizes'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">crossJoin</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'colors'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"advanced-join-clauses\"><span class=\"link\">Cláusulas de unión avanzadas</span></h4>\n    <p>También puede especificar cláusulas de unión más avanzadas. Para comenzar, pase un cierre como segundo argumento del <code>join</code>método. El cierre recibirá una <code>Illuminate\\Database\\Query\\JoinClause</code>instancia que le permite especificar restricciones en la cláusula \"unirse\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'contacts'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$join</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$join</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users.id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'='</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'contacts.user_id'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orOn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea utilizar una cláusula \"where\" en sus combinaciones, puede utilizar los métodos <code>where</code>y <code>orWhere</code>proporcionados por la <code>JoinClause</code>instancia. En lugar de comparar dos columnas, estos métodos compararán la columna con un valor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'contacts'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$join</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$join</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users.id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'='</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'contacts.user_id'</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'contacts.user_id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"subquery-joins\"><span class=\"link\">Uniones de subconsultas</span></h4>\n    <p>Es posible utilizar los <code>joinSub</code>, <code>leftJoinSub</code>y <code>rightJoinSub</code>métodos para unirse a una consulta para una subconsulta. Cada uno de estos métodos recibe tres argumentos: la subconsulta, su alias de tabla y un cierre que define las columnas relacionadas. En este ejemplo, recuperaremos una colección de usuarios donde cada registro de usuario también contiene la <code>created_at</code>marca de tiempo de la publicación de blog publicada más recientemente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$latestPosts</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'posts'</span><span class=\"token punctuation\">)</span>\n                   <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user_id'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">raw</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'MAX(created_at) as last_post_created_at'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                   <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'is_published'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span>\n                   <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user_id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">joinSub</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$latestPosts</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'latest_posts'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$join</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$join</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users.id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'='</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'latest_posts.user_id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"unions\"><span class=\"link\">Sindicatos</span></h2>\n    <p>El generador de consultas también proporciona un método conveniente para \"unir\" dos o más consultas. Por ejemplo, puede crear una consulta inicial y usar el <code>union</code>método para unirla con más consultas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$first</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereNull</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'first_name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereNull</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'last_name'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$first</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Además del <code>union</code>método, el generador de consultas proporciona un <code>unionAll</code>método. <code>unionAll</code>No se eliminarán los resultados duplicados de las consultas que se combinan mediante el método. El <code>unionAll</code>método tiene la misma firma de método que el <code>union</code>método.</p>\n    <p></p>\n    <h2 id=\"basic-where-clauses\"><span class=\"link\">Cláusulas Where básicas</span></h2>\n    <p></p>\n    <h3 id=\"where-clauses\"><span class=\"link\">Donde las cláusulas</span></h3>\n    <p>Puede utilizar el <code>where</code>método del generador de consultas para agregar cláusulas \"donde\" a la consulta. La llamada más básica al <code>where</code>método requiere tres argumentos. El primer argumento es el nombre de la columna. El segundo argumento es un operador, que puede ser cualquiera de los operadores admitidos por la base de datos. El tercer argumento es el valor para comparar con el valor de la columna.</p>\n    <p>Por ejemplo, la siguiente consulta recupera usuarios donde el valor de la <code>votes</code>columna es igual a <code>100</code>y el valor de la <code>age</code>columna es mayor que <code>35</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'='</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Por conveniencia, si desea verificar que una columna tenga <code>=</code>un valor dado, puede pasar el valor como segundo argumento del <code>where</code>método. Laravel asumirá que le gustaría usar el <code>=</code>operador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Como se mencionó anteriormente, puede utilizar cualquier operador que sea compatible con su sistema de base de datos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;='</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&lt;&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'like'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'T%'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede pasar una serie de condiciones a la <code>where</code>función. Cada elemento de la matriz debe ser una matriz que contenga los tres argumentos que normalmente se pasan al <code>where</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'status'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'='</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'subscribed'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&lt;&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>PDO no admite nombres de columna vinculantes. Por lo tanto, nunca debe permitir que la entrada del usuario dicte los nombres de las columnas a las que hacen referencia sus consultas, incluidas las columnas \"ordenar por\".</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"or-where-clauses\"><span class=\"link\">O cláusulas Where</span></h3>\n    <p>Al encadenar llamadas al <code>where</code>método del generador de consultas , las cláusulas \"where\" se unirán mediante el <code>and</code>operador. Sin embargo, puede usar el <code>orWhere</code>método para unir una cláusula a la consulta usando el <code>or</code>operador. El <code>orWhere</code>método acepta los mismos argumentos que el <code>where</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orWhere</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'John'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si necesita agrupar una condición \"o\" entre paréntesis, puede pasar un cierre como primer argumento del <code>orWhere</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orWhere</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Abigail'</span><span class=\"token punctuation\">)</span>\n                      <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El ejemplo anterior producirá el siguiente SQL:</p>\n    <pre class=\" language-sql\"><code class=\" language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users <span class=\"token keyword\">where</span> votes <span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">or</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Abigail'</span> <span class=\"token operator\">and</span> votes <span class=\"token operator\">&gt;</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Siempre debe agrupar las <code>orWhere</code>llamadas para evitar comportamientos inesperados cuando se aplican ámbitos globales.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"json-where-clauses\"><span class=\"link\">JSON Where Cláusulas</span></h3>\n    <p>Laravel también admite la consulta de tipos de columnas JSON en bases de datos que brindan soporte para tipos de columnas JSON. Actualmente, esto incluye MySQL 5.7+, PostgreSQL, SQL Server 2016 y SQLite 3.9.0 (con la <span class=\"link\">extensión JSON1</span> ). Para consultar una columna JSON, use el <code>-&gt;</code>operador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'preferences-&gt;dining-&gt;meal'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'salad'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede utilizar <code>whereJsonContains</code>para consultar matrices JSON. Esta función no es compatible con la base de datos SQLite:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereJsonContains</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'options-&gt;languages'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'en'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si su aplicación usa las bases de datos MySQL o PostgreSQL, puede pasar una matriz de valores al <code>whereJsonContains</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereJsonContains</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'options-&gt;languages'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'en'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'de'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede usar el <code>whereJsonLength</code>método para consultar matrices JSON por su longitud:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereJsonLength</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'options-&gt;languages'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereJsonLength</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'options-&gt;languages'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"additional-where-clauses\"><span class=\"link\">Cláusulas adicionales Where</span></h3>\n    <p><strong>whereBetween / orWhereBetween</strong></p>\n    <p>El <code>whereBetween</code>método verifica que el valor de una columna esté entre dos valores:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n           <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereBetween</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n           <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p><strong>whereNotBetween / orWhereNotBetween</strong></p>\n    <p>El <code>whereNotBetween</code>método verifica que el valor de una columna se encuentre fuera de dos valores:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereNotBetween</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p><strong>whereIn / whereNotIn / orWhereIn / orWhereNotIn</strong></p>\n    <p>El <code>whereIn</code>método verifica que el valor de una columna dada esté contenido dentro de la matriz dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereIn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>whereNotIn</code>método verifica que el valor de la columna dada no esté contenido en la matriz dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereNotIn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si está agregando una gran variedad de enlaces de enteros a su consulta, los métodos <code>whereIntegerInRaw</code>o <code>whereIntegerNotInRaw</code>pueden usarse para reducir en gran medida el uso de memoria.</p></p></div>\n    </blockquote>\n    <p><strong>whereNull / whereNotNull / oWhereNull / oWhereNotNull</strong></p>\n    <p>El <code>whereNull</code>método verifica que el valor de la columna dada es <code>NULL</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereNull</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'updated_at'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>whereNotNull</code>método verifica que el valor de la columna no sea <code>NULL</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereNotNull</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'updated_at'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p><strong>whereDate / whereMonth / whereDay / whereYear / whereTime</strong></p>\n    <p>El <code>whereDate</code>método puede usarse para comparar el valor de una columna con una fecha:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereDate</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'2016-12-31'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>whereMonth</code>método se puede utilizar para comparar el valor de una columna con un mes específico:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereMonth</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'12'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>whereDay</code>método se puede utilizar para comparar el valor de una columna con un día específico del mes:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereDay</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'31'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>whereYear</code>método se puede utilizar para comparar el valor de una columna con un año específico:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereYear</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'2016'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>whereTime</code>método se puede utilizar para comparar el valor de una columna con un tiempo específico:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereTime</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'='</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'11:20:45'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p><strong>whereColumn / orWhereColumn</strong></p>\n    <p>El <code>whereColumn</code>método puede usarse para verificar que dos columnas sean iguales:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereColumn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'first_name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'last_name'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede pasar un operador de comparación al <code>whereColumn</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereColumn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'updated_at'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede pasar una matriz de comparaciones de columnas al <code>whereColumn</code>método. Estas condiciones se unirán utilizando el <code>and</code>operador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereColumn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n                    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'first_name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'='</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'last_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'updated_at'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"logical-grouping\"><span class=\"link\">Agrupación lógica</span></h3>\n    <p>A veces, es posible que deba agrupar varias cláusulas \"dónde\" entre paréntesis para lograr la agrupación lógica deseada de su consulta. De hecho, generalmente siempre debe agrupar las llamadas al <code>orWhere</code>método entre paréntesis para evitar un comportamiento de consulta inesperado. Para lograr esto, puede pasar un cierre al <code>where</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n           <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'='</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'John'</span><span class=\"token punctuation\">)</span>\n           <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n                     <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orWhere</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'='</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Admin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n           <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Como puede ver, pasar un cierre al <code>where</code>método indica al generador de consultas que comience un grupo de restricciones. El cierre recibirá una instancia del generador de consultas que puede usar para establecer las restricciones que deben estar contenidas dentro del grupo de paréntesis. El ejemplo anterior producirá el siguiente SQL:</p>\n    <pre class=\" language-sql\"><code class=\" language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'John'</span> <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span>votes <span class=\"token operator\">&gt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">or</span> title <span class=\"token operator\">=</span> <span class=\"token string\">'Admin'</span><span class=\"token punctuation\">)</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Siempre debe agrupar las <code>orWhere</code>llamadas para evitar comportamientos inesperados cuando se aplican ámbitos globales.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"advanced-where-clauses\"><span class=\"link\">Cláusulas Where avanzadas</span></h3>\n    <p></p>\n    <h3 id=\"where-exists-clauses\"><span class=\"link\">Dónde existen cláusulas</span></h3>\n    <p>El <code>whereExists</code>método le permite escribir cláusulas SQL \"donde exista\". El <code>whereExists</code>método acepta un cierre que recibirá una instancia del generador de consultas, lo que le permite definir la consulta que debe colocarse dentro de la cláusula \"existe\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n           <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereExists</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n               <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">raw</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                     <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'orders'</span><span class=\"token punctuation\">)</span>\n                     <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereColumn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'orders.user_id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'users.id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n           <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>La consulta anterior producirá el siguiente SQL:</p>\n    <pre class=\" language-sql\"><code class=\" language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users\n<span class=\"token keyword\">where</span> <span class=\"token keyword\">exists</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">select</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">from</span> orders\n    <span class=\"token keyword\">where</span> orders<span class=\"token punctuation\">.</span>user_id <span class=\"token operator\">=</span> users<span class=\"token punctuation\">.</span>id\n<span class=\"token punctuation\">)</span></code></pre>\n    <p></p>\n    <h3 id=\"subquery-where-clauses\"><span class=\"link\">Subconsultas Where Cláusulas</span></h3>\n    <p>A veces, puede que necesite construir una cláusula \"where\" que compare los resultados de una subconsulta con un valor dado. Puede lograr esto pasando un cierre y un valor al <code>where</code>método. Por ejemplo, la siguiente consulta recuperará todos los usuarios que tengan una \"membresía\" reciente de un tipo determinado;</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'type'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'membership'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereColumn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'membership.user_id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'users.id'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderByDesc</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'membership.start_date'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Pro'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>O puede que necesite construir una cláusula \"where\" que compare una columna con los resultados de una subconsulta. Puede lograr esto pasando una columna, un operador y un cierre al <code>where</code>método. Por ejemplo, la siguiente consulta recuperará todos los registros de ingresos donde la cantidad es menor que el promedio;</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Income</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$incomes</span> <span class=\"token operator\">=</span> Income<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'amount'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&lt;'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">selectRaw</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'avg(i.amount)'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'incomes as i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"ordering-grouping-limit-and-offset\"><span class=\"link\">Ordenar, agrupar, limitar y compensar</span></h2>\n    <p></p>\n    <h3 id=\"ordering\"><span class=\"link\">Ordenando</span></h3>\n    <p></p>\n    <h4 id=\"orderby\"><span class=\"link\">El <code>orderBy</code>método</span></h4>\n    <p>El <code>orderBy</code>método le permite ordenar los resultados de la consulta por una columna determinada. El primer argumento aceptado por el <code>orderBy</code>método debe ser la columna por la que desea ordenar, mientras que el segundo argumento determina la dirección de la ordenación y puede ser <code>asc</code>o <code>desc</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'desc'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Para ordenar por varias columnas, simplemente puede invocar <code>orderBy</code>tantas veces como sea necesario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'desc'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'asc'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"latest-oldest\"><span class=\"link\">Los <code>latest</code>&amp; <code>oldest</code>métodos</span></h4>\n    <p>Los métodos <code>latest</code>y le <code>oldest</code>permiten ordenar fácilmente los resultados por fecha. De forma predeterminada, el resultado se ordenará por la <code>created_at</code>columna de la tabla . O puede pasar el nombre de la columna por la que desea ordenar:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">latest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"random-ordering\"><span class=\"link\">Orden aleatorio</span></h4>\n    <p>El <code>inRandomOrder</code>método se puede utilizar para ordenar los resultados de la consulta de forma aleatoria. Por ejemplo, puede utilizar este método para buscar un usuario aleatorio:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$randomUser</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">inRandomOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"removing-existing-orderings\"><span class=\"link\">Eliminación de pedidos existentes</span></h4>\n    <p>El <code>reorder</code>método elimina todas las cláusulas \"order by\" que se han aplicado previamente a la consulta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$query</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$unorderedUsers</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">reorder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede pasar una columna y una dirección al llamar al <code>reorder</code>método para eliminar todas las cláusulas \"order by\" existentes y aplicar un orden completamente nuevo a la consulta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$query</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$usersOrderedByEmail</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">reorder</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'desc'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"grouping\"><span class=\"link\">Agrupamiento</span></h3>\n    <p></p>\n    <h4 id=\"groupby-having\"><span class=\"link\">Los <code>groupBy</code>&amp; <code>having</code>métodos</span></h4>\n    <p>Como era de esperar, los métodos <code>groupBy</code>y <code>having</code>se pueden utilizar para agrupar los resultados de la consulta. La <code>having</code>firma del método es similar a la del <code>where</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'account_id'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">having</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'account_id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede utilizar el <code>havingBetween</code>método para filtrar los resultados dentro de un rango determinado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$report</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'orders'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">selectRaw</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'count(id) as number_of_orders, customer_id'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'customer_id'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">havingBetween</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'number_of_orders'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede pasar varios argumentos al <code>groupBy</code>método para agrupar por varias columnas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'first_name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'status'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">having</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'account_id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Para crear <code>having</code>declaraciones más avanzadas , consulte el <span class=\"link\"><code>havingRaw</code></span>método.</p>\n    <p></p>\n    <h3 id=\"limit-and-offset\"><span class=\"link\">Límite y compensación</span></h3>\n    <p></p>\n    <h4 id=\"skip-take\"><span class=\"link\">Los <code>skip</code>&amp; <code>take</code>métodos</span></h4>\n    <p>Puede utilizar los métodos <code>skip</code>y <code>take</code>para limitar el número de resultados devueltos por la consulta o para omitir un número determinado de resultados en la consulta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Alternativamente, puede utilizar los métodos <code>limit</code>y <code>offset</code>. Estos métodos son funcionalmente equivalentes a los métodos <code>take</code>y <code>skip</code>, respectivamente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"conditional-clauses\"><span class=\"link\">Clausulas condicionales</span></h2>\n    <p>A veces, es posible que desee que determinadas cláusulas de consulta se apliquen a una consulta en función de otra condición. Por ejemplo, es posible que solo desee aplicar una <code>where</code>declaración si un valor de entrada determinado está presente en la solicitud HTTP entrante. Puede lograr esto usando el <code>when</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$role</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'role'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$role</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$role</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'role_id'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$role</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>when</code>método solo ejecuta el cierre dado cuando el primer argumento es <code>true</code>. Si el primer argumento es <code>false</code>, no se ejecutará el cierre. Entonces, en el ejemplo anterior, el cierre dado al <code>when</code>método solo se invocará si el <code>role</code>campo está presente en la solicitud entrante y se evalúa como <code>true</code>.</p>\n    <p>Puede pasar otro cierre como tercer argumento del <code>when</code>método. Este cierre solo se ejecutará si el primer argumento se evalúa como <code>false</code>. Para ilustrar cómo se puede usar esta función, la usaremos para configurar el orden predeterminado de una consulta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$sortByVotes</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'sort_by_votes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sortByVotes</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$sortByVotes</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"insert-statements\"><span class=\"link\">Insertar declaraciones</span></h2>\n    <p>El generador de consultas también proporciona un <code>insert</code>método que se puede utilizar para insertar registros en la tabla de la base de datos. El <code>insert</code>método acepta una matriz de nombres y valores de columna:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'kayla@example.com'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'votes'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede insertar varios registros a la vez pasando una matriz de matrices. Cada matriz representa un registro que debe insertarse en la tabla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'picard@example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'votes'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'janeway@example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'votes'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>insertOrIgnore</code>método ignorará los errores al insertar registros en la base de datos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">insertOrIgnore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'sisko@example.com'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'archer@example.com'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p> <code>insertOrIgnore</code>ignorará los registros duplicados y también puede ignorar otros tipos de errores dependiendo del motor de la base de datos. Por ejemplo, <code>insertOrIgnore</code>la voluntad <span class=\"link\">de derivación modo estricto de MySQL</span> .</p></p></div>\n    </blockquote>\n    <p></p>\n    <h4 id=\"auto-incrementing-ids\"><span class=\"link\">ID de incremento automático</span></h4>\n    <p>Si la tabla tiene un ID de incremento automático, use el <code>insertGetId</code>método para insertar un registro y luego recupere el ID:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$id</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">insertGetId</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'john@example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'votes'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Cuando se usa PostgreSQL, el <code>insertGetId</code>método espera que se nombre la columna de incremento automático <code>id</code>. Si desea recuperar el ID de una \"secuencia\" diferente, puede pasar el nombre de la columna como segundo parámetro del <code>insertGetId</code>método.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h3 id=\"upserts\"><span class=\"link\">Upserts</span></h3>\n    <p>El <code>upsert</code>método insertará registros que no existen y actualizará los registros que ya existen con nuevos valores que usted puede especificar. El primer argumento del método consiste en los valores para insertar o actualizar, mientras que el segundo argumento enumera las columnas que identifican de manera única los registros dentro de la tabla asociada. El tercer y último argumento del método es una matriz de columnas que debe actualizarse si ya existe un registro coincidente en la base de datos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'flights'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">upsert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'departure'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Oakland'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'destination'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'San Diego'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">99</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'departure'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Chicago'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'destination'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">150</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'departure'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'destination'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'price'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>En el ejemplo anterior, Laravel intentará insertar dos registros. Si ya existe un registro con los mismos <code>departure</code>y <code>destination</code>las columnas los valores, laravel actualizará de ese registro <code>price</code>columna.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Todas las bases de datos, excepto SQL Server, requieren que las columnas del segundo argumento del <code>upsert</code>método tengan un índice \"principal\" o \"único\". Además, el controlador de la base de datos MySQL ignora el segundo argumento del <code>upsert</code>método y siempre usa los índices \"primario\" y \"único\" de la tabla para detectar registros existentes.</p></p></div>\n    </blockquote>\n    <p></p>\n    <h2 id=\"update-statements\"><span class=\"link\">Actualizar declaraciones</span></h2>\n    <p>Además de insertar registros en la base de datos, el generador de consultas también puede actualizar los registros existentes mediante el <code>update</code>método. El <code>update</code>método, al igual que el <code>insert</code>método, acepta una matriz de pares de columnas y valores que indican las columnas que se actualizarán. Puede restringir la <code>update</code>consulta mediante <code>where</code>cláusulas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$affected</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n              <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n              <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'votes'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"update-or-insert\"><span class=\"link\">Actualizar o insertar</span></h4>\n    <p>A veces, es posible que desee actualizar un registro existente en la base de datos o crearlo si no existe ningún registro coincidente. En este escenario, <code>updateOrInsert</code>se puede utilizar el método. El <code>updateOrInsert</code>método acepta dos argumentos: una matriz de condiciones para encontrar el registro y una matriz de pares de columnas y valores que indican las columnas que se actualizarán.</p>\n    <p>El <code>updateOrInsert</code>método intentará localizar un registro de base de datos coincidente utilizando la columna del primer argumento y los pares de valores. Si el registro existe, se actualizará con los valores del segundo argumento. Si no se puede encontrar el registro, se insertará un nuevo registro con los atributos combinados de ambos argumentos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">updateOrInsert</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'john@example.com'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'John'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'votes'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'2'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"updating-json-columns\"><span class=\"link\">Actualización de columnas JSON</span></h3>\n    <p>Al actualizar una columna JSON, debe usar la <code>-&gt;</code>sintaxis para actualizar la clave adecuada en el objeto JSON. Esta operación es compatible con MySQL 5.7+ y PostgreSQL 9.5+:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$affected</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n              <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n              <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'options-&gt;enabled'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h3 id=\"increment-and-decrement\"><span class=\"link\">Incremento y decremento</span></h3>\n    <p>El generador de consultas también proporciona métodos convenientes para aumentar o disminuir el valor de una columna determinada. Ambos métodos aceptan al menos un argumento: la columna a modificar. Se puede proporcionar un segundo argumento para especificar la cantidad en la que la columna debe incrementarse o disminuirse:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede especificar columnas adicionales para actualizar durante la operación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'John'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"delete-statements\"><span class=\"link\">Eliminar declaraciones</span></h2>\n    <p>El <code>delete</code>método del generador de consultas se puede utilizar para eliminar registros de la tabla. Puede restringir las <code>delete</code>declaraciones agregando cláusulas \"where\" antes de llamar al <code>delete</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea truncar una tabla completa, que eliminará todos los registros de la tabla y restablecerá el ID de incremento automático a cero, puede usar el <code>truncate</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">truncate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h4 id=\"table-truncation-and-postgresql\"><span class=\"link\">Truncamiento de tablas y PostgreSQL</span></h4>\n    <p>Al truncar una base de datos PostgreSQL, <code>CASCADE</code>se aplicará el comportamiento. Esto significa que también se eliminarán todos los registros relacionados con la clave externa en otras tablas.</p>\n    <p></p>\n    <h2 id=\"pessimistic-locking\"><span class=\"link\">Bloqueo pesimista</span></h2>\n    <p>El generador de consultas también incluye algunas funciones para ayudarlo a lograr un \"bloqueo pesimista\" al ejecutar sus <code>select</code>declaraciones. Para ejecutar una declaración con un \"bloqueo compartido\", puede llamar al <code>sharedLock</code>método. Un bloqueo compartido evita que las filas seleccionadas se modifiquen hasta que se confirme su transacción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sharedLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Alternativamente, puede utilizar el <code>lockForUpdate</code>método. Un bloqueo \"para actualización\" evita que los registros seleccionados se modifiquen o se seleccionen con otro bloqueo compartido:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">lockForUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p></p>\n    <h2 id=\"debugging\"><span class=\"link\">Depuración</span></h2>\n    <p>Puede utilizar los métodos <code>dd</code>y <code>dump</code>al crear una consulta para volcar los enlaces de consulta actuales y SQL. El <code>dd</code>método mostrará la información de depuración y luego dejará de ejecutar la solicitud. El <code>dump</code>método mostrará la información de depuración pero permitirá que la solicitud continúe ejecutándose:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div>"
    },
    {
      "title": "Base de datos: paginación",
      "subtitle": "BASE DE DATOS",
      "contenido": "<div>\n    <h1>Base de datos: paginación</h1>\n    \n    <h2 id=\"introduction\"><span class=\"link\">Introducción</span></h2>\n    <p>En otros marcos, la paginación puede ser muy dolorosa. Esperamos que el enfoque de Laravel a la paginación sea un soplo de aire fresco. El paginador de Laravel está integrado con el <span class=\"link\">generador de consultas</span> y <span class=\"link\">Eloquent ORM</span> y proporciona una paginación conveniente y fácil de usar de los registros de la base de datos sin configuración.</p>\n    <p>Por defecto, el HTML generado por el paginador es compatible con el <span class=\"link\">framework Tailwind CSS</span> ; sin embargo, el soporte de paginación Bootstrap también está disponible.</p>\n    \n    <h2 id=\"basic-usage\"><span class=\"link\">Uso básico</span></h2>\n    \n    <h3 id=\"paginating-query-builder-results\"><span class=\"link\">Paginación de resultados del generador de consultas</span></h3>\n    <p>Hay varias formas de paginar elementos. La más simple es usar el <code>paginate</code>método en el <span class=\"link\">generador de consultas</span> o una <span class=\"link\">consulta Eloquent</span> . El <code>paginate</code>método se encarga automáticamente de establecer el \"límite\" y el \"desplazamiento\" de la consulta en función de la página actual que está viendo el usuario. De forma predeterminada, la página actual es detectada por el valor del <code>page</code>argumento de la cadena de consulta en la solicitud HTTP. Laravel detecta automáticamente este valor y también se inserta automáticamente en los enlaces generados por el paginador.</p>\n    <p>En este ejemplo, el único argumento que se pasa al <code>paginate</code>método es el número de elementos que le gustaría que se mostraran \"por página\". En este caso, especifiquemos que nos gustaría mostrar <code>15</code>elementos por página:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>DB</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Show all of the users for the application.\n     *\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user.index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'users'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">paginate</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h4 id=\"simple-pagination\"><span class=\"link\">Paginación simple</span></h4>\n    <p>El <code>paginate</code>método cuenta el número total de registros que coincide con la consulta antes de recuperar los registros de la base de datos. Esto se hace para que el paginador sepa cuántas páginas de registros hay en total. Sin embargo, si no planea mostrar el número total de páginas en la interfaz de usuario de su aplicación, la consulta del recuento de registros no es necesaria.</p>\n    <p>Por lo tanto, si solo necesita mostrar vínculos simples \"Siguiente\" y \"Anterior\" en la interfaz de usuario de su aplicación, puede usar el <code>simplePaginate</code>método para realizar una consulta única y eficiente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">simplePaginate</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"paginating-eloquent-results\"><span class=\"link\">Paginación de resultados elocuentes</span></h3>\n    <p>También puede paginar consultas de <span class=\"link\">Eloquent</span> . En este ejemplo, paginaremos el <code>App\\Models\\User</code>modelo e indicaremos que planeamos mostrar 15 registros por página. Como puede ver, la sintaxis es casi idéntica a la paginación de los resultados del generador de consultas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">paginate</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Por supuesto, puede llamar al <code>paginate</code>método después de establecer otras restricciones en la consulta, como <code>where</code>cláusulas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">paginate</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede utilizar el <code>simplePaginate</code>método al paginar modelos de Eloquent:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">simplePaginate</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>De manera similar, puede usar el <code>cursorPaginate</code>método para paginar con el cursor modelos Eloquent:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">cursorPaginate</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"cursor-pagination\"><span class=\"link\">Paginación del cursor</span></h3>\n    <p>Mientras <code>paginate</code>y <code>simplePaginate</code>crea consultas usando la cláusula SQL \"offset\", la paginación del cursor funciona construyendo cláusulas \"where\" que comparan los valores de las columnas ordenadas contenidas en la consulta, proporcionando el rendimiento de base de datos más eficiente disponible entre todos los métodos de paginación de Laravel. Este método de paginación es particularmente adecuado para grandes conjuntos de datos e interfaces de usuario de desplazamiento \"infinito\".</p>\n    <p>A diferencia de la paginación basada en desplazamiento, que incluye un número de página en la cadena de consulta de las URL generadas por el paginador, la paginación basada en cursor coloca una cadena de \"cursor\" en la cadena de consulta. El cursor es una cadena codificada que contiene la ubicación en la que la siguiente consulta paginada debe comenzar a paginar y la dirección en la que debe paginarse:</p>\n    <pre class=\" language-nothing\"><code class=\" language-nothing\">http://localhost/users?cursor=eyJpZCI6MTUsIl9wb2ludHNUb05leHRJdGVtcyI6dHJ1ZX0</code></pre>\n    <p>Puede crear una instancia de paginador basada en cursor a través del <code>cursorPaginate</code>método ofrecido por el generador de consultas. Este método devuelve una instancia de <code>Illuminate\\Pagination\\CursorPaginator</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">cursorPaginate</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Una vez que haya recuperado una instancia del paginador de cursor, puede <span class=\"link\">mostrar los resultados de la paginación</span> como lo haría normalmente al usar los métodos <code>paginate</code>y <code>simplePaginate</code>. Para obtener más información sobre los métodos de instancia que ofrece el paginador de cursor, consulte la <span class=\"link\">documentación del método de instancia del paginador de cursor</span> .</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p> Su consulta debe contener una cláusula \"ordenar por\" para poder aprovechar la paginación del cursor.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"cursor-vs-offset-pagination\"><span class=\"link\">Cursor frente a paginación compensada</span></h4>\n    <p>Para ilustrar las diferencias entre la paginación de desplazamiento y la paginación del cursor, examinemos algunos ejemplos de consultas SQL. Las dos consultas siguientes mostrarán la \"segunda página\" de resultados para una <code>users</code>tabla ordenada por <code>id</code>:</p>\n    <pre class=\" language-sql\"><code class=\" language-sql\"><span class=\"token comment\"># Offset Pagination...</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> id <span class=\"token keyword\">asc</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">15</span> <span class=\"token keyword\">offset</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># Cursor Pagination...</span>\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users <span class=\"token keyword\">where</span> id <span class=\"token operator\">&gt;</span> <span class=\"token number\">15</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> id <span class=\"token keyword\">asc</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>La consulta de paginación del cursor ofrece las siguientes ventajas sobre la paginación de desplazamiento:</p>\n    <ul>\n        <li>Para conjuntos de datos grandes, la paginación del cursor ofrecerá un mejor rendimiento si las columnas \"ordenar por\" están indexadas. Esto se debe a que la cláusula de \"compensación\" explora todos los datos previamente emparejados.</li>\n        <li>Para conjuntos de datos con escrituras frecuentes, la paginación de desplazamiento puede omitir registros o mostrar duplicados si los resultados se agregaron o eliminaron recientemente de la página que el usuario está viendo actualmente.</li>\n    </ul>\n    <p>Sin embargo, la paginación del cursor tiene las siguientes limitaciones:</p>\n    <ul>\n        <li>Al igual que <code>simplePaginate</code>, la paginación del cursor solo se puede usar para mostrar enlaces \"Siguiente\" y \"Anterior\" y no admite la generación de enlaces con números de página.</li>\n        <li>Requiere que el orden se base en al menos una columna única o una combinación de columnas que son únicas. <code>null</code>No se admiten columnas con valores.</li>\n        <li>Las expresiones de consulta en cláusulas \"order by\" solo se admiten si tienen un alias y también se agregan a la cláusula \"select\".</li>\n    </ul>\n    \n    <h3 id=\"manually-creating-a-paginator\"><span class=\"link\">Creación manual de un paginador</span></h3>\n    <p>A veces, es posible que desee crear una instancia de paginación manualmente, pasándole una matriz de elementos que ya tiene en la memoria. Puede hacerlo ya sea mediante la creación de una <code>Illuminate\\Pagination\\Paginator</code>, <code>Illuminate\\Pagination\\LengthAwarePaginator</code>o <code>Illuminate\\Pagination\\CursorPaginator</code>ejemplo, en función de sus necesidades.</p>\n    <p>Las clases <code>Paginator</code>y <code>CursorPaginator</code>no necesitan conocer el número total de elementos en el conjunto de resultados; sin embargo, debido a esto, estas clases no tienen métodos para recuperar el índice de la última página. El <code>LengthAwarePaginator</code>acepta casi los mismos argumentos que la <code>Paginator</code>; sin embargo, requiere un recuento del número total de elementos en el conjunto de resultados.</p>\n    <p>En otras palabras, <code>Paginator</code>corresponde al <code>simplePaginate</code>método en el generador de consultas, <code>CursorPaginator</code>corresponde al <code>cursorPaginate</code>método y <code>LengthAwarePaginator</code>corresponde al <code>paginate</code>método.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Al crear manualmente una instancia de paginador, debe \"dividir\" manualmente la matriz de resultados que pasa al paginador. Si no está seguro de cómo hacer esto, consulte la función PHP <span class=\"link\">array_slice</span> .</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"customizing-pagination-urls\"><span class=\"link\">Personalización de URL de paginación</span></h3>\n    <p>De forma predeterminada, los enlaces generados por el paginador coincidirán con el URI de la solicitud actual. Sin embargo, el <code>withPath</code>método del paginador le permite personalizar el URI utilizado por el paginador al generar enlaces. Por ejemplo, si desea que el paginador genere enlaces como <code>http://example.com/admin/users?page=N</code>, debe pasar <code>/admin/users</code>al <code>withPath</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">paginate</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withPath</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/admin/users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"appending-query-string-values\"><span class=\"link\">Agregar valores de cadena de consulta</span></h4>\n    <p>Puede agregar a la cadena de consulta de enlaces de paginación utilizando el <code>appends</code>método. Por ejemplo, para agregar <code>sort=votes</code>a cada enlace de paginación, debe realizar la siguiente llamada a <code>appends</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">paginate</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">appends</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'sort'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede usar el <code>withQueryString</code>método si desea agregar todos los valores de la cadena de consulta de la solicitud actual a los enlaces de paginación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">paginate</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withQueryString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"appending-hash-fragments\"><span class=\"link\">Agregar fragmentos de hash</span></h4>\n    <p>Si necesita agregar un \"fragmento hash\" a las URL generadas por el paginador, puede usar el <code>fragment</code>método. Por ejemplo, para agregar <code>#users</code>al final de cada enlace de paginación, debe invocar el <code>fragment</code>método así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">paginate</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">fragment</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"displaying-pagination-results\"><span class=\"link\">Visualización de resultados de paginación</span></h2>\n    <p>Al llamar al <code>paginate</code>método, recibirá una instancia de <code>Illuminate\\Pagination\\LengthAwarePaginator</code>, mientras que llamar al <code>simplePaginate</code>método devuelve una instancia de <code>Illuminate\\Pagination\\Paginator</code>. Y, finalmente, llamar al <code>cursorPaginate</code>método devuelve una instancia de <code>Illuminate\\Pagination\\CursorPaginator</code>.</p>\n    <p>Estos objetos proporcionan varios métodos que describen el conjunto de resultados. Además de estos métodos auxiliares, las instancias del paginador son iteradores y pueden enlazarse como una matriz. Entonces, una vez que haya recuperado los resultados, puede mostrar los resultados y renderizar los enlaces de la página usando <span class=\"link\">Blade</span> :</p>\n    <pre class=\" language-html\"><code class=\" language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    @foreach ($users as $user)\n        {{ $user-&gt;name }}\n    @endforeach\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n\n{{ $users-&gt;links() }}</code></pre>\n    <p>El <code>links</code>método representará los enlaces al resto de las páginas del conjunto de resultados. Cada uno de estos enlaces ya contendrá la <code>page</code>variable de cadena de consulta adecuada . Recuerde, el HTML generado por el <code>links</code>método es compatible con el <span class=\"link\">marco CSS Tailwind</span> .</p>\n    \n    <h3 id=\"adjusting-the-pagination-link-window\"><span class=\"link\">Ajustar la ventana del enlace de paginación</span></h3>\n    <p>Cuando el paginador muestra enlaces de paginación, se muestra el número de página actual, así como enlaces para las tres páginas antes y después de la página actual. Con el <code>onEachSide</code>método, puede controlar cuántos enlaces adicionales se muestran en cada lado de la página actual dentro de la ventana deslizante central de enlaces generados por el paginador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">onEachSide</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">links</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"converting-results-to-json\"><span class=\"link\">Conversión de resultados a JSON</span></h3>\n    <p>Las clases de paginador de Laravel implementan el <code>Illuminate\\Contracts\\Support\\Jsonable</code>contrato de interfaz y exponen el <code>toJson</code>método, por lo que es muy fácil convertir los resultados de la paginación a JSON. También puede convertir una instancia de paginador a JSON devolviéndola desde una ruta o acción de controlador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">paginate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El JSON desde el paginador incluirá información de metadatos, tales como <code>total</code>, <code>current_page</code>, <code>last_page</code>, y mucho más. Los registros de resultados están disponibles a través de la <code>data</code>clave en la matriz JSON. A continuación, se muestra un ejemplo del JSON creado al devolver una instancia de paginador de una ruta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token punctuation\">{</span>\n   <span class=\"token double-quoted-string string\">\"total\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span>\n   <span class=\"token double-quoted-string string\">\"per_page\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n   <span class=\"token double-quoted-string string\">\"current_page\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n   <span class=\"token double-quoted-string string\">\"last_page\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n   <span class=\"token double-quoted-string string\">\"first_page_url\"</span><span class=\"token punctuation\">:</span> <span class=\"token double-quoted-string string\">\"http://laravel.app?page=1\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token double-quoted-string string\">\"last_page_url\"</span><span class=\"token punctuation\">:</span> <span class=\"token double-quoted-string string\">\"http://laravel.app?page=4\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token double-quoted-string string\">\"next_page_url\"</span><span class=\"token punctuation\">:</span> <span class=\"token double-quoted-string string\">\"http://laravel.app?page=2\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token double-quoted-string string\">\"prev_page_url\"</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">,</span>\n   <span class=\"token double-quoted-string string\">\"path\"</span><span class=\"token punctuation\">:</span> <span class=\"token double-quoted-string string\">\"http://laravel.app\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token double-quoted-string string\">\"from\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n   <span class=\"token double-quoted-string string\">\"to\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n   <span class=\"token double-quoted-string string\">\"data\"</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Record...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Record...</span>\n        <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h2 id=\"customizing-the-pagination-view\"><span class=\"link\">Personalización de la vista de paginación</span></h2>\n    <p>De forma predeterminada, las vistas renderizadas para mostrar los enlaces de paginación son compatibles con el marco <span class=\"link\">CSS Tailwind</span> . Sin embargo, si no está utilizando Tailwind, puede definir sus propias vistas para representar estos enlaces. Al llamar al <code>links</code>método en una instancia del paginador, puede pasar el nombre de la vista como primer argumento del método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$paginator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">links</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'view.name'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Passing additional data to the view...</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token variable\">$paginator</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">links</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'view.name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'foo'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'bar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n    <p>Sin embargo, la forma más fácil de personalizar las vistas de paginación es exportándolas a su <code>resources/views/vendor</code>directorio usando el <code>vendor:publish</code>comando:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan vendor<span class=\"token punctuation\">:</span>publish <span class=\"token operator\">--</span>tag<span class=\"token operator\">=</span>laravel<span class=\"token operator\">-</span>pagination</code></pre>\n    <p>Este comando colocará las vistas en el <code>resources/views/vendor/pagination</code>directorio de su aplicación . El <code>tailwind.blade.php</code>archivo dentro de este directorio corresponde a la vista de paginación predeterminada. Puede editar este archivo para modificar el HTML de paginación.</p>\n    <p>Si desea designar un archivo diferente como la vista de paginación predeterminada, puede invocar los métodos <code>defaultView</code>y el paginador <code>defaultSimpleView</code>dentro del <code>boot</code>método de su <code>App\\Providers\\AppServiceProvider</code>clase:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Pagination<span class=\"token punctuation\">\\</span>Paginator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Blade</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>ServiceProvider</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AppServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Paginator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">defaultView</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'view-name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Paginator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">defaultSimpleView</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'view-name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h3 id=\"using-bootstrap\"><span class=\"link\">Usando Bootstrap</span></h3>\n    <p>Laravel incluye vistas de paginación creadas con <span class=\"link\">Bootstrap CSS</span> . Para usar estas vistas en lugar de las vistas Tailwind predeterminadas, puede llamar al <code>useBootstrap</code>método del paginador dentro del <code>boot</code>método de su <code>App\\Providers\\AppServiceProvider</code>clase:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Pagination<span class=\"token punctuation\">\\</span>Paginator</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Bootstrap any application services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Paginator<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">useBootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h2 id=\"paginator-instance-methods\"><span class=\"link\">Métodos de instancia Paginator / LengthAwarePaginator</span></h2>\n    <p>Cada instancia de paginador proporciona información de paginación adicional a través de los siguientes métodos:</p>\n    <table>\n        <thead>\n        <tr>\n            <th>Método</th>\n            <th>Descripción</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>$paginator-&gt;count()</code></td>\n            <td>Obtenga el número de elementos de la página actual.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;currentPage()</code></td>\n            <td>Obtenga el número de página actual.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;firstItem()</code></td>\n            <td>Obtenga el número de resultado del primer elemento en los resultados.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;getOptions()</code></td>\n            <td>Obtén las opciones del paginador.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;getUrlRange($start, $end)</code></td>\n            <td>Crea un rango de URL de paginación.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;hasPages()</code></td>\n            <td>Determine si hay suficientes elementos para dividir en varias páginas.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;hasMorePages()</code></td>\n            <td>Determine si hay más elementos en el almacén de datos.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;items()</code></td>\n            <td>Obtenga los elementos de la página actual.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;lastItem()</code></td>\n            <td>Obtenga el número de resultado del último elemento en los resultados.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;lastPage()</code></td>\n            <td>Obtenga el número de página de la última página disponible. (No disponible cuando se usa <code>simplePaginate</code>).</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;nextPageUrl()</code></td>\n            <td>Obtenga la URL de la página siguiente.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;onFirstPage()</code></td>\n            <td>Determina si el paginador está en la primera página.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;perPage()</code></td>\n            <td>El número de elementos que se mostrarán por página.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;previousPageUrl()</code></td>\n            <td>Obtenga la URL de la página anterior.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;total()</code></td>\n            <td>Determine el número total de elementos coincidentes en el almacén de datos. (No disponible cuando se usa <code>simplePaginate</code>).</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;url($page)</code></td>\n            <td>Obtenga la URL de un número de página determinado.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;getPageName()</code></td>\n            <td>Obtiene la variable de cadena de consulta utilizada para almacenar la página.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;setPageName($name)</code></td>\n            <td>Establezca la variable de cadena de consulta utilizada para almacenar la página.</td>\n        </tr>\n        </tbody>\n    </table>\n    \n    <h2 id=\"cursor-paginator-instance-methods\"><span class=\"link\">Métodos de instancia de Cursor Paginator</span></h2>\n    <p>Cada instancia de paginador de cursor proporciona información de paginación adicional a través de los siguientes métodos:</p>\n    <table>\n        <thead>\n        <tr>\n            <th>Método</th>\n            <th>Descripción</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>$paginator-&gt;count()</code></td>\n            <td>Obtenga el número de elementos de la página actual.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;cursor()</code></td>\n            <td>Obtiene la instancia actual del cursor.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;getOptions()</code></td>\n            <td>Obtén las opciones del paginador.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;hasPages()</code></td>\n            <td>Determine si hay suficientes elementos para dividir en varias páginas.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;hasMorePages()</code></td>\n            <td>Determine si hay más elementos en el almacén de datos.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;getCursorName()</code></td>\n            <td>Obtiene la variable de cadena de consulta utilizada para almacenar el cursor.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;items()</code></td>\n            <td>Obtenga los elementos de la página actual.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;nextCursor()</code></td>\n            <td>Obtiene la instancia del cursor para el siguiente conjunto de elementos.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;nextPageUrl()</code></td>\n            <td>Obtenga la URL de la página siguiente.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;onFirstPage()</code></td>\n            <td>Determina si el paginador está en la primera página.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;perPage()</code></td>\n            <td>El número de elementos que se mostrarán por página.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;previousCursor()</code></td>\n            <td>Obtiene la instancia del cursor para el conjunto de elementos anterior.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;previousPageUrl()</code></td>\n            <td>Obtenga la URL de la página anterior.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;setCursorName()</code></td>\n            <td>Establezca la variable de cadena de consulta utilizada para almacenar el cursor.</td>\n        </tr>\n        <tr>\n            <td><code>$paginator-&gt;url($cursor)</code></td>\n            <td>Obtén la URL de una instancia de cursor determinada.</td>\n        </tr>\n        </tbody>\n    </table>\n</div>"
    },
    {
      "title": "Base de datos: Migraciones",
      "subtitle": "BASE DE DATOS",
      "contenido": "<div>\n    <h1>Base de datos: Migraciones</h1>    \n    <h2 id=\"introduction\"><span class=\"link\">Introducción</span></h2>\n    <p>Las migraciones son como un control de versiones para su base de datos, lo que le permite a su equipo definir y compartir la definición del esquema de la base de datos de la aplicación. Si alguna vez ha tenido que decirle a un compañero de equipo que agregue manualmente una columna a su esquema de base de datos local después de extraer sus cambios desde el control de fuente, se ha enfrentado al problema que resuelven las migraciones de la base de datos.</p>\n    <p>La <code>Schema</code> <span class=\"link\">fachada de</span> Laravel proporciona soporte independiente de la base de datos para crear y manipular tablas en todos los sistemas de base de datos compatibles con Laravel. Normalmente, las migraciones utilizarán esta fachada para crear y modificar tablas y columnas de bases de datos.</p>\n    \n    <h2 id=\"generating-migrations\"><span class=\"link\">Generando migraciones</span></h2>\n    <p>Puede utilizar el <code>make:migration</code> <span class=\"link\">comando Artisan</span> para generar una migración de base de datos. La nueva migración se colocará en su <code>database/migrations</code>directorio. Cada nombre de archivo de migración contiene una marca de tiempo que permite a Laravel determinar el orden de las migraciones:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>migration create_flights_table</code></pre>\n    <p>Laravel usará el nombre de la migración para intentar adivinar el nombre de la tabla y si la migración creará una nueva tabla o no. Si Laravel puede determinar el nombre de la tabla a partir del nombre de la migración, Laravel completará previamente el archivo de migración generado con la tabla especificada. De lo contrario, simplemente puede especificar la tabla en el archivo de migración manualmente.</p>\n    <p>Si desea especificar una ruta personalizada para la migración generada, puede usar la <code>--path</code>opción al ejecutar el <code>make:migration</code>comando. La ruta dada debe ser relativa a la ruta base de su aplicación.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Los códigos <span class=\"link\">auxiliares de</span> migración se pueden personalizar mediante la <span class=\"link\">publicación de códigos auxiliares</span> .</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"squashing-migrations\"><span class=\"link\">Aplastando migraciones</span></h3>\n    <p>A medida que construye su aplicación, puede acumular más y más migraciones a lo largo del tiempo. Esto puede hacer que su <code>database/migrations</code>directorio se infle con potencialmente cientos de migraciones. Si lo desea, puede \"aplastar\" sus migraciones en un solo archivo SQL. Para comenzar, ejecute el <code>schema:dump</code>comando:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan schema<span class=\"token punctuation\">:</span>dump\n\n<span class=\"token comment\">// Dump the current database schema and prune all existing migrations...</span>\nphp artisan schema<span class=\"token punctuation\">:</span>dump <span class=\"token operator\">--</span>prune</code></pre>\n    <p>Cuando ejecute este comando, Laravel escribirá un archivo \"esquema\" en el <code>database/schema</code>directorio de su aplicación . Ahora, cuando intente migrar su base de datos y no se hayan ejecutado otras migraciones, Laravel ejecutará primero las declaraciones SQL del archivo de esquema. Después de ejecutar las declaraciones del archivo de esquema, Laravel ejecutará las migraciones restantes que no formaban parte del volcado de esquema.</p>\n    <p>Debe enviar su archivo de esquema de base de datos al control de código fuente para que otros desarrolladores nuevos en su equipo puedan crear rápidamente la estructura de base de datos inicial de su aplicación.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>El aplastamiento de la migración solo está disponible para las bases de datos MySQL, PostgreSQL y SQLite y utiliza el cliente de línea de comandos de la base de datos. Es posible que los volcados de esquema no se restauren en bases de datos SQLite en memoria.</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"migration-structure\"><span class=\"link\">Estructura de migración</span></h2>\n    <p>Una clase de migración contiene dos métodos: <code>up</code>y <code>down</code>. El <code>up</code>método se utiliza para agregar nuevas tablas, columnas o índices a su base de datos, mientras que el <code>down</code>método debe revertir las operaciones realizadas por el <code>up</code>método.</p>\n    <p>Dentro de estos dos métodos, puede utilizar el generador de esquemas de Laravel para crear y modificar tablas de forma expresiva. Para conocer todos los métodos disponibles en el <code>Schema</code>constructor, <span class=\"link\">consulte su documentación</span> . Por ejemplo, la siguiente migración crea una <code>flights</code>tabla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Migrations<span class=\"token punctuation\">\\</span>Migration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Schema<span class=\"token punctuation\">\\</span>Blueprint</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Schema</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateFlightsTable</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Migration</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Run the migrations.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'flights'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'airline'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">timestamps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Reverse the migrations.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">down</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">drop</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'flights'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h4 id=\"anonymous-migrations\"><span class=\"link\">Migraciones anónimas</span></h4>\n    <p>Como habrás notado en el ejemplo anterior, Laravel asignará automáticamente un nombre de clase a todas las migraciones que generes usando el <code>make:migration</code>comando. Sin embargo, si lo desea, puede devolver una clase anónima de su archivo de migración. Esto es principalmente útil si su aplicación acumula muchas migraciones y dos de ellas tienen una colisión de nombres de clase:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Migrations<span class=\"token punctuation\">\\</span>Migration</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">class</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Migration</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span></code></pre>\n    \n    <h4 id=\"setting-the-migration-connection\"><span class=\"link\">Configuración de la conexión de migración</span></h4>\n    <p>Si su migración interactuará con una conexión de base de datos que no sea la conexión de base de datos predeterminada de su aplicación, debe establecer la <code>$connection</code>propiedad de su migración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The database connection that should be used by the migration.\n *\n * @var string\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$connection</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'pgsql'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Run the migrations.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h2 id=\"running-migrations\"><span class=\"link\">Ejecución de migraciones</span></h2>\n    <p>Para ejecutar todas sus migraciones pendientes, ejecute el <code>migrate</code>comando Artisan:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan migrate</code></pre>\n    <p>Si desea ver qué migraciones se han ejecutado hasta ahora, puede usar el <code>migrate:status</code>comando Artisan:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan migrate<span class=\"token punctuation\">:</span>status</code></pre>\n    \n    <h4 id=\"forcing-migrations-to-run-in-production\"><span class=\"link\">Obligación de que las migraciones se ejecuten en producción</span></h4>\n    <p>Algunas operaciones de migración son destructivas, lo que significa que pueden provocar la pérdida de datos. Para protegerlo de ejecutar estos comandos en su base de datos de producción, se le pedirá confirmación antes de que se ejecuten los comandos. Para forzar que los comandos se ejecuten sin un mensaje, use la <code>--force</code>bandera:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan migrate <span class=\"token operator\">--</span>force</code></pre>\n    \n    <h3 id=\"rolling-back-migrations\"><span class=\"link\">Revertir migraciones</span></h3>\n    <p>Para revertir la última operación de migración, puede usar el <code>rollback</code>comando Artisan. Este comando revierte el último \"lote\" de migraciones, que puede incluir varios archivos de migración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan migrate<span class=\"token punctuation\">:</span>rollback</code></pre>\n    <p>Puede revertir un número limitado de migraciones proporcionando la <code>step</code>opción al <code>rollback</code>comando. Por ejemplo, el siguiente comando revertirá las últimas cinco migraciones:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan migrate<span class=\"token punctuation\">:</span>rollback <span class=\"token operator\">--</span>step<span class=\"token operator\">=</span><span class=\"token number\">5</span></code></pre>\n    <p>El <code>migrate:reset</code>comando revertirá todas las migraciones de su aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan migrate<span class=\"token punctuation\">:</span>reset</code></pre>\n    \n    <h4 id=\"roll-back-migrate-using-a-single-command\"><span class=\"link\">Revertir y migrar con un solo comando</span></h4>\n    <p>El <code>migrate:refresh</code>comando revertirá todas sus migraciones y luego ejecutará el <code>migrate</code>comando. Este comando recrea efectivamente toda su base de datos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan migrate<span class=\"token punctuation\">:</span>refresh\n\n<span class=\"token comment\">// Refresh the database and run all database seeds...</span>\nphp artisan migrate<span class=\"token punctuation\">:</span>refresh <span class=\"token operator\">--</span>seed</code></pre>\n    <p>Puede revertir y volver a migrar un número limitado de migraciones proporcionando la <code>step</code>opción al <code>refresh</code>comando. Por ejemplo, el siguiente comando revertirá y volverá a migrar las últimas cinco migraciones:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan migrate<span class=\"token punctuation\">:</span>refresh <span class=\"token operator\">--</span>step<span class=\"token operator\">=</span><span class=\"token number\">5</span></code></pre>\n    \n    <h4 id=\"drop-all-tables-migrate\"><span class=\"link\">Eliminar todas las tablas y migrar</span></h4>\n    <p>El <code>migrate:fresh</code>comando eliminará todas las tablas de la base de datos y luego ejecutará el <code>migrate</code>comando:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan migrate<span class=\"token punctuation\">:</span>fresh\n\nphp artisan migrate<span class=\"token punctuation\">:</span>fresh <span class=\"token operator\">--</span>seed</code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>El <code>migrate:fresh</code>comando eliminará todas las tablas de la base de datos independientemente de su prefijo. Este comando debe usarse con precaución al desarrollar en una base de datos que se comparte con otras aplicaciones.</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"tables\"><span class=\"link\">Mesas</span></h2>\n    \n    <h3 id=\"creating-tables\"><span class=\"link\">Crear tablas</span></h3>\n    <p>Para crear una nueva tabla de base de datos, use el <code>create</code>método en la <code>Schema</code>fachada. El <code>create</code>método acepta dos argumentos: el primero es el nombre de la tabla, mientras que el segundo es un cierre que recibe un <code>Blueprint</code>objeto que puede usarse para definir la nueva tabla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Schema<span class=\"token punctuation\">\\</span>Blueprint</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Schema</span><span class=\"token punctuation\">;</span>\n\nSchema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">timestamps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Al crear la tabla, puede utilizar cualquiera de los <span class=\"link\">métodos de columna</span> del generador de esquemas para definir las columnas de la tabla.</p>\n    \n    <h4 id=\"checking-for-table-column-existence\"><span class=\"link\">Comprobación de la existencia de tablas / columnas</span></h4>\n    <p>Puede verificar la existencia de una tabla o columna usando los métodos <code>hasTable</code>y <code>hasColumn</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">hasTable</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The \"users\" table exists...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">hasColumn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The \"users\" table exists and has an \"email\" column...</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"database-connection-table-options\"><span class=\"link\">Opciones de tabla y conexión de base de datos</span></h4>\n    <p>Si desea realizar una operación de esquema en una conexión de base de datos que no es la conexión predeterminada de su aplicación, use el <code>connection</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">connection</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'sqlite'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Además, se pueden usar algunas otras propiedades y métodos para definir otros aspectos de la creación de la tabla. La <code>engine</code>propiedad se puede usar para especificar el motor de almacenamiento de la tabla cuando se usa MySQL:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">engine</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'InnoDB'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Las propiedades <code>charset</code>y <code>collation</code>se pueden usar para especificar el juego de caracteres y la intercalación de la tabla creada cuando se usa MySQL:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">charset</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'utf8mb4'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">collation</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'utf8mb4_unicode_ci'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>temporary</code>método puede usarse para indicar que la tabla debe ser \"temporal\". Las tablas temporales solo son visibles para la sesión de base de datos de la conexión actual y se eliminan automáticamente cuando se cierra la conexión:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'calculations'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">temporary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"updating-tables\"><span class=\"link\">Actualizar tablas</span></h3>\n    <p>El <code>table</code>método en la <code>Schema</code>fachada se puede utilizar para actualizar tablas existentes. Al igual que el <code>create</code>método, el <code>table</code>método acepta dos argumentos: el nombre de la tabla y un cierre que recibe una <code>Blueprint</code>instancia que puede usar para agregar columnas o índices a la tabla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Schema<span class=\"token punctuation\">\\</span>Blueprint</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Schema</span><span class=\"token punctuation\">;</span>\n\nSchema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">integer</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"renaming-and-dropping-tables\"><span class=\"link\">Cambio de nombre / eliminación de tablas</span></h3>\n    <p>Para cambiar el nombre de una tabla de base de datos existente, use el <code>rename</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Schema</span><span class=\"token punctuation\">;</span>\n\nSchema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$from</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$to</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Para eliminar una tabla existente, puede utilizar los métodos <code>drop</code>o <code>dropIfExists</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">drop</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nSchema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">dropIfExists</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"renaming-tables-with-foreign-keys\"><span class=\"link\">Cambio de nombre de tablas con claves externas</span></h4>\n    <p>Antes de cambiar el nombre de una tabla, debe verificar que cualquier restricción de clave externa en la tabla tenga un nombre explícito en sus archivos de migración en lugar de permitir que Laravel asigne un nombre basado en la convención. De lo contrario, el nombre de la restricción de clave externa se referirá al nombre de la tabla anterior.</p>\n    \n    <h2 id=\"columns\"><span class=\"link\">Columnas</span></h2>\n    \n    <h3 id=\"creating-columns\"><span class=\"link\">Crear columnas</span></h3>\n    <p>El <code>table</code>método en la <code>Schema</code>fachada se puede utilizar para actualizar tablas existentes. Al igual que el <code>create</code>método, el <code>table</code>método acepta dos argumentos: el nombre de la tabla y un cierre que recibe una <code>Illuminate\\Database\\Schema\\Blueprint</code>instancia que puede usar para agregar columnas a la tabla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Schema<span class=\"token punctuation\">\\</span>Blueprint</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Schema</span><span class=\"token punctuation\">;</span>\n\nSchema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">integer</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"available-column-types\"><span class=\"link\">Tipos de columna disponibles</span></h3>\n    <p>El modelo del generador de esquemas ofrece una variedad de métodos que corresponden a los diferentes tipos de columnas que puede agregar a las tablas de su base de datos. Cada uno de los métodos disponibles se enumeran en la siguiente tabla:</p>\n    <style>\n    #collection-method-list > p {\n        column-count: 3; -moz-column-count: 3; -webkit-column-count: 3;\n        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n    }\n\n    #collection-method-list a {\n        display: block;\n    }\n</style>\n    <div id=\"collection-method-list\">\n        <p><span class=\"link\">bigIncrements</span>\n            <span class=\"link\">bigInteger</span>\n            <span class=\"link\">binario</span>\n            <span class=\"link\">booleano</span>\n            <span class=\"link\">carbonizarse</span>\n            <span class=\"link\">dateTimeTz</span>\n            <span class=\"link\">fecha y hora</span>\n            <span class=\"link\">fecha</span>\n            <span class=\"link\">decimal</span>\n            <span class=\"link\">doble</span>\n            <span class=\"link\">enumeración</span>\n            <span class=\"link\">flotador</span>\n            <span class=\"link\">ForeignId</span>\n            <span class=\"link\">ForeignIdFor</span>\n            <span class=\"link\">ForeignUuid</span>\n            <span class=\"link\">geometryCollection</span>\n            <span class=\"link\">geometría</span>\n            <span class=\"link\">identificación</span>\n            <span class=\"link\">incrementos</span>\n            <span class=\"link\">entero</span>\n            <span class=\"link\">dirección IP</span>\n            <span class=\"link\">json</span>\n            <span class=\"link\">jsonb</span>\n            <span class=\"link\">lineString</span>\n            <span class=\"link\">texto largo</span>\n            <span class=\"link\">dirección MAC</span>\n            <span class=\"link\">mediumIncrements</span>\n            <span class=\"link\">mediumInteger</span>\n            <span class=\"link\">mediumText</span>\n            <span class=\"link\">morfos</span>\n            <span class=\"link\">multiLineString</span>\n            <span class=\"link\">multipunto</span>\n            <span class=\"link\">multiPolygon</span>\n            <span class=\"link\">nullableMorphs</span>\n            <span class=\"link\">nullableTimestamps</span>\n            <span class=\"link\">nullableUuidMorphs</span>\n            <span class=\"link\">punto</span>\n            <span class=\"link\">polígono</span>\n            <span class=\"link\">recordarToken</span>\n            <span class=\"link\">colocar</span>\n            <span class=\"link\">pequeños incrementos</span>\n            <span class=\"link\">smallInteger</span>\n            <span class=\"link\">softDeletesTz</span>\n            <span class=\"link\">softDeletes</span>\n            <span class=\"link\">cuerda</span>\n            <span class=\"link\">texto</span>\n            <span class=\"link\">timeTz</span>\n            <span class=\"link\">tiempo</span>\n            <span class=\"link\">timestampTz</span>\n            <span class=\"link\">marca de tiempo</span>\n            <span class=\"link\">timestampsTz</span>\n            <span class=\"link\">marcas de tiempo</span>\n            <span class=\"link\">diminutos incrementos</span>\n            <span class=\"link\">tinyInteger</span>\n            <span class=\"link\">tinyText</span>\n            <span class=\"link\">unsignedBigInteger</span>\n            <span class=\"link\">unsignedDecimal</span>\n            <span class=\"link\">unsignedInteger</span>\n            <span class=\"link\">unsignedMediumInteger</span>\n            <span class=\"link\">unsignedSmallInteger</span>\n            <span class=\"link\">unsignedTinyInteger</span>\n            <span class=\"link\">uuidMorphs</span>\n            <span class=\"link\">uuid</span>\n            <span class=\"link\">año</span></p>\n    </div>\n    \n    <h4 id=\"column-method-bigIncrements\"><span class=\"link\"><code>bigIncrements()</code></span></h4>\n    <p>El <code>bigIncrements</code>método crea una <code>UNSIGNED BIGINT</code>columna equivalente de incremento automático (clave primaria):</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">bigIncrements</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-bigInteger\"><span class=\"link\"><code>bigInteger()</code></span></h4>\n    <p>El <code>bigInteger</code>método crea una <code>BIGINT</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">bigInteger</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-binary\"><span class=\"link\"><code>binary()</code></span></h4>\n    <p>El <code>binary</code>método crea una <code>BLOB</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">binary</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'photo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-boolean\"><span class=\"link\"><code>boolean()</code></span></h4>\n    <p>El <code>boolean</code>método crea una <code>BOOLEAN</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">boolean</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'confirmed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-char\"><span class=\"link\"><code>char()</code></span></h4>\n    <p>El <code>char</code>método crea una <code>CHAR</code>columna equivalente con una longitud determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">char</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-dateTimeTz\"><span class=\"link\"><code>dateTimeTz()</code></span></h4>\n    <p>El <code>dateTimeTz</code>método crea una <code>DATETIME</code>columna equivalente (con zona horaria) con una precisión opcional (dígitos totales):</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dateTimeTz</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$precision</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-dateTime\"><span class=\"link\"><code>dateTime()</code></span></h4>\n    <p>El <code>dateTime</code>método crea una <code>DATETIME</code>columna equivalente con una precisión opcional (dígitos totales):</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dateTime</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$precision</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-date\"><span class=\"link\"><code>date()</code></span></h4>\n    <p>El <code>date</code>método crea una <code>DATE</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-decimal\"><span class=\"link\"><code>decimal()</code></span></h4>\n    <p>El <code>decimal</code>método crea una <code>DECIMAL</code>columna equivalente con la precisión (dígitos totales) y la escala (dígitos decimales) dadas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">decimal</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'amount'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$precision</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$scale</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-double\"><span class=\"link\"><code>double()</code></span></h4>\n    <p>El <code>double</code>método crea una <code>DOUBLE</code>columna equivalente con la precisión (dígitos totales) y la escala (dígitos decimales) dadas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'amount'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-enum\"><span class=\"link\"><code>enum()</code></span></h4>\n    <p>El <code>enum</code>método crea una <code>ENUM</code>columna equivalente con los valores válidos dados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">enum</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'difficulty'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'easy'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'hard'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-float\"><span class=\"link\"><code>float()</code></span></h4>\n    <p>El <code>float</code>método crea una <code>FLOAT</code>columna equivalente con la precisión (dígitos totales) y la escala (dígitos decimales) dadas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">float</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'amount'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-foreignId\"><span class=\"link\"><code>foreignId()</code></span></h4>\n    <p>El <code>foreignId</code>método crea una <code>UNSIGNED BIGINT</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">foreignId</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user_id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-foreignIdFor\"><span class=\"link\"><code>foreignIdFor()</code></span></h4>\n    <p>El <code>foreignIdFor</code>método agrega una <code>{column}_id UNSIGNED BIG INT</code>columna equivalente para una clase de modelo determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">foreignIdFor</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-foreignUuid\"><span class=\"link\"><code>foreignUuid()</code></span></h4>\n    <p>El <code>foreignUuid</code>método crea una <code>UUID</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">foreignUuid</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user_id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-geometryCollection\"><span class=\"link\"><code>geometryCollection()</code></span></h4>\n    <p>El <code>geometryCollection</code>método crea una <code>GEOMETRYCOLLECTION</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">geometryCollection</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'positions'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-geometry\"><span class=\"link\"><code>geometry()</code></span></h4>\n    <p>El <code>geometry</code>método crea una <code>GEOMETRY</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">geometry</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'positions'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-id\"><span class=\"link\"><code>id()</code></span></h4>\n    <p>El <code>id</code>método es un alias del <code>bigIncrements</code>método. De forma predeterminada, el método creará una <code>id</code>columna; sin embargo, puede pasar un nombre de columna si desea asignar un nombre diferente a la columna:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-increments\"><span class=\"link\"><code>increments()</code></span></h4>\n    <p>El <code>increments</code>método crea una <code>UNSIGNED INTEGER</code>columna equivalente de incremento automático como clave principal:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">increments</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-integer\"><span class=\"link\"><code>integer()</code></span></h4>\n    <p>El <code>integer</code>método crea una <code>INTEGER</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">integer</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-ipAddress\"><span class=\"link\"><code>ipAddress()</code></span></h4>\n    <p>El <code>ipAddress</code>método crea una <code>VARCHAR</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ipAddress</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'visitor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-json\"><span class=\"link\"><code>json()</code></span></h4>\n    <p>El <code>json</code>método crea una <code>JSON</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'options'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-jsonb\"><span class=\"link\"><code>jsonb()</code></span></h4>\n    <p>El <code>jsonb</code>método crea una <code>JSONB</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">jsonb</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'options'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-lineString\"><span class=\"link\"><code>lineString()</code></span></h4>\n    <p>El <code>lineString</code>método crea una <code>LINESTRING</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">lineString</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'positions'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-longText\"><span class=\"link\"><code>longText()</code></span></h4>\n    <p>El <code>longText</code>método crea una <code>LONGTEXT</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">longText</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'description'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-macAddress\"><span class=\"link\"><code>macAddress()</code></span></h4>\n    <p>El <code>macAddress</code>método crea una columna destinada a contener una dirección MAC. Algunos sistemas de bases de datos, como PostgreSQL, tienen un tipo de columna dedicada para este tipo de datos. Otros sistemas de bases de datos utilizarán una columna equivalente a una cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">macAddress</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'device'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-mediumIncrements\"><span class=\"link\"><code>mediumIncrements()</code></span></h4>\n    <p>El <code>mediumIncrements</code>método crea una <code>UNSIGNED MEDIUMINT</code>columna equivalente de incremento automático como clave principal:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">mediumIncrements</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-mediumInteger\"><span class=\"link\"><code>mediumInteger()</code></span></h4>\n    <p>El <code>mediumInteger</code>método crea una <code>MEDIUMINT</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">mediumInteger</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-mediumText\"><span class=\"link\"><code>mediumText()</code></span></h4>\n    <p>El <code>mediumText</code>método crea una <code>MEDIUMTEXT</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">mediumText</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'description'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-morphs\"><span class=\"link\"><code>morphs()</code></span></h4>\n    <p>El <code>morphs</code>método es un método de conveniencia que agrega una <code>{column}_id</code> <code>UNSIGNED BIGINT</code>columna equivalente y una <code>{column}_type</code> <code>VARCHAR</code>columna equivalente.</p>\n    <p>Este método está destinado a ser utilizado al definir las columnas necesarias para una <span class=\"link\">relación elocuente</span> polimórfica . En el siguiente ejemplo, se crearían columnas <code>taggable_id</code>y <code>taggable_type</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphs</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'taggable'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-multiLineString\"><span class=\"link\"><code>multiLineString()</code></span></h4>\n    <p>El <code>multiLineString</code>método crea una <code>MULTILINESTRING</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">multiLineString</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'positions'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-multiPoint\"><span class=\"link\"><code>multiPoint()</code></span></h4>\n    <p>El <code>multiPoint</code>método crea una <code>MULTIPOINT</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">multiPoint</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'positions'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-multiPolygon\"><span class=\"link\"><code>multiPolygon()</code></span></h4>\n    <p>El <code>multiPolygon</code>método crea una <code>MULTIPOLYGON</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">multiPolygon</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'positions'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-nullableTimestamps\"><span class=\"link\"><code>nullableTimestamps()</code></span></h4>\n    <p>El <code>nullableTimestamps</code>método es un alias del método de <span class=\"link\">marcas</span> de <span class=\"link\">tiempo</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">nullableTimestamps</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-nullableMorphs\"><span class=\"link\"><code>nullableMorphs()</code></span></h4>\n    <p>El método es similar al método <span class=\"link\">morphs</span> ; sin embargo, las columnas que se crean serán \"anulables\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">nullableMorphs</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'taggable'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-nullableUuidMorphs\"><span class=\"link\"><code>nullableUuidMorphs()</code></span></h4>\n    <p>El método es similar al método <span class=\"link\">uuidMorphs</span> ; sin embargo, las columnas que se crean serán \"anulables\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">nullableUuidMorphs</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'taggable'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-point\"><span class=\"link\"><code>point()</code></span></h4>\n    <p>El <code>point</code>método crea una <code>POINT</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">point</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'position'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-polygon\"><span class=\"link\"><code>polygon()</code></span></h4>\n    <p>El <code>polygon</code>método crea una <code>POLYGON</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">polygon</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'position'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-rememberToken\"><span class=\"link\"><code>rememberToken()</code></span></h4>\n    <p>El <code>rememberToken</code>método crea una <code>VARCHAR(100)</code>columna equivalente anulable que está destinada a almacenar el <span class=\"link\">token de autenticación</span> actual \"recordarme\" :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">rememberToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-set\"><span class=\"link\"><code>set()</code></span></h4>\n    <p>El <code>set</code>método crea una <code>SET</code>columna equivalente con la lista dada de valores válidos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'flavors'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'strawberry'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'vanilla'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-smallIncrements\"><span class=\"link\"><code>smallIncrements()</code></span></h4>\n    <p>El <code>smallIncrements</code>método crea una <code>UNSIGNED SMALLINT</code>columna equivalente de incremento automático como clave principal:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">smallIncrements</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-smallInteger\"><span class=\"link\"><code>smallInteger()</code></span></h4>\n    <p>El <code>smallInteger</code>método crea una <code>SMALLINT</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">smallInteger</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-softDeletesTz\"><span class=\"link\"><code>softDeletesTz()</code></span></h4>\n    <p>El <code>softDeletesTz</code>método agrega una <code>deleted_at</code> <code>TIMESTAMP</code>columna equivalente anulable (con zona horaria) con una precisión opcional (dígitos totales). Esta columna está destinada a almacenar la <code>deleted_at</code>marca de tiempo necesaria para la funcionalidad de \"eliminación suave\" de Eloquent:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">softDeletesTz</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$column</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'deleted_at'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$precision</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-softDeletes\"><span class=\"link\"><code>softDeletes()</code></span></h4>\n    <p>El <code>softDeletes</code>método agrega una <code>deleted_at</code> <code>TIMESTAMP</code>columna equivalente que acepta valores NULL con una precisión opcional (dígitos totales). Esta columna está destinada a almacenar la <code>deleted_at</code>marca de tiempo necesaria para la funcionalidad de \"eliminación suave\" de Eloquent:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">softDeletes</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$column</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'deleted_at'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$precision</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-string\"><span class=\"link\"><code>string()</code></span></h4>\n    <p>El <code>string</code>método crea una <code>VARCHAR</code>columna equivalente de la longitud dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-text\"><span class=\"link\"><code>text()</code></span></h4>\n    <p>El <code>text</code>método crea una <code>TEXT</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'description'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-timeTz\"><span class=\"link\"><code>timeTz()</code></span></h4>\n    <p>El <code>timeTz</code>método crea una <code>TIME</code>columna equivalente (con zona horaria) con una precisión opcional (dígitos totales):</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">timeTz</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'sunrise'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$precision</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-time\"><span class=\"link\"><code>time()</code></span></h4>\n    <p>El <code>time</code>método crea una <code>TIME</code>columna equivalente con una precisión opcional (dígitos totales):</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'sunrise'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$precision</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-timestampTz\"><span class=\"link\"><code>timestampTz()</code></span></h4>\n    <p>El <code>timestampTz</code>método crea una <code>TIMESTAMP</code>columna equivalente (con zona horaria) con una precisión opcional (dígitos totales):</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">timestampTz</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'added_at'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$precision</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-timestamp\"><span class=\"link\"><code>timestamp()</code></span></h4>\n    <p>El <code>timestamp</code>método crea una <code>TIMESTAMP</code>columna equivalente con una precisión opcional (dígitos totales):</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">timestamp</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'added_at'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$precision</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-timestampsTz\"><span class=\"link\"><code>timestampsTz()</code></span></h4>\n    <p>El <code>timestampsTz</code>método crea <code>created_at</code>y <code>updated_at</code> <code>TIMESTAMP</code>(con zona horaria) columnas equivalentes con una precisión opcional (dígitos totales):</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">timestampsTz</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$precision</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-timestamps\"><span class=\"link\"><code>timestamps()</code></span></h4>\n    <p>El <code>timestamps</code>método crea <code>created_at</code>y <code>updated_at</code> <code>TIMESTAMP</code>columnas equivalentes con una precisión opcional (dígitos en total):</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">timestamps</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$precision</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-tinyIncrements\"><span class=\"link\"><code>tinyIncrements()</code></span></h4>\n    <p>El <code>tinyIncrements</code>método crea una <code>UNSIGNED TINYINT</code>columna equivalente de incremento automático como clave principal:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">tinyIncrements</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-tinyInteger\"><span class=\"link\"><code>tinyInteger()</code></span></h4>\n    <p>El <code>tinyInteger</code>método crea una <code>TINYINT</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">tinyInteger</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-tinyText\"><span class=\"link\"><code>tinyText()</code></span></h4>\n    <p>El <code>tinyText</code>método crea una <code>TINYTEXT</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">tinyText</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'notes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-unsignedBigInteger\"><span class=\"link\"><code>unsignedBigInteger()</code></span></h4>\n    <p>El <code>unsignedBigInteger</code>método crea una <code>UNSIGNED BIGINT</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">unsignedBigInteger</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-unsignedDecimal\"><span class=\"link\"><code>unsignedDecimal()</code></span></h4>\n    <p>El <code>unsignedDecimal</code>método crea una <code>UNSIGNED DECIMAL</code>columna equivalente con una precisión opcional (dígitos totales) y una escala (dígitos decimales):</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">unsignedDecimal</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'amount'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$precision</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$scale</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-unsignedInteger\"><span class=\"link\"><code>unsignedInteger()</code></span></h4>\n    <p>El <code>unsignedInteger</code>método crea una <code>UNSIGNED INTEGER</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">unsignedInteger</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-unsignedMediumInteger\"><span class=\"link\"><code>unsignedMediumInteger()</code></span></h4>\n    <p>El <code>unsignedMediumInteger</code>método crea una <code>UNSIGNED MEDIUMINT</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">unsignedMediumInteger</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-unsignedSmallInteger\"><span class=\"link\"><code>unsignedSmallInteger()</code></span></h4>\n    <p>El <code>unsignedSmallInteger</code>método crea una <code>UNSIGNED SMALLINT</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">unsignedSmallInteger</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-unsignedTinyInteger\"><span class=\"link\"><code>unsignedTinyInteger()</code></span></h4>\n    <p>El <code>unsignedTinyInteger</code>método crea una <code>UNSIGNED TINYINT</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">unsignedTinyInteger</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-uuidMorphs\"><span class=\"link\"><code>uuidMorphs()</code></span></h4>\n    <p>El <code>uuidMorphs</code>método es un método de conveniencia que agrega una <code>{column}_id</code> <code>CHAR(36)</code>columna equivalente y una <code>{column}_type</code> <code>VARCHAR</code>columna equivalente.</p>\n    <p>Este método está destinado a ser utilizado al definir las columnas necesarias para una <span class=\"link\">relación Eloquent</span> polimórfica que usa identificadores UUID. En el siguiente ejemplo, se crearían columnas <code>taggable_id</code>y <code>taggable_type</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">uuidMorphs</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'taggable'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-uuid\"><span class=\"link\"><code>uuid()</code></span></h4>\n    <p>El <code>uuid</code>método crea una <code>UUID</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">uuid</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"column-method-year\"><span class=\"link\"><code>year()</code></span></h4>\n    <p>El <code>year</code>método crea una <code>YEAR</code>columna equivalente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">year</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'birth_year'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"column-modifiers\"><span class=\"link\">Modificadores de columna</span></h3>\n    <p>Además de los tipos de columna enumerados anteriormente, hay varios \"modificadores\" de columna que puede usar al agregar una columna a una tabla de base de datos. Por ejemplo, para hacer que la columna sea \"anulable\", puede usar el <code>nullable</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Schema<span class=\"token punctuation\">\\</span>Blueprint</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Schema</span><span class=\"token punctuation\">;</span>\n\nSchema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">nullable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>La siguiente tabla contiene todos los modificadores de columna disponibles. Esta lista no incluye <span class=\"link\">modificadores de índice</span> :</p>\n    <table>\n        <thead>\n        <tr>\n            <th>Modificador</th>\n            <th>Descripción</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>-&gt;after('column')</code></td>\n            <td>Coloque la columna \"después\" de otra columna (MySQL).</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;autoIncrement()</code></td>\n            <td>Establezca las columnas INTEGER como de incremento automático (clave primaria).</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;charset('utf8mb4')</code></td>\n            <td>Especifique un juego de caracteres para la columna (MySQL).</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;collation('utf8mb4_unicode_ci')</code></td>\n            <td>Especifique una intercalación para la columna (MySQL / PostgreSQL / SQL Server).</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;comment('my comment')</code></td>\n            <td>Agregue un comentario a una columna (MySQL / PostgreSQL).</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;default($value)</code></td>\n            <td>Especifique un valor \"predeterminado\" para la columna.</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;first()</code></td>\n            <td>Coloque la columna \"primero\" en la tabla (MySQL).</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;from($integer)</code></td>\n            <td>Establezca el valor inicial de un campo de incremento automático (MySQL / PostgreSQL).</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;nullable($value = true)</code></td>\n            <td>Permitir que se inserten valores NULL en la columna.</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;storedAs($expression)</code></td>\n            <td>Cree una columna generada almacenada (MySQL).</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;unsigned()</code></td>\n            <td>Establezca las columnas INTEGER como SIN FIRMAR (MySQL).</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;useCurrent()</code></td>\n            <td>Configure las columnas TIMESTAMP para usar CURRENT_TIMESTAMP como valor predeterminado.</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;useCurrentOnUpdate()</code></td>\n            <td>Configure las columnas TIMESTAMP para usar CURRENT_TIMESTAMP cuando se actualice un registro.</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;virtualAs($expression)</code></td>\n            <td>Cree una columna generada virtual (MySQL).</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;generatedAs($expression)</code></td>\n            <td>Cree una columna de identidad con opciones de secuencia especificadas (PostgreSQL).</td>\n        </tr>\n        <tr>\n            <td><code>-&gt;always()</code></td>\n            <td>Define la precedencia de los valores de secuencia sobre la entrada para una columna de identidad (PostgreSQL).</td>\n        </tr>\n        </tbody>\n    </table>\n    \n    <h4 id=\"default-expressions\"><span class=\"link\">Expresiones predeterminadas</span></h4>\n    <p>El <code>default</code>modificador acepta un valor o una <code>Illuminate\\Database\\Query\\Expression</code>instancia. El uso de una <code>Expression</code>instancia evitará que Laravel envuelva el valor entre comillas y le permitirá utilizar funciones específicas de la base de datos. Una situación en la que esto es particularmente útil es cuando necesita asignar valores predeterminados a las columnas JSON:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Schema</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Schema<span class=\"token punctuation\">\\</span>Blueprint</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Query<span class=\"token punctuation\">\\</span>Expression</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Migrations<span class=\"token punctuation\">\\</span>Migration</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateFlightsTable</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Migration</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Run the migrations.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">up</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'flights'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'movies'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Expression</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'(JSON_ARRAY())'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">timestamps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>La compatibilidad con las expresiones predeterminadas depende del controlador de la base de datos, la versión de la base de datos y el tipo de campo. Consulte la documentación de su base de datos.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"column-order\"><span class=\"link\">Orden de columna</span></h4>\n    <p>Cuando se usa la base de datos MySQL, el <code>after</code>método se puede usar para agregar columnas después de una columna existente en el esquema:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'password'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'address_line1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'address_line2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'city'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"modifying-columns\"><span class=\"link\">Modificar columnas</span></h3>\n    \n    <h4 id=\"prerequisites\"><span class=\"link\">Prerrequisitos</span></h4>\n    <p>Antes de modificar una columna, debe instalar el <code>doctrine/dbal</code>paquete utilizando el administrador de paquetes Composer. La biblioteca Doctrine DBAL se utiliza para determinar el estado actual de la columna y para crear las consultas SQL necesarias para realizar los cambios solicitados en su columna:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">composer <span class=\"token keyword\">require</span> doctrine<span class=\"token operator\">/</span>dbal</code></pre>\n    <p>Si planea modificar las columnas creadas con el <code>timestamp</code>método, también debe agregar la siguiente configuración al <code>config/database.php</code>archivo de configuración de su aplicación :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>DBAL<span class=\"token punctuation\">\\</span>TimestampType</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token single-quoted-string string\">'dbal'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'types'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'timestamp'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> TimestampType<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si su aplicación utiliza Microsoft SQL Server, asegúrese de instalarla <code>doctrine/dbal:^3.0</code>.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"updating-column-attributes\"><span class=\"link\">Actualización de atributos de columna</span></h4>\n    <p>El <code>change</code>método le permite modificar el tipo y los atributos de las columnas existentes. Por ejemplo, es posible que desee aumentar el tamaño de una <code>string</code>columna. Para ver el <code>change</code>método en acción, aumentemos el tamaño de la <code>name</code>columna de 25 a 50. Para lograr esto, simplemente definimos el nuevo estado de la columna y luego llamamos al <code>change</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También podríamos modificar una columna para que sea anulable:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">nullable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Los siguientes tipos de columna pueden ser modificados: <code>bigInteger</code>, <code>binary</code>, <code>boolean</code>, <code>date</code>, <code>dateTime</code>, <code>dateTimeTz</code>, <code>decimal</code>, <code>integer</code>, <code>json</code>, <code>longText</code>, <code>mediumText</code>, <code>smallInteger</code>, <code>string</code>, <code>text</code>, <code>time</code>, <code>unsignedBigInteger</code>, <code>unsignedInteger</code>, <code>unsignedSmallInteger</code>, y <code>uuid</code>. Para modificar un <code>timestamp</code>tipo de columna se <span class=\"link\">debe registrar</span> un <span class=\"link\">tipo de Doctrine</span> .</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"renaming-columns\"><span class=\"link\">Cambiar el nombre de las columnas</span></h4>\n    <p>Para cambiar el nombre de una columna, puede utilizar el <code>renameColumn</code>método proporcionado por el modelo del generador de esquemas. Antes de cambiar el nombre de una columna, asegúrese de haber instalado la <code>doctrine/dbal</code>biblioteca a través del administrador de paquetes Composer:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">renameColumn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'from'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'to'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p><code>enum</code>Actualmente, no se admite el cambio de nombre de una columna.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"dropping-columns\"><span class=\"link\">Dejar caer columnas</span></h3>\n    <p>Para eliminar una columna, puede utilizar el <code>dropColumn</code>método del modelo del generador de esquemas. Si su aplicación utiliza una base de datos SQLite, debe instalar el <code>doctrine/dbal</code>paquete a través del administrador de paquetes Composer antes de <code>dropColumn</code>que se pueda utilizar el método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dropColumn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede eliminar varias columnas de una tabla pasando una matriz de nombres de columna al <code>dropColumn</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dropColumn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'avatar'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'location'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p> No se admite eliminar o modificar varias columnas dentro de una única migración mientras se usa una base de datos SQLite.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"available-command-aliases\"><span class=\"link\">Alias \u200B\u200Bde comando disponibles</span></h4>\n    <p>Laravel proporciona varios métodos convenientes relacionados con la eliminación de tipos comunes de columnas. Cada uno de estos métodos se describe en la siguiente tabla:</p>\n    <table>\n        <thead>\n        <tr>\n            <th>Mando</th>\n            <th>Descripción</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>$table-&gt;dropMorphs('morphable');</code></td>\n            <td>Suelta las columnas <code>morphable_id</code>y <code>morphable_type</code>.</td>\n        </tr>\n        <tr>\n            <td><code>$table-&gt;dropRememberToken();</code></td>\n            <td>Suelta la <code>remember_token</code>columna.</td>\n        </tr>\n        <tr>\n            <td><code>$table-&gt;dropSoftDeletes();</code></td>\n            <td>Suelta la <code>deleted_at</code>columna.</td>\n        </tr>\n        <tr>\n            <td><code>$table-&gt;dropSoftDeletesTz();</code></td>\n            <td>Alias \u200B\u200Bde <code>dropSoftDeletes()</code>método.</td>\n        </tr>\n        <tr>\n            <td><code>$table-&gt;dropTimestamps();</code></td>\n            <td>Suelta las columnas <code>created_at</code>y <code>updated_at</code>.</td>\n        </tr>\n        <tr>\n            <td><code>$table-&gt;dropTimestampsTz();</code></td>\n            <td>Alias \u200B\u200Bde <code>dropTimestamps()</code>método.</td>\n        </tr>\n        </tbody>\n    </table>\n    \n    <h2 id=\"indexes\"><span class=\"link\">Índices</span></h2>\n    \n    <h3 id=\"creating-indexes\"><span class=\"link\">Crear índices</span></h3>\n    <p>El constructor de esquemas de Laravel admite varios tipos de índices. El siguiente ejemplo crea una nueva <code>email</code>columna y especifica que sus valores deben ser únicos. Para crear el índice, podemos encadenar el <code>unique</code>método a la definición de la columna:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Schema<span class=\"token punctuation\">\\</span>Blueprint</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Schema</span><span class=\"token punctuation\">;</span>\n\nSchema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Alternativamente, puede crear el índice después de definir la columna. Para hacerlo, debe llamar al <code>unique</code>método en el modelo del generador de esquemas. Este método acepta el nombre de la columna que debería recibir un índice único:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Incluso puede pasar una matriz de columnas a un método de índice para crear un índice compuesto (o compuesto):</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'account_id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Al crear un índice, Laravel generará automáticamente un nombre de índice basado en la tabla, los nombres de las columnas y el tipo de índice, pero puede pasar un segundo argumento al método para especificar el nombre del índice usted mismo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'unique_email'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"available-index-types\"><span class=\"link\">Tipos de índice disponibles</span></h4>\n    <p>La clase de modelo del constructor de esquemas de Laravel proporciona métodos para crear cada tipo de índice compatible con Laravel. Cada método de índice acepta un segundo argumento opcional para especificar el nombre del índice. Si se omite, el nombre se derivará de los nombres de la tabla y las columnas utilizadas para el índice, así como del tipo de índice. Cada uno de los métodos de índice disponibles se describe en la siguiente tabla:</p>\n    <table>\n        <thead>\n        <tr>\n            <th>Mando</th>\n            <th>Descripción</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>$table-&gt;primary('id');</code></td>\n            <td>Agrega una clave principal.</td>\n        </tr>\n        <tr>\n            <td><code>$table-&gt;primary(['id', 'parent_id']);</code></td>\n            <td>Agrega claves compuestas.</td>\n        </tr>\n        <tr>\n            <td><code>$table-&gt;unique('email');</code></td>\n            <td>Agrega un índice único.</td>\n        </tr>\n        <tr>\n            <td><code>$table-&gt;index('state');</code></td>\n            <td>Agrega un índice.</td>\n        </tr>\n        <tr>\n            <td><code>$table-&gt;spatialIndex('location');</code></td>\n            <td>Agrega un índice espacial (excepto SQLite).</td>\n        </tr>\n        </tbody>\n    </table>\n    \n    <h4 id=\"index-lengths-mysql-mariadb\"><span class=\"link\">Longitudes de índice y MySQL / MariaDB</span></h4>\n    <p>Por defecto, Laravel usa el <code>utf8mb4</code>juego de caracteres. Si está ejecutando una versión de MySQL anterior a la versión 5.7.7 o MariaDB anterior a la versión 10.2.2, es posible que deba configurar manualmente la longitud de cadena predeterminada generada por las migraciones para que MySQL cree índices para ellas. Puede configurar la longitud de cadena predeterminada llamando al <code>Schema::defaultStringLength</code>método dentro del <code>boot</code>método de su <code>App\\Providers\\AppServiceProvider</code>clase:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Schema</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Bootstrap any application services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">defaultStringLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">191</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Alternativamente, puede habilitar la <code>innodb_large_prefix</code>opción para su base de datos. Consulte la documentación de su base de datos para obtener instrucciones sobre cómo habilitar correctamente esta opción.</p>\n    \n    <h3 id=\"renaming-indexes\"><span class=\"link\">Cambiar el nombre de los índices</span></h3>\n    <p>Para cambiar el nombre de un índice, puede utilizar el <code>renameIndex</code>método proporcionado por el modelo del generador de esquemas. Este método acepta el nombre del índice actual como primer argumento y el nombre deseado como segundo argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">renameIndex</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'from'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'to'</span><span class=\"token punctuation\">)</span></code></pre>\n    \n    <h3 id=\"dropping-indexes\"><span class=\"link\">Eliminar índices</span></h3>\n    <p>Para eliminar un índice, debe especificar el nombre del índice. De forma predeterminada, Laravel asigna automáticamente un nombre de índice basado en el nombre de la tabla, el nombre de la columna indexada y el tipo de índice. Aquí hay unos ejemplos:</p>\n    <table>\n        <thead>\n        <tr>\n            <th>Mando</th>\n            <th>Descripción</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>$table-&gt;dropPrimary('users_id_primary');</code></td>\n            <td>Elimina una clave principal de la tabla \"usuarios\".</td>\n        </tr>\n        <tr>\n            <td><code>$table-&gt;dropUnique('users_email_unique');</code></td>\n            <td>Elimina un índice único de la tabla \"usuarios\".</td>\n        </tr>\n        <tr>\n            <td><code>$table-&gt;dropIndex('geo_state_index');</code></td>\n            <td>Suelta un índice básico de la tabla \"geo\".</td>\n        </tr>\n        <tr>\n            <td><code>$table-&gt;dropSpatialIndex('geo_location_spatialindex');</code></td>\n            <td>Elimina un índice espacial de la tabla \"geo\" (excepto SQLite).</td>\n        </tr>\n        </tbody>\n    </table>\n    <p>Si pasa una matriz de columnas a un método que elimina índices, el nombre de índice convencional se generará en función del nombre de la tabla, las columnas y el tipo de índice:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'geo'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dropIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'state'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Drops index 'geo_state_index'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"foreign-key-constraints\"><span class=\"link\">Restricciones de clave externa</span></h3>\n    <p>Laravel también proporciona soporte para crear restricciones de clave externa, que se utilizan para forzar la integridad referencial a nivel de la base de datos. Por ejemplo, definamos una <code>user_id</code>columna en la <code>posts</code>tabla que haga referencia a la <code>id</code>columna en una <code>users</code>tabla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Schema<span class=\"token punctuation\">\\</span>Blueprint</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Schema</span><span class=\"token punctuation\">;</span>\n\nSchema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'posts'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">unsignedBigInteger</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user_id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">foreign</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user_id'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">references</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Dado que esta sintaxis es bastante detallada, Laravel proporciona métodos adicionales y más tersos que utilizan convenciones para proporcionar una mejor experiencia de desarrollador. Cuando use el <code>foreignId</code>método para crear su columna, el ejemplo anterior se puede reescribir así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'posts'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">foreignId</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user_id'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">constrained</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>foreignId</code>método crea una <code>UNSIGNED BIGINT</code>columna equivalente, mientras que el <code>constrained</code>método utilizará convenciones para determinar la tabla y el nombre de la columna a la que se hace referencia. Si el nombre de su tabla no coincide con las convenciones de Laravel, puede especificar el nombre de la tabla pasándolo como un argumento al <code>constrained</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'posts'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">foreignId</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user_id'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">constrained</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede especificar la acción deseada para las propiedades \"al eliminar\" y \"al actualizar\" de la restricción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">foreignId</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user_id'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">constrained</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">onUpdate</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'cascade'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">onDelete</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'cascade'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Cualquier <span class=\"link\">modificador de columna</span> adicional debe llamarse antes del <code>constrained</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">foreignId</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user_id'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">nullable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">constrained</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"dropping-foreign-keys\"><span class=\"link\">Dejar caer claves externas</span></h4>\n    <p>Para eliminar una clave externa, puede utilizar el <code>dropForeign</code>método, pasando el nombre de la restricción de clave externa que se eliminará como argumento. Las restricciones de clave externa utilizan la misma convención de nomenclatura que los índices. En otras palabras, el nombre de la restricción de clave externa se basa en el nombre de la tabla y las columnas de la restricción, seguido de un sufijo \"_foreign\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dropForeign</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'posts_user_id_foreign'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Alternativamente, puede pasar una matriz que contenga el nombre de la columna que contiene la clave externa al <code>dropForeign</code>método. La matriz se convertirá en un nombre de restricción de clave externa utilizando las convenciones de nomenclatura de restricciones de Laravel:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dropForeign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'user_id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"toggling-foreign-key-constraints\"><span class=\"link\">Alternar restricciones de clave externa</span></h4>\n    <p>Puede habilitar o deshabilitar las restricciones de clave externa dentro de sus migraciones mediante los siguientes métodos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Schema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">enableForeignKeyConstraints</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nSchema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">disableForeignKeyConstraints</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>SQLite deshabilita las restricciones de clave externa de forma predeterminada. Cuando utilice SQLite, asegúrese de <span class=\"link\">habilitar la compatibilidad con claves externas</span> en la configuración de su base de datos antes de intentar crearlas en sus migraciones. Además, SQLite solo admite claves externas al crear la tabla y <span class=\"link\">no cuando se modifican las tablas</span> .</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"events\"><span class=\"link\">Eventos</span></h2>\n    <p>Para mayor comodidad, cada operación de migración enviará un <span class=\"link\">evento</span> . Todos los siguientes eventos amplían la <code>Illuminate\\Database\\Events\\MigrationEvent</code>clase base :</p>\n    <table>\n        <thead>\n        <tr>\n            <th>Clase</th>\n            <th>Descripción</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td><code>Illuminate\\Database\\Events\\MigrationsStarted</code></td>\n            <td>Está a punto de ejecutarse un lote de migraciones.</td>\n        </tr>\n        <tr>\n            <td><code>Illuminate\\Database\\Events\\MigrationsEnded</code></td>\n            <td>Un lote de migraciones ha terminado de ejecutarse.</td>\n        </tr>\n        <tr>\n            <td><code>Illuminate\\Database\\Events\\MigrationStarted</code></td>\n            <td>Está a punto de ejecutarse una única migración.</td>\n        </tr>\n        <tr>\n            <td><code>Illuminate\\Database\\Events\\MigrationEnded</code></td>\n            <td>Una única migración ha terminado de ejecutarse.</td>\n        </tr>\n        </tbody>\n    </table>\n</div>"
    },
    {
      "title": "Pruebas: Primeros pasos",
      "subtitle": "TEST",
      "contenido": "<div>\n    <h1>Pruebas: Primeros pasos</h1>    \n    <h2 id=\"introduction\"><span class=\"link\">Introducción</span></h2>\n    <p>Laravel está construido teniendo en cuenta las pruebas. De hecho, el soporte para realizar pruebas con PHPUnit está incluido y <code>phpunit.xml</code>ya está configurado un archivo para su aplicación. El marco también se envía con métodos de ayuda convenientes que le permiten probar expresivamente sus aplicaciones.</p>\n    <p>De forma predeterminada, el <code>tests</code>directorio de su aplicación contiene dos directorios: <code>Feature</code>y <code>Unit</code>. Las pruebas unitarias son pruebas que se centran en una parte muy pequeña y aislada de su código. De hecho, la mayoría de las pruebas unitarias probablemente se centren en un solo método. Las pruebas dentro de su directorio de prueba \"Unidad\" no inician su aplicación Laravel y, por lo tanto, no pueden acceder a la base de datos de su aplicación u otros servicios marco.</p>\n    <p>Las pruebas de funciones pueden probar una parte más grande de su código, incluida la forma en que varios objetos interactúan entre sí o incluso una solicitud HTTP completa a un punto final JSON. <strong>Generalmente, la mayoría de sus pruebas deben ser pruebas de características. Estos tipos de pruebas brindan la mayor confianza en que su sistema en su conjunto está funcionando según lo previsto.</strong></p>\n    <p>Se <code>ExampleTest.php</code>proporciona un archivo en los directorios de prueba <code>Feature</code>y <code>Unit</code>. Después de instalar una nueva aplicación de Laravel, ejecute los comandos <code>vendor/bin/phpunit</code>o <code>php artisan test</code>para ejecutar sus pruebas.</p>\n    \n    <h2 id=\"environment\"><span class=\"link\">Medio ambiente</span></h2>\n    <p>Cuando la ejecución de pruebas, laravel establecerá automáticamente el <span class=\"link\">entorno de configuración</span> a <code>testing</code>causa de las variables de entorno definidas en el <code>phpunit.xml</code>archivo. Laravel también configura automáticamente la sesión y la caché para el <code>array</code>controlador durante la prueba, lo que significa que no se conservarán los datos de la sesión o la caché durante la prueba.</p>\n    <p>Puede definir otros valores de configuración del entorno de prueba según sea necesario. Las <code>testing</code>variables de entorno pueden configurarse en el <code>phpunit.xml</code>archivo de su aplicación , ¡pero asegúrese de borrar su caché de configuración usando el <code>config:clear</code>comando Artisan antes de ejecutar sus pruebas!</p>\n    \n    <h4 id=\"the-env-testing-environment-file\"><span class=\"link\">El <code>.env.testing</code>archivo de entorno</span></h4>\n    <p>Además, puede crear un <code>.env.testing</code>archivo en la raíz de su proyecto. Este archivo se utilizará en lugar del <code>.env</code>archivo al ejecutar pruebas PHPUnit o ejecutar comandos Artisan con la <code>--env=testing</code>opción.</p>\n    \n    <h4 id=\"the-creates-application-trait\"><span class=\"link\">El <code>CreatesApplication</code>rasgo</span></h4>\n    <p>Laravel incluye un <code>CreatesApplication</code>rasgo que se aplica a la <code>TestCase</code>clase base de tu aplicación . Este rasgo contiene un <code>createApplication</code>método que inicia la aplicación Laravel antes de ejecutar tus pruebas. Es importante que deje este rasgo en su ubicación original, ya que algunas características, como la función de prueba paralela de Laravel, dependen de él.</p>\n    \n    <h2 id=\"creating-tests\"><span class=\"link\">Crear pruebas</span></h2>\n    <p>Para crear un nuevo caso de prueba, use el <code>make:test</code>comando Artisan. De forma predeterminada, las pruebas se colocarán en el <code>tests/Feature</code>directorio:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>test UserTest</code></pre>\n    <p>Si desea crear una prueba dentro del <code>tests/Unit</code>directorio, puede usar la <code>--unit</code>opción al ejecutar el <code>make:test</code>comando:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>test UserTest <span class=\"token operator\">--</span>unit</code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Los <span class=\"link\">resguardos de</span> prueba se pueden personalizar mediante la <span class=\"link\">publicación de resguardos</span> .</p></p></div>\n    </blockquote>\n    <p>Una vez que se ha generado la prueba, puede definir los métodos de prueba como lo haría normalmente con <span class=\"link\">PHPUnit</span> . Para ejecutar sus pruebas, ejecute el comando <code>vendor/bin/phpunit</code>o <code>php artisan test</code>desde su terminal:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>Unit</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">PHPUnit<span class=\"token punctuation\">\\</span>Framework<span class=\"token punctuation\">\\</span>TestCase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TestCase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * A basic test example.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test_basic_test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si define sus propios métodos <code>setUp</code>/ <code>tearDown</code>dentro de una clase de prueba, asegúrese de llamar a los métodos <code>parent::setUp()</code>/ respectivos <code>parent::tearDown()</code>en la clase principal.</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"running-tests\"><span class=\"link\">Ejecución de pruebas</span></h2>\n    <p>Como se mencionó anteriormente, una vez que haya escrito las pruebas, puede ejecutarlas usando <code>phpunit</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>vendor<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>phpunit</code></pre>\n    <p>Además del <code>phpunit</code>comando, puede utilizar el <code>test</code>comando Artisan para ejecutar sus pruebas. El ejecutor de pruebas Artisan proporciona informes de prueba detallados para facilitar el desarrollo y la depuración:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan test</code></pre>\n    <p>Cualquier argumento que se pueda pasar al <code>phpunit</code>comando también se puede pasar al <code>test</code>comando Artisan :</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan test <span class=\"token operator\">--</span>testsuite<span class=\"token operator\">=</span>Feature <span class=\"token operator\">--</span>stop<span class=\"token operator\">-</span>on<span class=\"token operator\">-</span>failure</code></pre>\n    \n    <h3 id=\"running-tests-in-parallel\"><span class=\"link\">Ejecución de pruebas en paralelo</span></h3>\n    <p>De forma predeterminada, Laravel y PHPUnit ejecutan sus pruebas secuencialmente dentro de un solo proceso. Sin embargo, puede reducir en gran medida la cantidad de tiempo que lleva ejecutar las pruebas si las ejecuta simultáneamente en varios procesos. Para comenzar, asegúrese de que su aplicación dependa de la versión <code>^5.3</code>o superior del <code>nunomaduro/collision</code>paquete. Luego, incluya la <code>--parallel</code>opción al ejecutar el <code>test</code>comando Artisan:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan test <span class=\"token operator\">--</span>parallel</code></pre>\n    <p>De forma predeterminada, Laravel creará tantos procesos como núcleos de CPU haya disponibles en su máquina. Sin embargo, puede ajustar la cantidad de procesos usando la <code>--processes</code>opción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan test <span class=\"token operator\">--</span>parallel <span class=\"token operator\">--</span>processes<span class=\"token operator\">=</span><span class=\"token number\">4</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Al ejecutar pruebas en paralelo, es posible que algunas opciones de PHPUnit (como <code>--do-not-cache-result</code>) no estén disponibles.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"parallel-testing-and-databases\"><span class=\"link\">Pruebas y bases de datos paralelas</span></h4>\n    <p>Laravel maneja automáticamente la creación y migración de una base de datos de prueba para cada proceso paralelo que ejecuta sus pruebas. Las bases de datos de prueba tendrán un sufijo con un token de proceso que es único por proceso. Por ejemplo, si tiene dos procesos de prueba paralelos, Laravel creará y usará <code>your_db_test_1</code>y <code>your_db_test_2</code>probará bases de datos.</p>\n    <p>De forma predeterminada, las bases de datos de prueba persisten entre llamadas al <code>test</code>comando Artisan para que puedan ser utilizadas nuevamente por <code>test</code>invocaciones posteriores . Sin embargo, puede volver a crearlos usando la <code>--recreate-databases</code>opción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan test <span class=\"token operator\">--</span>parallel <span class=\"token operator\">--</span>recreate<span class=\"token operator\">-</span>databases</code></pre>\n    \n    <h4 id=\"parallel-testing-hooks\"><span class=\"link\">Ganchos de prueba paralelos</span></h4>\n    <p>Ocasionalmente, es posible que deba preparar ciertos recursos utilizados por las pruebas de su aplicación para que puedan ser utilizados de forma segura por múltiples procesos de prueba.</p>\n    <p>Usando la <code>ParallelTesting</code>fachada, puede especificar el código que se ejecutará en <code>setUp</code>y <code>tearDown</code>de un proceso o caso de prueba. Los cierres dados reciben las variables <code>$token</code>y <code>$testCase</code>que contienen el token de proceso y el caso de prueba actual, respectivamente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Providers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Artisan</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>ParallelTesting</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>ServiceProvider</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AppServiceProvider</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceProvider</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        ParallelTesting<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">setUpProcess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$token</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// ...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        ParallelTesting<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">setUpTestCase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$token</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$testCase</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// ...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Executed when a test database is created...</span>\n        ParallelTesting<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">setUpTestDatabase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$database</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$token</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Artisan<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'db:seed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        ParallelTesting<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">tearDownTestCase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$token</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$testCase</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// ...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        ParallelTesting<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">tearDownProcess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$token</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// ...</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h4 id=\"accessing-the-parallel-testing-token\"><span class=\"link\">Acceder al token de prueba en paralelo</span></h4>\n    <p>Si desea acceder al \"token\" del proceso paralelo actual desde cualquier otra ubicación en el código de prueba de su aplicación, puede utilizar el <code>token</code>método. Este token es un identificador entero único para un proceso de prueba individual y puede usarse para segmentar recursos a través de procesos de prueba paralelos. Por ejemplo, Laravel agrega automáticamente este token al final de las bases de datos de prueba creadas por cada proceso de prueba paralelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$token</span> <span class=\"token operator\">=</span> ParallelTesting<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">token</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div>"
    },
    {
      "title": "Eloquent: serialización",
      "subtitle": "ELOQUENT",
      "contenido": "<div>\n    <h1>Eloquent: serialización</h1>    \n    <h2 id=\"introduction\"><span class=\"link\">Introducción</span></h2>\n    <p>Al crear API con Laravel, a menudo necesitará convertir sus modelos y relaciones en matrices o JSON. Eloquent incluye métodos convenientes para realizar estas conversiones, así como para controlar qué atributos se incluyen en la representación serializada de sus modelos.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Para obtener una forma aún más sólida de manejar la serialización JSON del modelo y la colección de Eloquent, consulte la documentación sobre los <span class=\"link\">recursos de la API de Eloquent</span> .</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"serializing-models-and-collections\"><span class=\"link\">Serializar modelos y colecciones</span></h2>\n    \n    <h3 id=\"serializing-to-arrays\"><span class=\"link\">Serializar en matrices</span></h3>\n    <p>Para convertir un modelo y sus <span class=\"link\">relaciones</span> cargadas en una matriz, debe usar el <code>toArray</code>método. Este método es recursivo, por lo que todos los atributos y todas las relaciones (incluidas las relaciones de relaciones) se convertirán en matrices:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'roles'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>attributesToArray</code>método puede usarse para convertir los atributos de un modelo en una matriz, pero no sus relaciones:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">attributesToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede convertir <span class=\"link\">colecciones</span> completas de modelos en matrices llamando al <code>toArray</code>método en la instancia de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"serializing-to-json\"><span class=\"link\">Serializando a JSON</span></h3>\n    <p>Para convertir un modelo a JSON, debe usar el <code>toJson</code>método. Por ejemplo <code>toArray</code>, el <code>toJson</code>método es recursivo, por lo que todos los atributos y relaciones se convertirán a JSON. También puede especificar cualquier opción de codificación JSON que sea <span class=\"link\">compatible con PHP</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">toJson</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON_PRETTY_PRINT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Alternativamente, puede convertir un modelo o colección a una cadena, que llamará automáticamente al <code>toJson</code>método en el modelo o colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Dado que los modelos y las colecciones se convierten a JSON cuando se convierten en una cadena, puede devolver objetos Eloquent directamente desde las rutas o controladores de su aplicación. Laravel serializará automáticamente sus modelos y colecciones Eloquent a JSON cuando sean devueltos desde rutas o controladores:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"relationships\"><span class=\"link\">Relaciones</span></h4>\n    <p>Cuando un modelo Eloquent se convierte a JSON, sus relaciones cargadas se incluirán automáticamente como atributos en el objeto JSON. Además, aunque los métodos de relación Eloquent se definen utilizando nombres de método \"camel case\", el atributo JSON de una relación será \"snake case\".</p>\n    \n    <h2 id=\"hiding-attributes-from-json\"><span class=\"link\">Ocultar atributos de JSON</span></h2>\n    <p>A veces, es posible que desee limitar los atributos, como las contraseñas, que se incluyen en la matriz de su modelo o en la representación JSON. Para hacerlo, agregue una <code>$hidden</code>propiedad a su modelo. En los atributos que se enumeran en la <code>$hidden</code>matriz de la propiedad no se incluirán en la representación serializada de su modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The attributes that should be hidden for arrays.\n     *\n     * @var array\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$hidden</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Para ocultar relaciones, agregue el nombre del método de la relación a la <code>$hidden</code>propiedad de su modelo Eloquent .</p></p></div>\n    </blockquote>\n    <p>Alternativamente, puede usar la <code>visible</code>propiedad para definir una \"lista permitida\" de atributos que deben incluirse en la matriz de su modelo y la representación JSON. Todos los atributos que no están presentes en la <code>$visible</code>matriz se ocultarán cuando el modelo se convierta en una matriz o JSON:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The attributes that should be visible in arrays.\n     *\n     * @var array\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$visible</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'first_name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'last_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h4 id=\"temporarily-modifying-attribute-visibility\"><span class=\"link\">Modificar temporalmente la visibilidad de los atributos</span></h4>\n    <p>Si desea que algunos atributos normalmente ocultos sean visibles en una instancia de modelo determinada, puede utilizar el <code>makeVisible</code>método. El <code>makeVisible</code>método devuelve la instancia del modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">makeVisible</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'attribute'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Del mismo modo, si desea ocultar algunos atributos que normalmente son visibles, puede utilizar el <code>makeHidden</code>método.</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">makeHidden</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'attribute'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"appending-values-to-json\"><span class=\"link\">Agregar valores a JSON</span></h2>\n    <p>Ocasionalmente, al convertir modelos en matrices o JSON, es posible que desee agregar atributos que no tienen una columna correspondiente en su base de datos. Para hacerlo, primero defina un <span class=\"link\">descriptor</span> de <span class=\"link\">acceso</span> para el valor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Determine if the user is an administrator.\n     *\n     * @return bool\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getIsAdminAttribute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">attributes</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'admin'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token single-quoted-string string\">'yes'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Después de crear el descriptor de acceso, agregue el nombre del atributo a la <code>appends</code>propiedad de su modelo. Tenga en cuenta que normalmente se hace referencia a los nombres de los atributos mediante su representación serializada de \"caso de serpiente\", aunque el método PHP del descriptor de acceso se define mediante \"caso de camello\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The accessors to append to the model's array form.\n     *\n     * @var array\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$appends</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'is_admin'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Una vez que el atributo se ha agregado a la <code>appends</code>lista, se incluirá tanto en la matriz del modelo como en las representaciones JSON. Los atributos de la <code>appends</code>matriz también respetarán la configuración de <code>visible</code>y <code>hidden</code>configurada en el modelo.</p>\n    \n    <h4 id=\"appending-at-run-time\"><span class=\"link\">Agregar en tiempo de ejecución</span></h4>\n    <p>En tiempo de ejecución, puede indicarle a una instancia de modelo que agregue atributos adicionales mediante el <code>append</code>método. O puede usar el <code>setAppends</code>método para anular toda la matriz de propiedades agregadas para una instancia de modelo determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'is_admin'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">setAppends</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'is_admin'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"date-serialization\"><span class=\"link\">Serialización de fecha</span></h2>\n    \n    <h4 id=\"customizing-the-default-date-format\"><span class=\"link\">Personalización del formato de fecha predeterminado</span></h4>\n    <p>Puede personalizar el formato de serialización predeterminado anulando el <code>serializeDate</code>método. Este método no afecta el formato de las fechas para su almacenamiento en la base de datos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Prepare a date for array / JSON serialization.\n *\n * @param  \\DateTimeInterface  $date\n * @return string\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">serializeDate</span><span class=\"token punctuation\">(</span>DateTimeInterface <span class=\"token variable\">$date</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$date</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Y-m-d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"customizing-the-date-format-per-attribute\"><span class=\"link\">Personalización del formato de fecha por atributo</span></h4>\n    <p>Puede personalizar el formato de serialización de los atributos de fecha individuales de Eloquent especificando el formato de fecha en las <span class=\"link\">declaraciones</span> del modelo :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">protected</span> <span class=\"token variable\">$casts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'birthday'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'date:Y-m-d'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'joined_at'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'datetime:Y-m-d H:00'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n</div>"
    },
    {
      "title": "Eloquent: mutadores y casting",
      "subtitle": "ELOQUENT",
      "contenido": "<div>\n    <h1>Eloquent: mutadores y casting</h1>    \n    <h2 id=\"introduction\"><span class=\"link\">Introducción</span></h2>\n    <p>Los accesores, mutadores y la conversión de atributos le permiten transformar los valores de los atributos de Eloquent cuando los recupera o los configura en instancias de modelo. Por ejemplo, es posible que desee utilizar el <span class=\"link\">cifrador Laravel</span> para cifrar un valor mientras está almacenado en la base de datos, y luego descifrar automáticamente el atributo cuando acceda a él en un modelo Eloquent. O, es posible que desee convertir una cadena JSON que está almacenada en su base de datos en una matriz cuando se accede a ella a través de su modelo Eloquent.</p>\n    \n    <h2 id=\"accessors-and-mutators\"><span class=\"link\">Accesores y mutadores</span></h2>\n    \n    <h3 id=\"defining-an-accessor\"><span class=\"link\">Definición de un accesor</span></h3>\n    <p>Un descriptor de acceso transforma un valor de atributo Eloquent cuando se accede a él. Para definir un descriptor de acceso, cree un <code>get{Attribute}Attribute</code>método en su modelo donde <code>{Attribute}</code>esté el nombre en mayúsculas y minúsculas de la columna a la que desea acceder.</p>\n    <p>En este ejemplo, definiremos un descriptor de acceso para el <code>first_name</code>atributo. Eloquent llamará automáticamente al descriptor de acceso cuando intente recuperar el valor del <code>first_name</code>atributo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get the user's first name.\n     *\n     * @param  string  $value\n     * @return string\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getFirstNameAttribute</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">ucfirst</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Como puede ver, el valor original de la columna se pasa al descriptor de acceso, lo que le permite manipular y devolver el valor. Para acceder al valor del descriptor de acceso, simplemente puede acceder al <code>first_name</code>atributo en una instancia de modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$firstName</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">first_name</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>No está limitado a interactuar con un solo atributo dentro de su descriptor de acceso. También puede utilizar descriptores de acceso para devolver nuevos valores calculados a partir de atributos existentes:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the user's full name.\n *\n * @return string\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getFullNameAttribute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token double-quoted-string string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">first_name</span><span class=\"token punctuation\">}</span></span> <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">last_name</span><span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si desea que estos valores calculados se agreguen a las representaciones de matriz / JSON de su modelo, <span class=\"link\">deberá agregarlos</span> .</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"defining-a-mutator\"><span class=\"link\">Definición de un mutador</span></h3>\n    <p>Un mutador transforma un valor de atributo Eloquent cuando se establece. Para definir un mutador, defina un <code>set{Attribute}Attribute</code>método en su modelo donde <code>{Attribute}</code>está el nombre en mayúsculas y minúsculas \"studly\" de la columna a la que desea acceder.</p>\n    <p>Definamos un mutador para el <code>first_name</code>atributo. Este mutador se llamará automáticamente cuando intentemos establecer el valor del <code>first_name</code>atributo en el modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Set the user's first name.\n     *\n     * @param  string  $value\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setFirstNameAttribute</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">attributes</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'first_name'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">strtolower</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>El mutador recibirá el valor que se establece en el atributo, lo que le permitirá manipular el valor y establecer el valor manipulado en la <code>$attributes</code>propiedad interna del modelo Eloquent . Para usar nuestro mutador, solo necesitamos establecer el <code>first_name</code>atributo en un modelo Eloquent:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">first_name</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'Sally'</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>En este ejemplo, la <code>setFirstNameAttribute</code>función se llamará con el valor <code>Sally</code>. Luego, el mutador aplicará la <code>strtolower</code>función al nombre y establecerá su valor resultante en la <code>$attributes</code>matriz interna .</p>\n    \n    <h2 id=\"attribute-casting\"><span class=\"link\">Casting de atributos</span></h2>\n    <p>La conversión de atributos proporciona una funcionalidad similar a los descriptores de acceso y mutadores sin necesidad de que defina ningún método adicional en su modelo. En cambio, la <code>$casts</code>propiedad de su modelo proporciona un método conveniente para convertir atributos en tipos de datos comunes.</p>\n    <p>La <code>$casts</code>propiedad debe ser una matriz donde la clave es el nombre del atributo que se está lanzando y el valor es el tipo al que desea convertir la columna. Los tipos de elenco admitidos son:</p>\n    <div class=\"content-list\">\n        <ul>\n            <li><code>array</code></li>\n            <li><code>boolean</code></li>\n            <li><code>collection</code></li>\n            <li><code>date</code></li>\n            <li><code>datetime</code></li>\n            <li><code>immutable_date</code></li>\n            <li><code>immutable_datetime</code></li>\n            <li><code>decimal:&lt;digits&gt;</code></li>\n            <li><code>double</code></li>\n            <li><code>encrypted</code></li>\n            <li><code>encrypted:array</code></li>\n            <li><code>encrypted:collection</code></li>\n            <li><code>encrypted:object</code></li>\n            <li><code>float</code></li>\n            <li><code>integer</code></li>\n            <li><code>object</code></li>\n            <li><code>real</code></li>\n            <li><code>string</code></li>\n            <li><code>timestamp</code>\n            </li>\n        </ul>\n    </div>\n    <p>Para demostrar la conversión de atributos, enviemos el <code>is_admin</code>atributo, que se almacena en nuestra base de datos como un número entero ( <code>0</code>o <code>1</code>) a un valor booleano:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The attributes that should be cast.\n     *\n     * @var array\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$casts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'is_admin'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'boolean'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Después de definir la conversión, el <code>is_admin</code>atributo siempre se convertirá en un booleano cuando acceda a él, incluso si el valor subyacente se almacena en la base de datos como un número entero:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> App\\<span class=\"token package\">Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">is_admin</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Si necesita agregar una nueva conversión temporal en tiempo de ejecución, puede usar el <code>mergeCasts</code>método. Estas definiciones de molde se agregarán a cualquiera de los modelos ya definidos en el modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">mergeCasts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'is_admin'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'integer'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'options'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'object'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Los atributos que lo sean <code>null</code>no se emitirán. Además, nunca debe definir un elenco (o un atributo) que tenga el mismo nombre que una relación.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"array-and-json-casting\"><span class=\"link\">Conversión de matrices y JSON</span></h3>\n    <p>La <code>array</code>conversión es particularmente útil cuando se trabaja con columnas que se almacenan como JSON serializado. Por ejemplo, si su base de datos tiene un tipo de campo <code>JSON</code>o <code>TEXT</code>que contiene JSON serializado, agregar la <code>array</code>conversión a ese atributo deserializará automáticamente el atributo a una matriz PHP cuando acceda a él en su modelo Eloquent:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The attributes that should be cast.\n     *\n     * @var array\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$casts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'options'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'array'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Una vez que se define el reparto, puede acceder al <code>options</code>atributo y se deserializará automáticamente desde JSON en una matriz PHP. Cuando establece el valor del <code>options</code>atributo, la matriz dada se serializará automáticamente de nuevo en JSON para su almacenamiento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$options</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">options</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$options</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">options</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$options</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Para actualizar un solo campo de un atributo JSON con una sintaxis más concisa, puede usar el <code>-&gt;</code>operador al llamar al <code>update</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'options-&gt;key'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"array-object-and-collection-casting\"><span class=\"link\">Casting de colección y objetos de matriz</span></h4>\n    <p>Aunque el <code>array</code>molde estándar es suficiente para muchas aplicaciones, tiene algunas desventajas. Dado que la <code>array</code>conversión devuelve un tipo primitivo, no es posible mutar un desplazamiento de la matriz directamente. Por ejemplo, el siguiente código desencadenará un error de PHP:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">options</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'key'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Para resolver esto, Laravel ofrece un <code>AsArrayObject</code>elenco que transmite su atributo JSON a una clase <span class=\"link\">ArrayObject</span> . Esta función se implementa utilizando la implementación de conversión <span class=\"link\">personalizada</span> de Laravel , que permite a Laravel almacenar en caché de manera inteligente y transformar el objeto mutado de manera que las compensaciones individuales puedan modificarse sin desencadenar un error de PHP. Para usar el <code>AsArrayObject</code>elenco, simplemente asígnelo a un atributo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Casts<span class=\"token punctuation\">\\</span>AsArrayObject</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * The attributes that should be cast.\n *\n * @var array\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$casts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'options'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> AsArrayObject<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>De manera similar, Laravel ofrece un <code>AsCollection</code>elenco que transmite su atributo JSON a una instancia de Laravel <span class=\"link\">Collection</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Casts<span class=\"token punctuation\">\\</span>AsCollection</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * The attributes that should be cast.\n *\n * @var array\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$casts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'options'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> AsCollection<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"date-casting\"><span class=\"link\">Casting de fecha</span></h3>\n    <p>De forma predeterminada, Eloquent convertirá las columnas <code>created_at</code>y <code>updated_at</code>a instancias de <span class=\"link\">Carbon</span> , lo que amplía la <code>DateTime</code>clase PHP y proporciona una variedad de métodos útiles. Puede lanzar atributos de fecha adicionales definiendo conversiones de fecha adicionales dentro de la <code>$cast</code>matriz de propiedades de su modelo . Normalmente, las fechas deben emitirse utilizando los tipos de reparto <code>datetime</code>o <code>immutable_datetime</code>.</p>\n    <p>Al definir una <code>date</code>o <code>datetime</code>fundido, también puede especificar el formato de la fecha. Este formato se utilizará cuando el <span class=\"link\">modelo se serialice en una matriz o JSON</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The attributes that should be cast.\n *\n * @var array\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$casts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'created_at'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'datetime:Y-m-d'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Cuando una columna se convierte como una fecha, puede establecer el valor de atributo del modelo correspondiente a una marca de tiempo UNIX, una cadena de fecha ( <code>Y-m-d</code>), una cadena de fecha y hora o una instancia <code>DateTime</code>/ <code>Carbon</code>. El valor de la fecha se convertirá y almacenará correctamente en su base de datos.</p>\n    <p>Puede personalizar el formato de serialización predeterminado para todas las fechas de su modelo definiendo un <code>serializeDate</code>método en su modelo. Este método no afecta el formato de las fechas para su almacenamiento en la base de datos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Prepare a date for array / JSON serialization.\n *\n * @param  \\DateTimeInterface  $date\n * @return string\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">serializeDate</span><span class=\"token punctuation\">(</span>DateTimeInterface <span class=\"token variable\">$date</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$date</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Y-m-d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Para especificar el formato que se debe usar cuando se almacenan las fechas de un modelo dentro de su base de datos, debe definir una <code>$dateFormat</code>propiedad en su modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The storage format of the model's date columns.\n *\n * @var string\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$dateFormat</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'U'</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"date-casting-and-timezones\"><span class=\"link\">Transmisión de fecha, serialización y zonas horarias</span></h4>\n    <p>Por defecto, las <code>date</code>y <code>datetime</code>los moldes serializarán fechas a la norma ISO-8601 cadena de fecha UTC ( <code>1986-05-28T21:05:54.000000Z</code>), independientemente de la zona horaria especificada en la solicitud de <code>timezone</code>opción de configuración. Se le recomienda encarecidamente que utilice siempre este formato de serialización, así como que almacene las fechas de su aplicación en la zona horaria UTC al no cambiar la <code>timezone</code>opción de configuración de su aplicación de su <code>UTC</code>valor predeterminado . El uso constante de la zona horaria UTC en toda su aplicación proporcionará el máximo nivel de interoperabilidad con otras bibliotecas de manipulación de fechas escritas en PHP y JavaScript.</p>\n    <p>Si se aplica un formato personalizado a la transmisión <code>date</code>o <code>datetime</code>, como, por ejemplo <code>datetime:Y-m-d H:i:s</code>, la zona horaria interna de la instancia de Carbon se utilizará durante la serialización de la fecha. Normalmente, esta será la zona horaria especificada en la <code>timezone</code>opción de configuración de su aplicación .</p>\n    \n    <h3 id=\"encrypted-casting\"><span class=\"link\">Transmisión encriptada</span></h3>\n    <p>El <code>encrypted</code>elenco cifrará el valor de atributo de un modelo utilizando <span class=\"link\">las</span> funciones de <span class=\"link\">cifrado</span> integradas de Laravel . Además, las <code>encrypted:array</code>, <code>encrypted:collection</code>y <code>encrypted:object</code>moldes funcionan igual que sus homólogos no cifradas; sin embargo, como era de esperar, el valor subyacente se cifra cuando se almacena en su base de datos.</p>\n    <p>Como la longitud final del texto cifrado no es predecible y es más larga que su contraparte de texto sin formato, asegúrese de que la columna de la base de datos asociada sea del <code>TEXT</code>tipo o más grande. Además, dado que los valores están cifrados en la base de datos, no podrá consultar ni buscar valores de atributos cifrados.</p>\n    \n    <h3 id=\"query-time-casting\"><span class=\"link\">Conversión de tiempo de consulta</span></h3>\n    <p>A veces, es posible que deba aplicar conversiones mientras ejecuta una consulta, como al seleccionar un valor sin procesar de una tabla. Por ejemplo, considere la siguiente consulta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'users.*'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'last_posted_at'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">selectRaw</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'MAX(created_at)'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereColumn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user_id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'users.id'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>last_posted_at</code>atributo de los resultados de esta consulta será una cadena simple. Sería maravilloso si pudiéramos aplicar una <code>datetime</code>conversión a este atributo al ejecutar la consulta. Afortunadamente, podemos lograr esto usando el <code>withCasts</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'users.*'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'last_posted_at'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">selectRaw</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'MAX(created_at)'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereColumn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user_id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'users.id'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withCasts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'last_posted_at'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'datetime'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"custom-casts\"><span class=\"link\">Casts personalizados</span></h2>\n    <p>Laravel tiene una variedad de tipos de elenco útiles incorporados; sin embargo, es posible que ocasionalmente deba definir sus propios tipos de elenco. Puede lograr esto definiendo una clase que implemente la <code>CastsAttributes</code>interfaz.</p>\n    <p>Las clases que implementan esta interfaz deben definir un método <code>get</code>y <code>set</code>. El <code>get</code>método es responsable de transformar un valor sin procesar de la base de datos en un valor de conversión, mientras que el <code>set</code>método debe transformar un valor de conversión en un valor sin procesar que se pueda almacenar en la base de datos. Como ejemplo, volveremos a implementar el <code>json</code>tipo de conversión integrado como un tipo de conversión personalizado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Casts</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>CastsAttributes</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Json</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CastsAttributes</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Cast the given value.\n     *\n     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n     * @param  string  $key\n     * @param  mixed  $value\n     * @param  array  $attributes\n     * @return array\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$model</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">json_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Prepare the given value for storage.\n     *\n     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n     * @param  string  $key\n     * @param  array  $value\n     * @param  array  $attributes\n     * @return string\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$model</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Una vez que haya definido un tipo de molde personalizado, puede adjuntarlo a un atributo de modelo usando su nombre de clase:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Casts<span class=\"token punctuation\">\\</span>Json</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The attributes that should be cast.\n     *\n     * @var array\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$casts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'options'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Json<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h3 id=\"value-object-casting\"><span class=\"link\">Conversión de objetos de valor</span></h3>\n    <p>No estás limitado a lanzar valores a tipos primitivos. También puede transmitir valores a objetos. La definición de conversiones personalizadas que transmiten valores a objetos es muy similar a la conversión a tipos primitivos; sin embargo, el <code>set</code>método debe devolver una matriz de pares clave / valor que se utilizará para establecer valores almacenables sin procesar en el modelo.</p>\n    <p>Como ejemplo, definiremos una clase de conversión personalizada que convierte múltiples valores de modelo en un <code>Address</code>objeto de valor único . Asumiremos que el <code>Address</code>valor tiene dos propiedades públicas: <code>lineOne</code>y <code>lineTwo</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Casts</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Address</span> <span class=\"token keyword\">as</span> AddressModel<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>CastsAttributes</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">InvalidArgumentException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Address</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CastsAttributes</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Cast the given value.\n     *\n     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n     * @param  string  $key\n     * @param  mixed  $value\n     * @param  array  $attributes\n     * @return \\App\\Models\\Address\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$model</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AddressModel</span><span class=\"token punctuation\">(</span>\n            <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'address_line_one'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'address_line_two'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Prepare the given value for storage.\n     *\n     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n     * @param  string  $key\n     * @param  \\App\\Models\\Address  $value\n     * @param  array  $attributes\n     * @return array\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$model</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token variable\">$value</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">AddressModel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'The given value is not an Address instance.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'address_line_one'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$value</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">lineOne</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'address_line_two'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$value</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">lineTwo</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Al convertir a objetos de valor, cualquier cambio realizado en el objeto de valor se sincronizará automáticamente con el modelo antes de que se guarde el modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">address</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">lineOne</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'Updated Address Value'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si planea serializar sus modelos Eloquent que contienen objetos de valor en JSON o matrices, debe implementar las interfaces <code>Illuminate\\Contracts\\Support\\Arrayable</code>y <code>JsonSerializable</code>en el objeto de valor.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"array-json-serialization\"><span class=\"link\">Serialización de matriz / JSON</span></h3>\n    <p>Cuando un modelo Eloquent se convierte en una matriz o JSON mediante los métodos <code>toArray</code>y <code>toJson</code>, los objetos de valor de conversión personalizados normalmente se serializarán, siempre y cuando implementen las interfaces <code>Illuminate\\Contracts\\Support\\Arrayable</code>y <code>JsonSerializable</code>. Sin embargo, al usar objetos de valor proporcionados por bibliotecas de terceros, es posible que no tenga la capacidad de agregar estas interfaces al objeto.</p>\n    <p>Por lo tanto, puede especificar que su clase de conversión personalizada será responsable de serializar el objeto de valor. Para hacerlo, su clase de conversión personalizada debe implementar la <code>Illuminate\\Contracts\\Database\\Eloquent\\SerializesCastableAttributes</code>interfaz. Esta interfaz indica que su clase debe contener un <code>serialize</code>método que debe devolver la forma serializada de su objeto de valor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the serialized representation of the value.\n *\n * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n * @param  string  $key\n * @param  mixed  $value\n * @param  array  $attributes\n * @return mixed\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$model</span><span class=\"token punctuation\">,</span> string <span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span> <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"inbound-casting\"><span class=\"link\">Casting entrante</span></h3>\n    <p>En ocasiones, es posible que deba escribir una conversión personalizada que solo transforme los valores que se establecen en el modelo y no realiza ninguna operación cuando se recuperan atributos del modelo. Un ejemplo clásico de un elenco solo entrante es un elenco \"hash\". Las conversiones personalizadas solo entrantes deben implementar la <code>CastsInboundAttributes</code>interfaz, que solo requiere <code>set</code>que se defina un método.</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Casts</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>CastsInboundAttributes</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Hash</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CastsInboundAttributes</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The hashing algorithm.\n     *\n     * @var string\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$algorithm</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Create a new cast class instance.\n     *\n     * @param  string|null  $algorithm\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$algorithm</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">algorithm</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$algorithm</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Prepare the given value for storage.\n     *\n     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n     * @param  string  $key\n     * @param  array  $value\n     * @param  array  $attributes\n     * @return string\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$model</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">is_null</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">algorithm</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">?</span> <span class=\"token function\">bcrypt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">:</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">algorithm</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h3 id=\"cast-parameters\"><span class=\"link\">Parámetros de fundición</span></h3>\n    <p>Al adjuntar una conversión personalizada a un modelo, los parámetros de conversión se pueden especificar separándolos del nombre de la clase usando un <code>:</code>carácter y delimitando múltiples parámetros por comas. Los parámetros se pasarán al constructor de la clase de conversión:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The attributes that should be cast.\n *\n * @var array\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$casts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'secret'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Hash<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">':sha256'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"castables\"><span class=\"link\">Castables</span></h3>\n    <p>Es posible que desee permitir que los objetos de valor de su aplicación definan sus propias clases de reparto personalizadas. En lugar de adjuntar la clase de conversión personalizada a su modelo, alternativamente puede adjuntar una clase de objeto de valor que implemente la <code>Illuminate\\Contracts\\Database\\Eloquent\\Castable</code>interfaz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Address</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$casts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'address'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Address<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Los objetos que implementan la <code>Castable</code>interfaz deben definir un <code>castUsing</code>método que devuelva el nombre de clase de la clase de lanzador personalizado que es responsable de la transmisión hacia y desde la <code>Castable</code>clase:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Castable</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Casts<span class=\"token punctuation\">\\</span>Address</span> <span class=\"token keyword\">as</span> AddressCast<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Address</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Castable</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get the name of the caster class to use when casting from / to this cast target.\n     *\n     * @param  array  $arguments\n     * @return string\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">castUsing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$arguments</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> AddressCast<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Al usar <code>Castable</code>clases, aún puede proporcionar argumentos en la <code>$casts</code>definición. Los argumentos se pasarán al <code>castUsing</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Address</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$casts</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'address'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Address<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">':argument'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"anonymous-cast-classes\"><span class=\"link\">Castables y clases de reparto anónimo</span></h4>\n    <p>Combinando \"convertibles\" con las <span class=\"link\">clases anónimas</span> de PHP , puede definir un objeto de valor y su lógica de conversión como un solo objeto convertible. Para lograr esto, devuelva una clase anónima del <code>castUsing</code>método de su objeto de valor . La clase anónima debería implementar la <code>CastsAttributes</code>interfaz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Castable</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>CastsAttributes</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Address</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Castable</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n\n    <span class=\"token comment\">/**\n     * Get the caster class to use when casting from / to this cast target.\n     *\n     * @param  array  $arguments\n     * @return object|string\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">castUsing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$arguments</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">class</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CastsAttributes</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$model</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Address</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'address_line_one'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'address_line_two'</span><span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$model</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$attributes</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token single-quoted-string string\">'address_line_one'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$value</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">lineOne</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token single-quoted-string string\">'address_line_two'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$value</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">lineTwo</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n</div>"
    },
    {
      "title": "Eloquent: Colecciones",
      "subtitle": "ELOQUENT",
      "contenido": "<div>\n    <h1></h1>\n    <ul>\n        <li><span class=\"link\">Introducción</span></li>\n        <li><span class=\"link\">Métodos disponibles</span></li>\n        <li><span class=\"link\">Colecciones personalizadas</span></li>\n    </ul>\n    \n    <h2 id=\"introduction\"><span class=\"link\">Introducción</span></h2>\n    <p>Todos los métodos Eloquent que devuelven más de un resultado de modelo devolverán instancias de la <code>Illuminate\\Database\\Eloquent\\Collection</code>clase, incluidos los resultados recuperados a través del <code>get</code>método o accedidos a través de una relación. El objeto de colección Eloquent extiende la <span class=\"link\">colección base</span> de Laravel , por lo que naturalmente hereda docenas de métodos utilizados para trabajar con fluidez con la matriz subyacente de modelos Eloquent. ¡Asegúrese de revisar la documentación de la colección de Laravel para aprender todo sobre estos métodos útiles!</p>\n    <p>Todas las colecciones también sirven como iteradores, lo que le permite recorrerlas como si fueran simples matrices PHP:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Sin embargo, como se mencionó anteriormente, las colecciones son mucho más poderosas que las matrices y exponen una variedad de operaciones de mapa / reducción que se pueden encadenar mediante una interfaz intuitiva. Por ejemplo, podemos eliminar todos los modelos inactivos y luego recopilar el nombre de cada usuario restante:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$names</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">active</span> <span class=\"token operator\">===</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"eloquent-collection-conversion\"><span class=\"link\">Conversión de colección elocuente</span></h4>\n    <p>Aunque la mayoría de métodos de recolección Elocuentes devuelven una nueva instancia de una colección elocuente, la <code>collapse</code>, <code>flatten</code>, <code>flip</code>, <code>keys</code>, <code>pluck</code>, y <code>zip</code>métodos devuelven un <span class=\"link\">colección base</span> instancia. Asimismo, si una <code>map</code>operación devuelve una colección que no contiene ningún modelo Eloquent, se convertirá en una instancia de colección base.</p>\n    \n    <h2 id=\"available-methods\"><span class=\"link\">Métodos disponibles</span></h2>\n    <p>Todas las colecciones de Eloquent amplían el objeto de <span class=\"link\">colección</span> base de <span class=\"link\">Laravel</span> ; por lo tanto, heredan todos los métodos poderosos proporcionados por la clase de colección base.</p>\n    <p>Además, la <code>Illuminate\\Database\\Eloquent\\Collection</code>clase proporciona un superconjunto de métodos para ayudarlo a administrar sus colecciones de modelos. La mayoría de los métodos devuelven <code>Illuminate\\Database\\Eloquent\\Collection</code>instancias; sin embargo, algunos métodos, como <code>modelKeys</code>, devuelven una <code>Illuminate\\Support\\Collection</code>instancia.</p>\n    <style>\n    #collection-method-list > p {\n        column-count: 1; -moz-column-count: 1; -webkit-column-count: 1;\n        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n    }\n\n    #collection-method-list a {\n        display: block;\n    }\n</style>\n    <div id=\"collection-method-list\">\n        <p><span class=\"link\">contiene</span>\n            <span class=\"link\">diff</span>\n            <span class=\"link\">excepto</span>\n            <span class=\"link\">encontrar</span>\n            <span class=\"link\">Fresco</span>\n            <span class=\"link\">intersecarse</span>\n            <span class=\"link\">carga</span>\n            <span class=\"link\">loadMissing</span>\n            <span class=\"link\">modelKeys</span>\n            <span class=\"link\">Hacer visible</span>\n            <span class=\"link\">makeHidden</span>\n            <span class=\"link\">solamente</span>\n            <span class=\"link\">para consultar</span>\n            <span class=\"link\">único</span></p>\n    </div>\n    \n    <h4 id=\"method-contains\"><span class=\"link\"><code>contains($key, $operator = null, $value = null)</code></span></h4>\n    <p>El <code>contains</code>método se puede utilizar para determinar si la colección contiene una instancia de modelo determinada. Este método acepta una clave principal o una instancia de modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"method-diff\"><span class=\"link\"><code>diff($items)</code></span></h4>\n    <p>El <code>diff</code>método devuelve todos los modelos que no están presentes en la colección dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">whereIn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"method-except\"><span class=\"link\"><code>except($keys)</code></span></h4>\n    <p>El <code>except</code>método devuelve todos los modelos que no tienen las claves primarias dadas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">except</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"method-find\" class=\"first-collection-method\"><span class=\"link\"><code>find($key)</code></span></h4>\n    <p>El <code>find</code>método devuelve el modelo que tiene una clave principal que coincide con la clave dada. Si <code>$key</code>es una instancia de modelo, <code>find</code>intentará devolver un modelo que coincida con la clave principal. Si <code>$key</code>es una matriz de claves, <code>find</code>devolverá todos los modelos que tengan una clave principal en la matriz dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"method-fresh\"><span class=\"link\"><code>fresh($with = [])</code></span></h4>\n    <p>El <code>fresh</code>método recupera una instancia nueva de cada modelo de la colección de la base de datos. Además, cualquier relación especificada se cargará con entusiasmo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">fresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">fresh</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comments'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"method-intersect\"><span class=\"link\"><code>intersect($items)</code></span></h4>\n    <p>El <code>intersect</code>método devuelve todos los modelos que también están presentes en la colección dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">intersect</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">whereIn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"method-load\"><span class=\"link\"><code>load($relations)</code></span></h4>\n    <p>El <code>load</code>método ansioso carga las relaciones dadas para todos los modelos de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'comments'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'posts'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comments.author'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"method-loadMissing\"><span class=\"link\"><code>loadMissing($relations)</code></span></h4>\n    <p>El <code>loadMissing</code>método ansioso carga las relaciones dadas para todos los modelos de la colección si las relaciones aún no están cargadas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">loadMissing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'comments'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'posts'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">loadMissing</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comments.author'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"method-modelKeys\"><span class=\"link\"><code>modelKeys()</code></span></h4>\n    <p>El <code>modelKeys</code>método devuelve las claves primarias para todos los modelos de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">modelKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [1, 2, 3, 4, 5]</span></code></pre>\n    \n    <h4 id=\"method-makeVisible\"><span class=\"link\"><code>makeVisible($attributes)</code></span></h4>\n    <p>El <code>makeVisible</code>método <span class=\"link\">hace visibles los atributos</span> que normalmente están \"ocultos\" en cada modelo de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">makeVisible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'address'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'phone_number'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"method-makeHidden\"><span class=\"link\"><code>makeHidden($attributes)</code></span></h4>\n    <p>El <code>makeHidden</code>método <span class=\"link\">oculta atributos</span> que normalmente son \"visibles\" en cada modelo de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">makeHidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'address'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'phone_number'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"method-only\"><span class=\"link\"><code>only($keys)</code></span></h4>\n    <p>El <code>only</code>método devuelve todos los modelos que tienen las claves primarias dadas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">only</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"method-toquery\"><span class=\"link\"><code>toQuery()</code></span></h4>\n    <p>El <code>toQuery</code>método devuelve una instancia del generador de consultas Eloquent que contiene una <code>whereIn</code>restricción en las claves primarias del modelo de colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'status'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'VIP'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">toQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'status'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Administrator'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"method-unique\"><span class=\"link\"><code>unique($key = null, $strict = false)</code></span></h4>\n    <p>El <code>unique</code>método devuelve todos los modelos únicos de la colección. Se eliminan todos los modelos del mismo tipo con la misma clave principal que otro modelo de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"custom-collections\"><span class=\"link\">Colecciones personalizadas</span></h2>\n    <p>Si desea utilizar un <code>Collection</code>objeto personalizado al interactuar con un modelo determinado, puede definir un <code>newCollection</code>método en su modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>UserCollection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Create a new Eloquent Collection instance.\n     *\n     * @param  array  $models\n     * @return \\Illuminate\\Database\\Eloquent\\Collection\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">newCollection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$models</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserCollection</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$models</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Una vez que haya definido un <code>newCollection</code>método, recibirá una instancia de su colección personalizada cada vez que Eloquent normalmente devolvería una <code>Illuminate\\Database\\Eloquent\\Collection</code>instancia. Si desea utilizar una colección personalizada para cada modelo en su aplicación, debe definir el <code>newCollection</code>método en una clase de modelo base que se extiende a todos los modelos de su aplicación.</p>\n</div>"
    },
    {
      "title": "Eloquent: Relaciones",
      "subtitle": "ELOQUENT",
      "contenido": "<div>\n    <h1>Eloquent: Relaciones</h1>\n    <ul>\n        <li><span class=\"link\">Introducción</span></li>\n        <li><span class=\"link\">Definición de relaciones</span>\n            <ul>\n                <li><span class=\"link\">Doce y cincuenta y nueve de la noche</span></li>\n                <li><span class=\"link\">Uno a muchos</span></li>\n                <li><span class=\"link\">Uno a muchos (inverso) / pertenece a</span></li>\n                <li><span class=\"link\">Tiene uno de muchos</span></li>\n                <li><span class=\"link\">Tiene uno a través</span></li>\n                <li><span class=\"link\">Tiene muchos a través</span></li>\n            </ul></li>\n        <li><span class=\"link\">Muchas a muchas relaciones</span>\n            <ul>\n                <li><span class=\"link\">Recuperar columnas de tabla intermedias</span></li>\n                <li><span class=\"link\">Filtrar consultas a través de columnas de tabla intermedias</span></li>\n                <li><span class=\"link\">Definición de modelos personalizados de tablas intermedias</span></li>\n            </ul></li>\n        <li><span class=\"link\">Relaciones polimórficas</span>\n            <ul>\n                <li><span class=\"link\">Doce y cincuenta y nueve de la noche</span></li>\n                <li><span class=\"link\">Uno a muchos</span></li>\n                <li><span class=\"link\">Uno de tantos</span></li>\n                <li><span class=\"link\">Muchos a muchos</span></li>\n                <li><span class=\"link\">Tipos polimórficos personalizados</span></li>\n            </ul></li>\n        <li><span class=\"link\">Relaciones dinámicas</span></li>\n        <li><span class=\"link\">Consultar relaciones</span>\n            <ul>\n                <li><span class=\"link\">Métodos de relación vs. Propiedades dinámicas</span></li>\n                <li><span class=\"link\">Consultando la existencia de la relación</span></li>\n                <li><span class=\"link\">Consulta de ausencia de relación</span></li>\n                <li><span class=\"link\">Consultar Morph a relaciones</span></li>\n            </ul></li>\n        <li><span class=\"link\">Agregar modelos relacionados</span>\n            <ul>\n                <li><span class=\"link\">Contando modelos relacionados</span></li>\n                <li><span class=\"link\">Otras funciones agregadas</span></li>\n                <li><span class=\"link\">Contando modelos relacionados en Morph a relaciones</span></li>\n            </ul></li>\n        <li><span class=\"link\">Carga ansiosa</span>\n            <ul>\n                <li><span class=\"link\">Restringir cargas impacientes</span></li>\n                <li><span class=\"link\">Carga impaciente perezosa</span></li>\n                <li><span class=\"link\">Prevención de la carga diferida</span></li>\n            </ul></li>\n        <li><span class=\"link\">Insertar y actualizar modelos relacionados</span>\n            <ul>\n                <li><span class=\"link\">El <code>save</code>método</span></li>\n                <li><span class=\"link\">El <code>create</code>método</span></li>\n                <li><span class=\"link\">Pertenece a las relaciones</span></li>\n                <li><span class=\"link\">Muchas a muchas relaciones</span></li>\n            </ul></li>\n        <li><span class=\"link\">Tocar las marcas de tiempo de los padres</span></li>\n    </ul>\n    \n    <h2 id=\"introduction\"><span class=\"link\">Introducción</span></h2>\n    <p>Las tablas de la base de datos suelen estar relacionadas entre sí. Por ejemplo, una publicación de blog puede tener muchos comentarios o un pedido puede estar relacionado con el usuario que lo realizó. Eloquent facilita la gestión y el trabajo con estas relaciones, y apoya una variedad de relaciones comunes:</p>\n    <div class=\"content-list\">\n        <ul>\n            <li><span class=\"link\">Doce y cincuenta y nueve de la noche</span></li>\n            <li><span class=\"link\">Uno a muchos</span></li>\n            <li><span class=\"link\">Muchos a muchos</span></li>\n            <li><span class=\"link\">Tiene uno a través</span></li>\n            <li><span class=\"link\">Tiene muchos a través</span></li>\n            <li><span class=\"link\">Uno a uno (polimórfico)</span></li>\n            <li><span class=\"link\">Uno a muchos (polimórfico)</span></li>\n            <li><span class=\"link\">Muchos a muchos (polimórfico)</span></li>\n        </ul>\n    </div>\n    \n    <h2 id=\"defining-relationships\"><span class=\"link\">Definición de relaciones</span></h2>\n    <p>Las relaciones elocuentes se definen como métodos en sus clases modelo elocuentes. Dado que las relaciones también sirven como poderosos <span class=\"link\">constructores de consultas</span> , definir las relaciones como métodos proporciona potentes capacidades de encadenamiento y consulta de métodos. Por ejemplo, podemos encadenar restricciones de consulta adicionales en esta <code>posts</code>relación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">posts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Pero, antes de sumergirnos demasiado en el uso de las relaciones, aprendamos a definir cada tipo de relación respaldada por Eloquent.</p>\n    \n    <h3 id=\"one-to-one\"><span class=\"link\">Doce y cincuenta y nueve de la noche</span></h3>\n    <p>Una relación de uno a uno es un tipo muy básico de relación de base de datos. Por ejemplo, un <code>User</code>modelo puede estar asociado con un <code>Phone</code>modelo. Para definir esta relación, colocaremos un <code>phone</code>método en el <code>User</code>modelo. El <code>phone</code>método debe llamar al <code>hasOne</code>método y devolver su resultado. El <code>hasOne</code>método está disponible para su modelo a través de la <code>Illuminate\\Database\\Eloquent\\Model</code>clase base del modelo :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get the phone associated with the user.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">phone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasOne</span><span class=\"token punctuation\">(</span>Phone<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>El primer argumento que se pasa al <code>hasOne</code>método es el nombre de la clase de modelo relacionada. Una vez que se define la relación, podemos recuperar el registro relacionado usando las propiedades dinámicas de Eloquent. Las propiedades dinámicas le permiten acceder a métodos de relación como si fueran propiedades definidas en el modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$phone</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">phone</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Eloquent determina la clave externa de la relación en función del nombre del modelo principal. En este caso, <code>Phone</code>se asume automáticamente que el modelo tiene una <code>user_id</code>clave externa. Si desea anular esta convención, puede pasar un segundo argumento al <code>hasOne</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasOne</span><span class=\"token punctuation\">(</span>Phone<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'foreign_key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Además, Eloquent asume que la clave externa debe tener un valor que coincida con la columna de clave principal del padre. En otras palabras, Eloquent buscará el valor de la <code>id</code>columna del usuario en la <code>user_id</code>columna del <code>Phone</code>registro. Si desea que la relación use un valor de clave principal que no sea <code>id</code>la <code>$primaryKey</code>propiedad de su modelo , puede pasar un tercer argumento al <code>hasOne</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasOne</span><span class=\"token punctuation\">(</span>Phone<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'foreign_key'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'local_key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"one-to-one-defining-the-inverse-of-the-relationship\"><span class=\"link\">Definiendo lo inverso de la relación</span></h4>\n    <p>Entonces, podemos acceder al <code>Phone</code>modelo desde nuestro <code>User</code>modelo. A continuación, definamos una relación en el <code>Phone</code>modelo que nos permitirá acceder al usuario propietario del teléfono. Podemos definir la inversa de una <code>hasOne</code>relación usando el <code>belongsTo</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Phone</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get the user that owns the phone.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Al invocar el <code>user</code>método, Eloquent intentará encontrar un <code>User</code>modelo que tenga una <code>id</code>que coincida con la <code>user_id</code>columna del <code>Phone</code>modelo.</p>\n    <p>Eloquent determina el nombre de la clave externa examinando el nombre del método de relación y agregando como sufijo el nombre del método <code>_id</code>. Entonces, en este caso, Eloquent asume que el <code>Phone</code>modelo tiene una <code>user_id</code>columna. Sin embargo, si la clave externa del <code>Phone</code>modelo no lo es <code>user_id</code>, puede pasar un nombre de clave personalizada como segundo argumento del <code>belongsTo</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the user that owns the phone.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'foreign_key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Si el modelo principal no se utiliza <code>id</code>como clave principal, o si desea encontrar el modelo asociado utilizando una columna diferente, puede pasar un tercer argumento al <code>belongsTo</code>método que especifica la clave personalizada de la tabla principal:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the user that owns the phone.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'foreign_key'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'owner_key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"one-to-many\"><span class=\"link\">Uno a muchos</span></h3>\n    <p>Una relación de uno a varios se utiliza para definir relaciones en las que un único modelo es el padre de uno o más modelos secundarios. Por ejemplo, una publicación de blog puede tener una cantidad infinita de comentarios. Como todas las demás relaciones de Eloquent, las relaciones de uno a muchos se definen definiendo un método en su modelo de Eloquent:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get the comments for the blog post.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">comments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasMany</span><span class=\"token punctuation\">(</span>Comment<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Recuerde, Eloquent determinará automáticamente la columna de clave externa adecuada para el <code>Comment</code>modelo. Por convención, Eloquent tomará el nombre de \"caso de serpiente\" del modelo padre y lo agregará como sufijo <code>_id</code>. Entonces, en este ejemplo, Eloquent asumirá que la columna de clave externa en el <code>Comment</code>modelo es <code>post_id</code>.</p>\n    <p>Una vez definido el método de relación, podemos acceder a la <span class=\"link\">colección</span> de comentarios relacionados accediendo a la <code>comments</code>propiedad. Recuerde, dado que Eloquent proporciona \"propiedades de relación dinámica\", podemos acceder a los métodos de relación como si estuvieran definidos como propiedades en el modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$comments</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">comments</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$comments</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$comment</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Dado que todas las relaciones también sirven como constructores de consultas, puede agregar más restricciones a la consulta de relaciones llamando al <code>comments</code>método y continuando encadenando condiciones en la consulta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$comment</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">comments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Al igual que el <code>hasOne</code>método, también puede anular las claves externas y locales pasando argumentos adicionales al <code>hasMany</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasMany</span><span class=\"token punctuation\">(</span>Comment<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'foreign_key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasMany</span><span class=\"token punctuation\">(</span>Comment<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'foreign_key'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'local_key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"one-to-many-inverse\"><span class=\"link\">Uno a muchos (inverso) / pertenece a</span></h3>\n    <p>Ahora que podemos acceder a todos los comentarios de una publicación, definamos una relación para permitir que un comentario acceda a su publicación principal. Para definir la inversa de una <code>hasMany</code>relación, defina un método de relación en el modelo hijo que llama al <code>belongsTo</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Comment</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get the post that owns the comment.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Una vez que se ha definido la relación, podemos recuperar la publicación principal de un comentario accediendo a la <code>post</code>\"propiedad de relación dinámica\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Comment</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$comment</span> <span class=\"token operator\">=</span> Comment<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$comment</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">title</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>En el ejemplo anterior, Eloquent intentará encontrar un <code>Post</code>modelo que tenga una <code>id</code>que coincida con la <code>post_id</code>columna del <code>Comment</code>modelo.</p>\n    <p>Eloquent determina el nombre de la clave externa predeterminada examinando el nombre del método de relación y agregando como sufijo el nombre del método <code>_</code>seguido del nombre de la columna de clave principal del modelo principal. Entonces, en este ejemplo, Eloquent asumirá que la <code>Post</code>clave externa del modelo en la <code>comments</code>tabla es <code>post_id</code>.</p>\n    <p>Sin embargo, si la clave externa de su relación no sigue estas convenciones, puede pasar un nombre de clave externa personalizada como segundo argumento del <code>belongsTo</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the post that owns the comment.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'foreign_key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Si su modelo principal no lo utiliza <code>id</code>como clave principal, o si desea encontrar el modelo asociado utilizando una columna diferente, puede pasar un tercer argumento al <code>belongsTo</code>método que especifica la clave personalizada de su tabla principal:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the post that owns the comment.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'foreign_key'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'owner_key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"default-models\"><span class=\"link\">Modelos predeterminados</span></h4>\n    <p>Los <code>belongsTo</code>, <code>hasOne</code>, <code>hasOneThrough</code>, y <code>morphOne</code>relaciones permiten definir un modelo predeterminado que será devuelto si la relación es dada <code>null</code>. Este patrón a menudo se denomina <span class=\"link\">patrón de objeto nulo</span> y puede ayudar a eliminar las verificaciones condicionales en su código. En el siguiente ejemplo, la <code>user</code>relación devolverá un <code>App\\Models\\User</code>modelo vacío si no hay ningún usuario adjunto al <code>Post</code>modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the author of the post.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Para completar el modelo predeterminado con atributos, puede pasar una matriz o un cierre al <code>withDefault</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the author of the post.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Guest Author'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Get the author of the post.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withDefault</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'Guest Author'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"has-one-of-many\"><span class=\"link\">Tiene uno de muchos</span></h3>\n    <p>A veces, un modelo puede tener muchos modelos relacionados, pero desea recuperar fácilmente el modelo relacionado \"más reciente\" o \"más antiguo\" de la relación. Por ejemplo, un <code>User</code>modelo puede estar relacionado con muchos <code>Order</code>modelos, pero desea definir una forma conveniente de interactuar con el pedido más reciente que ha realizado el usuario. Puede lograr esto usando el <code>hasOne</code>tipo de relación combinado con los <code>ofMany</code>métodos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the user's most recent order.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">latestOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasOne</span><span class=\"token punctuation\">(</span>Order<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">latestOfMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Del mismo modo, puede definir un método para recuperar el modelo \"más antiguo\" o el primero relacionado de una relación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the user's oldest order.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">oldestOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasOne</span><span class=\"token punctuation\">(</span>Order<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">oldestOfMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Por defecto, las <code>latestOfMany</code>y <code>oldestOfMany</code>los métodos recuperará los últimos más antigua o modelo relacionado con base en la clave primaria del modelo, que debe ser clasificable. Sin embargo, a veces es posible que desee recuperar un solo modelo de una relación más amplia utilizando un criterio de clasificación diferente.</p>\n    <p>Por ejemplo, utilizando el <code>ofMany</code>método, puede recuperar el pedido más caro del usuario. El <code>ofMany</code>método acepta la columna ordenable como su primer argumento y qué función agregada ( <code>min</code>o <code>max</code>) aplicar al consultar el modelo relacionado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the user's largest order.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">largestOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasOne</span><span class=\"token punctuation\">(</span>Order<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ofMany</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'price'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'max'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Debido a que PostgreSQL no admite la ejecución de la <code>MAX</code>función contra columnas UUID, actualmente no es posible usar relaciones de uno de muchos en combinación con columnas UUID de PostgreSQL.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"advanced-has-one-of-many-relationships\"><span class=\"link\">Advanced tiene una de muchas relaciones</span></h4>\n    <p>Es posible construir relaciones más avanzadas \"tiene una de muchas\". Por ejemplo, un <code>Product</code>modelo puede tener muchos <code>Price</code>modelos asociados que se conservan en el sistema incluso después de que se publiquen nuevos precios. Además, es posible que se puedan publicar nuevos datos de precios para el producto con anticipación para que entren en vigencia en una fecha futura a través de una <code>published_at</code>columna.</p>\n    <p>Entonces, en resumen, necesitamos recuperar el último precio publicado donde la fecha publicada no es en el futuro. Además, si dos precios tienen la misma fecha de publicación, preferiremos el precio con mayor ID. Para lograr esto, debemos pasar una matriz al <code>ofMany</code>método que contiene las columnas clasificables que determinan el último precio. Además, se proporcionará un cierre como segundo argumento del <code>ofMany</code>método. Este cierre será responsable de agregar restricciones de fecha de publicación adicionales a la consulta de relación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the current pricing for the product.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">currentPricing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasOne</span><span class=\"token punctuation\">(</span>Price<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ofMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'published_at'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'max'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'max'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'published_at'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&lt;'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"has-one-through\"><span class=\"link\">Tiene uno a través</span></h3>\n    <p>La relación \"tiene uno a través\" define una relación uno a uno con otro modelo. Sin embargo, esta relación indica que el modelo declarante se puede emparejar con una instancia de otro modelo procediendo a <em>través de</em> un tercer modelo.</p>\n    <p>Por ejemplo, en una aplicación de taller de reparación de vehículos, cada <code>Mechanic</code>modelo puede estar asociado con un <code>Car</code>modelo y cada <code>Car</code>modelo puede estar asociado con un <code>Owner</code>modelo. Si bien el mecánico y el propietario no tienen una relación directa dentro de la base de datos, el mecánico puede acceder al propietario a <em>través</em> del <code>Car</code>modelo. Veamos las tablas necesarias para definir esta relación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">mechanics\n    id <span class=\"token operator\">-</span> integer\n    name <span class=\"token operator\">-</span> string\n\ncars\n    id <span class=\"token operator\">-</span> integer\n    model <span class=\"token operator\">-</span> string\n    mechanic_id <span class=\"token operator\">-</span> integer\n\nowners\n    id <span class=\"token operator\">-</span> integer\n    name <span class=\"token operator\">-</span> string\n    car_id <span class=\"token operator\">-</span> integer</code></pre>\n    <p>Ahora que hemos examinado la estructura de la tabla para la relación, definamos la relación en el <code>Mechanic</code>modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Mechanic</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get the car's owner.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">carOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasOneThrough</span><span class=\"token punctuation\">(</span>Owner<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> Car<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>El primer argumento que se pasa al <code>hasOneThrough</code>método es el nombre del modelo final al que deseamos acceder, mientras que el segundo argumento es el nombre del modelo intermedio.</p>\n    \n    <h4 id=\"has-one-through-key-conventions\"><span class=\"link\">Convenciones clave</span></h4>\n    <p>Se utilizarán las convenciones típicas de claves foráneas de Eloquent al realizar las consultas de la relación. Si desea personalizar las claves de la relación, puede pasarlas como tercer y cuarto argumento al <code>hasOneThrough</code>método. El tercer argumento es el nombre de la clave externa en el modelo intermedio. El cuarto argumento es el nombre de la clave externa en el modelo final. El quinto argumento es la clave local, mientras que el sexto argumento es la clave local del modelo intermedio:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mechanic</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get the car's owner.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">carOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasOneThrough</span><span class=\"token punctuation\">(</span>\n            Owner<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n            Car<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'mechanic_id'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Foreign key on the cars table...</span>\n            <span class=\"token single-quoted-string string\">'car_id'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Foreign key on the owners table...</span>\n            <span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Local key on the mechanics table...</span>\n            <span class=\"token single-quoted-string string\">'id'</span> <span class=\"token comment\">// Local key on the cars table...</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"has-many-through\"><span class=\"link\">Tiene muchos a través</span></h3>\n    <p>La relación \"tiene-muchos-a través\" proporciona una forma conveniente de acceder a relaciones distantes a través de una relación intermedia. Por ejemplo, supongamos que estamos construyendo una plataforma de implementación como <span class=\"link\">Laravel Vapor</span> . Un <code>Project</code>modelo puede acceder a muchos <code>Deployment</code>modelos a través de un <code>Environment</code>modelo intermedio . Con este ejemplo, podría recopilar fácilmente todas las implementaciones para un proyecto determinado. Veamos las tablas necesarias para definir esta relación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">projects\n    id <span class=\"token operator\">-</span> integer\n    name <span class=\"token operator\">-</span> string\n\nenvironments\n    id <span class=\"token operator\">-</span> integer\n    project_id <span class=\"token operator\">-</span> integer\n    name <span class=\"token operator\">-</span> string\n\ndeployments\n    id <span class=\"token operator\">-</span> integer\n    environment_id <span class=\"token operator\">-</span> integer\n    commit_hash <span class=\"token operator\">-</span> string</code></pre>\n    <p>Ahora que hemos examinado la estructura de la tabla para la relación, definamos la relación en el <code>Project</code>modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Project</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get all of the deployments for the project.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">deployments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasManyThrough</span><span class=\"token punctuation\">(</span>Deployment<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> Environment<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>El primer argumento que se pasa al <code>hasManyThrough</code>método es el nombre del modelo final al que deseamos acceder, mientras que el segundo argumento es el nombre del modelo intermedio.</p>\n    <p>Aunque la <code>Deployment</code>tabla del modelo no contiene una <code>project_id</code>columna, la <code>hasManyThrough</code>relación proporciona acceso a las implementaciones de un proyecto a través de <code>$project-&gt;deployments</code>. Para recuperar estos modelos, Eloquent inspecciona la <code>project_id</code>columna de la <code>Environment</code>tabla del modelo intermedio . Después de encontrar los ID de entorno relevantes, se utilizan para consultar la <code>Deployment</code>tabla del modelo.</p>\n    \n    <h4 id=\"has-many-through-key-conventions\"><span class=\"link\">Convenciones clave</span></h4>\n    <p>Se utilizarán las convenciones típicas de claves foráneas de Eloquent al realizar las consultas de la relación. Si desea personalizar las claves de la relación, puede pasarlas como tercer y cuarto argumento al <code>hasManyThrough</code>método. El tercer argumento es el nombre de la clave externa en el modelo intermedio. El cuarto argumento es el nombre de la clave externa en el modelo final. El quinto argumento es la clave local, mientras que el sexto argumento es la clave local del modelo intermedio:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Project</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">deployments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasManyThrough</span><span class=\"token punctuation\">(</span>\n            Deployment<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n            Environment<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'project_id'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Foreign key on the environments table...</span>\n            <span class=\"token single-quoted-string string\">'environment_id'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Foreign key on the deployments table...</span>\n            <span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Local key on the projects table...</span>\n            <span class=\"token single-quoted-string string\">'id'</span> <span class=\"token comment\">// Local key on the environments table...</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h2 id=\"many-to-many\"><span class=\"link\">Muchas a muchas relaciones</span></h2>\n    <p>Las relaciones de muchos a muchos son un poco más complicadas que las relaciones <code>hasOne</code>y <code>hasMany</code>. Un ejemplo de una relación de varios a varios es un usuario que tiene muchos roles y esos roles también son compartidos por otros usuarios en la aplicación. Por ejemplo, a un usuario se le puede asignar el rol de \"Autor\" y \"Editor\"; sin embargo, esos roles también pueden asignarse a otros usuarios. Entonces, un usuario tiene muchos roles y un rol tiene muchos usuarios.</p>\n    \n    <h4 id=\"many-to-many-table-structure\"><span class=\"link\">Estructura de la tabla</span></h4>\n    <p>Para definir esta relación, se necesitan tres tablas de la base: <code>users</code>, <code>roles</code>, y <code>role_user</code>. La <code>role_user</code>tabla se deriva del orden alfabético de los nombres de modelos relacionados y contiene <code>user_id</code>y <code>role_id</code>columnas. Esta tabla se utiliza como tabla intermedia que vincula a los usuarios y roles.</p>\n    <p>Recuerde, dado que un rol puede pertenecer a muchos usuarios, no podemos simplemente colocar una <code>user_id</code>columna en la <code>roles</code>tabla. Esto significaría que un rol solo podría pertenecer a un único usuario. Para brindar soporte a los roles que se asignan a múltiples usuarios, <code>role_user</code>se necesita la tabla. Podemos resumir la estructura de la tabla de la relación así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">users\n    id <span class=\"token operator\">-</span> integer\n    name <span class=\"token operator\">-</span> string\n\nroles\n    id <span class=\"token operator\">-</span> integer\n    name <span class=\"token operator\">-</span> string\n\nrole_user\n    user_id <span class=\"token operator\">-</span> integer\n    role_id <span class=\"token operator\">-</span> integer</code></pre>\n    \n    <h4 id=\"many-to-many-model-structure\"><span class=\"link\">Estructura del modelo</span></h4>\n    <p>Las relaciones de varios a varios se definen escribiendo un método que devuelve el resultado del <code>belongsToMany</code>método. El <code>belongsToMany</code>método lo proporciona la <code>Illuminate\\Database\\Eloquent\\Model</code>clase base que utilizan todos los modelos Eloquent de su aplicación. Por ejemplo, definamos un <code>roles</code>método en nuestro <code>User</code>modelo. El primer argumento que se pasa a este método es el nombre de la clase de modelo relacionada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The roles that belong to the user.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">roles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany</span><span class=\"token punctuation\">(</span>Role<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Una vez que se define la relación, puede acceder a los roles del usuario utilizando la <code>roles</code>propiedad de relación dinámica:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">roles</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$role</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Dado que todas las relaciones también sirven como constructores de consultas, puede agregar más restricciones a la consulta de relaciones llamando al <code>roles</code>método y continuando encadenando condiciones en la consulta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$roles</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Para determinar el nombre de la tabla de la tabla intermedia de la relación, Eloquent unirá los dos nombres de modelos relacionados en orden alfabético. Sin embargo, puede anular esta convención. Puede hacerlo pasando un segundo argumento al <code>belongsToMany</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany</span><span class=\"token punctuation\">(</span>Role<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'role_user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Además de personalizar el nombre de la tabla intermedia, también puede personalizar los nombres de las columnas de las claves en la tabla pasando argumentos adicionales al <code>belongsToMany</code>método. El tercer argumento es el nombre de la clave externa del modelo en el que está definiendo la relación, mientras que el cuarto argumento es el nombre de la clave externa del modelo al que se está uniendo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany</span><span class=\"token punctuation\">(</span>Role<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'role_user'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'user_id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'role_id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"many-to-many-defining-the-inverse-of-the-relationship\"><span class=\"link\">Definiendo lo inverso de la relación</span></h4>\n    <p>Para definir el \"inverso\" de una relación de varios a varios, debe definir un método en el modelo relacionado que también devuelva el resultado del <code>belongsToMany</code>método. Para completar nuestro ejemplo de usuario / rol, definamos el <code>users</code>método en el <code>Role</code>modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Role</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The users that belong to the role.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">users</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Como puede ver, la relación se define exactamente igual que su <code>User</code>contraparte del modelo, con la excepción de hacer referencia al <code>App\\Models\\User</code>modelo. Dado que estamos reutilizando el <code>belongsToMany</code>método, todas las tablas habituales y las opciones de personalización de teclas están disponibles al definir la \"inversa\" de las relaciones de muchos a muchos.</p>\n    \n    <h3 id=\"retrieving-intermediate-table-columns\"><span class=\"link\">Recuperar columnas de tabla intermedias</span></h3>\n    <p>Como ya ha aprendido, trabajar con relaciones de varios a varios requiere la presencia de una tabla intermedia. Eloquent proporciona algunas formas muy útiles de interactuar con esta mesa. Por ejemplo, supongamos que nuestro <code>User</code>modelo tiene muchos <code>Role</code>modelos con los que está relacionado. Luego de acceder a esta relación, podemos acceder a la tabla intermedia usando el <code>pivot</code>atributo en los modelos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">roles</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$role</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$role</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">pivot</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">created_at</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Observe que a cada <code>Role</code>modelo que recuperamos se le asigna automáticamente un <code>pivot</code>atributo. Este atributo contiene un modelo que representa la tabla intermedia.</p>\n    <p>De forma predeterminada, solo las claves del modelo estarán presentes en el <code>pivot</code>modelo. Si su tabla intermedia contiene atributos adicionales, debe especificarlos al definir la relación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany</span><span class=\"token punctuation\">(</span>Role<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withPivot</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'created_by'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea que su tabla intermedia para tener <code>created_at</code>y <code>updated_at</code>marcas de tiempo que se mantienen automáticamente por Elocuente, llamar al <code>withTimestamps</code>método en la definición de la relación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany</span><span class=\"token punctuation\">(</span>Role<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withTimestamps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Las tablas intermedias que utilizan las marcas de tiempo mantenidas automáticamente de Eloquent deben tener columnas de marca de tiempo <code>created_at</code>y de <code>updated_at</code>marca de tiempo.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"customizing-the-pivot-attribute-name\"><span class=\"link\">Personalización del <code>pivot</code>nombre del atributo</span></h4>\n    <p>Como se señaló anteriormente, se puede acceder a los atributos de la tabla intermedia en los modelos a través del <code>pivot</code>atributo. Sin embargo, puede personalizar el nombre de este atributo para reflejar mejor su propósito dentro de su aplicación.</p>\n    <p>Por ejemplo, si su aplicación contiene usuarios que pueden suscribirse a podcasts, es probable que tenga una relación de varios a varios entre los usuarios y los podcasts. Si este es el caso, es posible que desee cambiar el nombre de su atributo de tabla intermedia a en <code>subscription</code>lugar de <code>pivot</code>. Esto se puede hacer usando el <code>as</code>método al definir la relación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany</span><span class=\"token punctuation\">(</span>Podcast<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'subscription'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withTimestamps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Una vez que se haya especificado el atributo de la tabla intermedia personalizada, puede acceder a los datos de la tabla intermedia utilizando el nombre personalizado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'podcasts'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">flatMap</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">podcasts</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$podcast</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$podcast</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">subscription</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">created_at</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"filtering-queries-via-intermediate-table-columns\"><span class=\"link\">Filtrar consultas a través de columnas de tabla intermedias</span></h3>\n    <p>También puede filtrar los resultados devueltos por <code>belongsToMany</code>las consultas de relación utilizando los <code>wherePivot</code>, <code>wherePivotIn</code>, <code>wherePivotNotIn</code>, <code>wherePivotBetween</code>, <code>wherePivotNotBetween</code>, <code>wherePivotNull</code>, y <code>wherePivotNotNull</code>métodos en la definición de la relación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany</span><span class=\"token punctuation\">(</span>Role<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">wherePivot</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'approved'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany</span><span class=\"token punctuation\">(</span>Role<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">wherePivotIn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'priority'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany</span><span class=\"token punctuation\">(</span>Role<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">wherePivotNotIn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'priority'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany</span><span class=\"token punctuation\">(</span>Podcast<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'subscriptions'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">wherePivotBetween</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'2020-01-01 00:00:00'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'2020-12-31 00:00:00'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany</span><span class=\"token punctuation\">(</span>Podcast<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'subscriptions'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">wherePivotNotBetween</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'2020-01-01 00:00:00'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'2020-12-31 00:00:00'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany</span><span class=\"token punctuation\">(</span>Podcast<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'subscriptions'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">wherePivotNull</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'expired_at'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany</span><span class=\"token punctuation\">(</span>Podcast<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'subscriptions'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">wherePivotNotNull</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'expired_at'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"defining-custom-intermediate-table-models\"><span class=\"link\">Definición de modelos personalizados de tablas intermedias</span></h3>\n    <p>Si desea definir un modelo personalizado para representar la tabla intermedia de su relación de muchos a muchos, puede llamar al <code>using</code>método al definir la relación. Los modelos de pivote personalizados le brindan la oportunidad de definir métodos adicionales en el modelo de pivote.</p>\n    <p>Los modelos dinámicos personalizados de muchos a muchos deberían extender la <code>Illuminate\\Database\\Eloquent\\Relations\\Pivot</code>clase, mientras que los modelos dinámicos polimórficos personalizados de muchos a muchos deberían extender la <code>Illuminate\\Database\\Eloquent\\Relations\\MorphPivot</code>clase. Por ejemplo, podemos definir un <code>Role</code>modelo que utiliza un <code>RoleUser</code>modelo de pivote personalizado :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Role</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The users that belong to the role.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">users</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsToMany</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">using</span><span class=\"token punctuation\">(</span>RoleUser<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Al definir el <code>RoleUser</code>modelo, debe extender la <code>Illuminate\\Database\\Eloquent\\Relations\\Pivot</code>clase:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Relations<span class=\"token punctuation\">\\</span>Pivot</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RoleUser</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pivot</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Es posible que los modelos pivote no utilicen el <code>SoftDeletes</code>rasgo. Si necesita eliminar temporalmente los registros dinámicos, considere convertir su modelo dinámico en un modelo Eloquent real.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"custom-pivot-models-and-incrementing-ids\"><span class=\"link\">Modelos de pivote personalizados e ID en aumento</span></h4>\n    <p>Si ha definido una relación de muchos a muchos que usa un modelo de pivote personalizado, y ese modelo de pivote tiene una clave principal que se incrementa automáticamente, debe asegurarse de que su clase de modelo de pivote personalizado defina una <code>incrementing</code>propiedad configurada en <code>true</code>.</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Indicates if the IDs are auto-incrementing.\n *\n * @var bool\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token variable\">$incrementing</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"polymorphic-relationships\"><span class=\"link\">Relaciones polimórficas</span></h2>\n    <p>Una relación polimórfica permite que el modelo hijo pertenezca a más de un tipo de modelo utilizando una sola asociación. Por ejemplo, imagine que está creando una aplicación que permite a los usuarios compartir publicaciones de blogs y videos. En una aplicación de este tipo, un <code>Comment</code>modelo puede pertenecer a los modelos <code>Post</code>y <code>Video</code>.</p>\n    \n    <h3 id=\"one-to-one-polymorphic-relations\"><span class=\"link\">Uno a uno (polimórfico)</span></h3>\n    \n    <h4 id=\"one-to-one-polymorphic-table-structure\"><span class=\"link\">Estructura de la tabla</span></h4>\n    <p>Una relación polimórfica uno a uno es similar a una relación típica uno a uno; sin embargo, el modelo hijo puede pertenecer a más de un tipo de modelo utilizando una sola asociación. Por ejemplo, un blog <code>Post</code>y un <code>User</code>pueden compartir una relación polimórfica con un <code>Image</code>modelo. El uso de una relación polimórfica uno a uno le permite tener una sola tabla de imágenes únicas que pueden estar asociadas con publicaciones y usuarios. Primero, examinemos la estructura de la tabla:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">posts\n    id <span class=\"token operator\">-</span> integer\n    name <span class=\"token operator\">-</span> string\n\nusers\n    id <span class=\"token operator\">-</span> integer\n    name <span class=\"token operator\">-</span> string\n\nimages\n    id <span class=\"token operator\">-</span> integer\n    url <span class=\"token operator\">-</span> string\n    imageable_id <span class=\"token operator\">-</span> integer\n    imageable_type <span class=\"token operator\">-</span> string</code></pre>\n    <p>Tenga en cuenta las columnas <code>imageable_id</code>y <code>imageable_type</code>en la <code>images</code>tabla. La <code>imageable_id</code>columna contendrá el valor de ID de la publicación o el usuario, mientras que la <code>imageable_type</code>columna contendrá el nombre de la clase del modelo principal. La <code>imageable_type</code>columna se utiliza por elocuente para determinar qué \"tipo\" de modelo padre a retorno cuando se accede a la <code>imageable</code>relación. En este caso, la columna contendría <code>App\\Models\\Post</code>o <code>App\\Models\\User</code>.</p>\n    \n    <h4 id=\"one-to-one-polymorphic-model-structure\"><span class=\"link\">Estructura del modelo</span></h4>\n    <p>A continuación, examinemos las definiciones del modelo necesarias para construir esta relación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Image</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get the parent imageable model (user or post).\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">imageable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get the post's image.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphOne</span><span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'imageable'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get the user's image.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphOne</span><span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'imageable'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h4 id=\"one-to-one-polymorphic-retrieving-the-relationship\"><span class=\"link\">Recuperando la relación</span></h4>\n    <p>Una vez que la tabla y los modelos de su base de datos estén definidos, puede acceder a las relaciones a través de sus modelos. Por ejemplo, para recuperar la imagen de una publicación, podemos acceder a la <code>image</code>propiedad de relación dinámica:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$post</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$image</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">image</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede recuperar el padre del modelo polimórfico accediendo al nombre del método que realiza la llamada a <code>morphTo</code>. En este caso, ese es el <code>imageable</code>método del <code>Image</code>modelo. Entonces, accederemos a ese método como una propiedad de relación dinámica:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Image</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$image</span> <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$imageable</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$image</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">imageable</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>La <code>imageable</code>relación en el <code>Image</code>modelo devolverá una instancia <code>Post</code>o <code>User</code>, según el tipo de modelo que posea la imagen.</p>\n    \n    <h4 id=\"morph-one-to-one-key-conventions\"><span class=\"link\">Convenciones clave</span></h4>\n    <p>Si es necesario, puede especificar el nombre de las columnas \"id\" y \"tipo\" utilizadas por su modelo hijo polimórfico. Si lo hace, asegúrese de pasar siempre el nombre de la relación como primer argumento del <code>morphTo</code>método. Por lo general, este valor debe coincidir con el nombre del método, por lo que puede usar la <code>__FUNCTION__</code>constante de PHP :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the model that the image belongs to.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">imageable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphTo</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FUNCTION__</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'imageable_type'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'imageable_id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"one-to-many-polymorphic-relations\"><span class=\"link\">Uno a muchos (polimórfico)</span></h3>\n    \n    <h4 id=\"one-to-many-polymorphic-table-structure\"><span class=\"link\">Estructura de la tabla</span></h4>\n    <p>Una relación polimórfica de uno a muchos es similar a una relación típica de uno a muchos; sin embargo, el modelo hijo puede pertenecer a más de un tipo de modelo utilizando una sola asociación. Por ejemplo, imagina que los usuarios de tu aplicación pueden \"comentar\" publicaciones y videos. Usando relaciones polimórficas, puede usar una sola <code>comments</code>tabla para contener comentarios tanto para publicaciones como para videos. Primero, examinemos la estructura de la tabla requerida para construir esta relación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">posts\n    id <span class=\"token operator\">-</span> integer\n    title <span class=\"token operator\">-</span> string\n    body <span class=\"token operator\">-</span> text\n\nvideos\n    id <span class=\"token operator\">-</span> integer\n    title <span class=\"token operator\">-</span> string\n    url <span class=\"token operator\">-</span> string\n\ncomments\n    id <span class=\"token operator\">-</span> integer\n    body <span class=\"token operator\">-</span> text\n    commentable_id <span class=\"token operator\">-</span> integer\n    commentable_type <span class=\"token operator\">-</span> string</code></pre>\n    \n    <h4 id=\"one-to-many-polymorphic-model-structure\"><span class=\"link\">Estructura del modelo</span></h4>\n    <p>A continuación, examinemos las definiciones del modelo necesarias para construir esta relación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Comment</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get the parent commentable model (post or video).\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">commentable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get all of the post's comments.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">comments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphMany</span><span class=\"token punctuation\">(</span>Comment<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'commentable'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Video</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get all of the video's comments.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">comments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphMany</span><span class=\"token punctuation\">(</span>Comment<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'commentable'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h4 id=\"one-to-many-polymorphic-retrieving-the-relationship\"><span class=\"link\">Recuperando la relación</span></h4>\n    <p>Una vez que la tabla y los modelos de su base de datos estén definidos, puede acceder a las relaciones a través de las propiedades de relaciones dinámicas de su modelo. Por ejemplo, para acceder a todos los comentarios de una publicación, podemos usar la <code>comments</code>propiedad dinámica:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$post</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">comments</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$comment</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>También puede recuperar el padre de un modelo hijo polimórfico accediendo al nombre del método que realiza la llamada a <code>morphTo</code>. En este caso, ese es el <code>commentable</code>método del <code>Comment</code>modelo. Entonces, accederemos a ese método como una propiedad de relación dinámica para acceder al modelo principal del comentario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Comment</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$comment</span> <span class=\"token operator\">=</span> Comment<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$commentable</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$comment</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">commentable</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>La <code>commentable</code>relación en el <code>Comment</code>modelo devolverá una instancia <code>Post</code>o <code>Video</code>, según el tipo de modelo que sea el padre del comentario.</p>\n    \n    <h3 id=\"one-of-many-polymorphic-relations\"><span class=\"link\">Uno de muchos (polimórfico)</span></h3>\n    <p>A veces, un modelo puede tener muchos modelos relacionados, pero desea recuperar fácilmente el modelo relacionado \"más reciente\" o \"más antiguo\" de la relación. Por ejemplo, un <code>User</code>modelo puede estar relacionado con muchos <code>Image</code>modelos, pero desea definir una forma conveniente de interactuar con la imagen más reciente que ha subido el usuario. Puede lograr esto usando el <code>morphOne</code>tipo de relación combinado con los <code>ofMany</code>métodos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the user's most recent image.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">latestImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphOne</span><span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'imageable'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">latestOfMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Del mismo modo, puede definir un método para recuperar el modelo \"más antiguo\" o el primero relacionado de una relación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the user's oldest image.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">oldestImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphOne</span><span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'imageable'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">oldestOfMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Por defecto, las <code>latestOfMany</code>y <code>oldestOfMany</code>los métodos recuperará los últimos más antigua o modelo relacionado con base en la clave primaria del modelo, que debe ser clasificable. Sin embargo, a veces es posible que desee recuperar un solo modelo de una relación más amplia utilizando un criterio de clasificación diferente.</p>\n    <p>Por ejemplo, utilizando el <code>ofMany</code>método, puede recuperar la imagen que más le gusta al usuario. El <code>ofMany</code>método acepta la columna ordenable como su primer argumento y qué función agregada ( <code>min</code>o <code>max</code>) aplicar al consultar el modelo relacionado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Get the user's most popular image.\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bestImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphOne</span><span class=\"token punctuation\">(</span>Image<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'imageable'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">ofMany</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'likes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'max'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Es posible construir relaciones \"una de muchas\" más avanzadas. Para obtener más información, consulte la documentación que <span class=\"link\">contiene</span> .</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"many-to-many-polymorphic-relations\"><span class=\"link\">Muchos a muchos (polimórfico)</span></h3>\n    \n    <h4 id=\"many-to-many-polymorphic-table-structure\"><span class=\"link\">Estructura de la tabla</span></h4>\n    <p>Las relaciones polimórficas de muchos a muchos son un poco más complicadas que las relaciones de \"transformación uno\" y \"transformación de muchos\". Por ejemplo, un <code>Post</code>modelo y un <code>Video</code>modelo podrían compartir una relación polimórfica con un <code>Tag</code>modelo. El uso de una relación polimórfica de muchos a muchos en esta situación permitiría que su aplicación tuviera una sola tabla de etiquetas únicas que pueden estar asociadas con publicaciones o videos. Primero, examinemos la estructura de la tabla requerida para construir esta relación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">posts\n    id <span class=\"token operator\">-</span> integer\n    name <span class=\"token operator\">-</span> string\n\nvideos\n    id <span class=\"token operator\">-</span> integer\n    name <span class=\"token operator\">-</span> string\n\ntags\n    id <span class=\"token operator\">-</span> integer\n    name <span class=\"token operator\">-</span> string\n\ntaggables\n    tag_id <span class=\"token operator\">-</span> integer\n    taggable_id <span class=\"token operator\">-</span> integer\n    taggable_type <span class=\"token operator\">-</span> string</code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Antes de sumergirse en las relaciones polimórficas de varios a varios, puede beneficiarse de leer la documentación sobre las relaciones típicas de <span class=\"link\">varios a varios</span> .</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"many-to-many-polymorphic-model-structure\"><span class=\"link\">Estructura del modelo</span></h4>\n    <p>A continuación, estamos listos para definir las relaciones en los modelos. Los modelos <code>Post</code>y <code>Video</code>contendrán un <code>tags</code>método que llama al <code>morphToMany</code>método proporcionado por la clase de modelo base de Eloquent.</p>\n    <p>El <code>morphToMany</code>método acepta el nombre del modelo relacionado, así como el \"nombre de la relación\". Según el nombre que asignamos a nuestro nombre de tabla intermedia y las claves que contiene, nos referiremos a la relación como \"etiquetable\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Post</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get all of the tags for the post.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">tags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphToMany</span><span class=\"token punctuation\">(</span>Tag<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'taggable'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h4 id=\"many-to-many-polymorphic-defining-the-inverse-of-the-relationship\"><span class=\"link\">Definiendo lo inverso de la relación</span></h4>\n    <p>A continuación, en el <code>Tag</code>modelo, debe definir un método para cada uno de sus posibles modelos principales. Entonces, en este ejemplo, definiremos un <code>posts</code>método y un <code>videos</code>método. Ambos métodos deberían devolver el resultado del <code>morphedByMany</code>método.</p>\n    <p>El <code>morphedByMany</code>método acepta el nombre del modelo relacionado, así como el \"nombre de la relación\". Según el nombre que asignamos a nuestro nombre de tabla intermedia y las claves que contiene, nos referiremos a la relación como \"etiquetable\":</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Tag</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get all of the posts that are assigned this tag.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">posts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphedByMany</span><span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'taggable'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Get all of the videos that are assigned this tag.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">videos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphedByMany</span><span class=\"token punctuation\">(</span>Video<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'taggable'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h4 id=\"many-to-many-polymorphic-retrieving-the-relationship\"><span class=\"link\">Recuperando la relación</span></h4>\n    <p>Una vez que la tabla y los modelos de su base de datos estén definidos, puede acceder a las relaciones a través de sus modelos. Por ejemplo, para acceder a todas las etiquetas de una publicación, puede usar la <code>tags</code>propiedad de relación dinámica:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$post</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">tags</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$tag</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Puede recuperar el padre de una relación polimórfica del modelo hijo polimórfico accediendo al nombre del método que realiza la llamada a <code>morphedByMany</code>. En este caso, son los métodos <code>posts</code>o <code>videos</code>en el <code>Tag</code>modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Tag</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$tag</span> <span class=\"token operator\">=</span> Tag<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$tag</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">posts</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$tag</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">videos</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$video</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"custom-polymorphic-types\"><span class=\"link\">Tipos polimórficos personalizados</span></h3>\n    <p>De forma predeterminada, Laravel usará el nombre de clase completamente calificado para almacenar el \"tipo\" del modelo relacionado. Por ejemplo, dado el ejemplo de relación uno a varios anterior, donde un <code>Comment</code>modelo puede pertenecer a <code>Post</code>un <code>Video</code>modelo o , el valor predeterminado <code>commentable_type</code>sería <code>App\\Models\\Post</code>o <code>App\\Models\\Video</code>, respectivamente. Sin embargo, es posible que desee desacoplar estos valores de la estructura interna de su aplicación.</p>\n    <p>Por ejemplo, en lugar de usar los nombres del modelo como \"tipo\", podemos usar cadenas simples como <code>post</code>y <code>video</code>. Al hacerlo, los valores de la columna de \"tipo\" polimórfico en nuestra base de datos seguirán siendo válidos incluso si se cambia el nombre de los modelos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Relations<span class=\"token punctuation\">\\</span>Relation</span><span class=\"token punctuation\">;</span>\n\nRelation<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">enforceMorphMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'post'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'App\\Models\\Post'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'video'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'App\\Models\\Video'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede llamar al <code>enforceMorphMap</code>método en el <code>boot</code>método de su <code>App\\Providers\\AppServiceProvider</code>clase o crear un proveedor de servicios separado si lo desea.</p>\n    <p>Puede determinar el alias de transformación de un modelo dado en tiempo de ejecución utilizando el <code>getMorphClass</code>método del modelo . Por el contrario, puede determinar el nombre de clase completamente calificado asociado con un alias de morph usando el <code>Relation::getMorphedModel</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Relations<span class=\"token punctuation\">\\</span>Relation</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$alias</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getMorphClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$class</span> <span class=\"token operator\">=</span> Relation<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">getMorphedModel</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$alias</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Al agregar un \"mapa de transformación\" a su aplicación existente, cada <code>*_type</code>valor de columna modificable en su base de datos que aún contiene una clase totalmente calificada deberá convertirse a su nombre de \"mapa\".</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"dynamic-relationships\"><span class=\"link\">Relaciones dinámicas</span></h3>\n    <p>Puede utilizar el <code>resolveRelationUsing</code>método para definir relaciones entre modelos Eloquent en tiempo de ejecución. Aunque normalmente no se recomienda para el desarrollo normal de aplicaciones, en ocasiones puede ser útil al desarrollar paquetes de Laravel.</p>\n    <p>El <code>resolveRelationUsing</code>método acepta el nombre de la relación deseada como primer argumento. El segundo argumento pasado al método debe ser un cierre que acepte la instancia del modelo y devuelva una definición de relación Eloquent válida. Por lo general, debe configurar relaciones dinámicas dentro del método de arranque de un <span class=\"link\">proveedor de servicios</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Order</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Customer</span><span class=\"token punctuation\">;</span>\n\nOrder<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">resolveRelationUsing</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'customer'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$orderModel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$orderModel</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>Customer<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'customer_id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p> Al definir relaciones dinámicas, siempre proporcione argumentos de nombre clave explícitos para los métodos de relación de Eloquent.</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"querying-relations\"><span class=\"link\">Consultar relaciones</span></h2>\n    <p>Dado que todas las relaciones de Eloquent se definen mediante métodos, puede llamar a esos métodos para obtener una instancia de la relación sin ejecutar una consulta para cargar los modelos relacionados. Además, todos los tipos de relaciones de Eloquent también sirven como <span class=\"link\">constructores de consultas</span> , lo que le permite continuar encadenando restricciones en la consulta de relación antes de ejecutar finalmente la consulta SQL en su base de datos.</p>\n    <p>Por ejemplo, imagina una aplicación de blog en la que un <code>User</code>modelo tiene muchos <code>Post</code>modelos asociados :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get all of the posts for the user.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">posts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hasMany</span><span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Puede consultar la <code>posts</code>relación y agregar restricciones adicionales a la relación de la siguiente manera:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">posts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede utilizar cualquiera de los métodos <span class=\"link\">del generador de consultas de</span> Laravel en la relación, así que asegúrese de explorar la documentación del generador de consultas para conocer todos los métodos que están disponibles para usted.</p>\n    \n    <h4 id=\"chaining-orwhere-clauses-after-relationships\"><span class=\"link\">Encadenamiento de <code>orWhere</code>cláusulas después de las relaciones</span></h4>\n    <p>Como se demostró en el ejemplo anterior, puede agregar restricciones adicionales a las relaciones cuando las consulte. Sin embargo, tenga cuidado al encadenar <code>orWhere</code>cláusulas en una relación, ya que las <code>orWhere</code>cláusulas se agruparán lógicamente al mismo nivel que la restricción de relación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">posts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orWhere</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;='</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El ejemplo anterior generará el siguiente SQL. Como puede ver, la <code>or</code>cláusula indica a la consulta que devuelva <em>cualquier</em> usuario con más de 100 votos. La consulta ya no está restringida a un usuario específico:</p>\n    <pre class=\" language-sql\"><code class=\" language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> posts\n<span class=\"token keyword\">where</span> user_id <span class=\"token operator\">=</span> ? <span class=\"token operator\">and</span> active <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">or</span> votes <span class=\"token operator\">&gt;=</span> <span class=\"token number\">100</span></code></pre>\n    <p>En la mayoría de las situaciones, debe usar <span class=\"link\">grupos lógicos</span> para agrupar las verificaciones condicionales entre paréntesis:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Builder</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">posts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Builder <span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orWhere</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;='</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El ejemplo anterior producirá el siguiente SQL. Tenga en cuenta que la agrupación lógica ha agrupado correctamente las restricciones y la consulta permanece restringida a un usuario específico:</p>\n    <pre class=\" language-sql\"><code class=\" language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> posts\n<span class=\"token keyword\">where</span> user_id <span class=\"token operator\">=</span> ? <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span>active <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">or</span> votes <span class=\"token operator\">&gt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></code></pre>\n    \n    <h3 id=\"relationship-methods-vs-dynamic-properties\"><span class=\"link\">Métodos de relación vs. Propiedades dinámicas</span></h3>\n    <p>Si no necesita agregar restricciones adicionales a una consulta de relación de Eloquent, puede acceder a la relación como si fuera una propiedad. Por ejemplo, si continuamos usando nuestros modelos <code>User</code>y de <code>Post</code>ejemplo, podemos acceder a todas las publicaciones de un usuario así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">posts</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Las propiedades de relación dinámica realizan una \"carga diferida\", lo que significa que solo cargarán los datos de su relación cuando realmente acceda a ellos. Debido a esto, los desarrolladores a menudo usan la <span class=\"link\">carga ansiosa</span> para precargar las relaciones que saben que se accederán después de cargar el modelo. La carga ansiosa proporciona una reducción significativa en las consultas SQL que deben ejecutarse para cargar las relaciones de un modelo.</p>\n    \n    <h3 id=\"querying-relationship-existence\"><span class=\"link\">Consultando la existencia de la relación</span></h3>\n    <p>Al recuperar los registros del modelo, es posible que desee limitar sus resultados en función de la existencia de una relación. Por ejemplo, imagine que desea recuperar todas las publicaciones de blog que tienen al menos un comentario. Para hacerlo, puede pasar el nombre de la relación a los métodos <code>has</code>y <code>orHas</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Retrieve all posts that have at least one comment...</span>\n<span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comments'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede especificar un operador y un valor de recuento para personalizar aún más la consulta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Retrieve all posts that have three or more comments...</span>\n<span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comments'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;='</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Las <code>has</code>declaraciones anidadas se pueden construir utilizando la notación de \"puntos\". Por ejemplo, puede recuperar todas las publicaciones que tengan al menos un comentario que tenga al menos una imagen:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Retrieve posts that have at least one comment with images...</span>\n<span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comments.images'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si necesita aún más poder, puede usar los métodos <code>whereHas</code>y <code>orWhereHas</code>para definir restricciones de consulta adicionales en sus <code>has</code>consultas, como inspeccionar el contenido de un comentario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Builder</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Retrieve posts with at least one comment containing words like code%...</span>\n<span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">whereHas</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comments'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Builder <span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'content'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'like'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'code%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Retrieve posts with at least ten comments containing words like code%...</span>\n<span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">whereHas</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comments'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Builder <span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'content'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'like'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'code%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;='</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Actualmente, Eloquent no admite consultas sobre la existencia de relaciones entre bases de datos. Las relaciones deben existir dentro de la misma base de datos.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"inline-relationship-existence-queries\"><span class=\"link\">Consultas de existencia de relación en línea</span></h4>\n    <p>Si desea consultar la existencia de una relación con una única condición simple, where adjunta a la consulta de relación, puede que le resulte más conveniente utilizar los métodos <code>whereRelation</code>y <code>whereMorphRelation</code>. Por ejemplo, podemos consultar todas las publicaciones que tienen comentarios no aprobados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">whereRelation</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comments'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'is_approved'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Por supuesto, al igual que las llamadas al <code>where</code>método del generador de consultas , también puede especificar un operador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">whereRelation</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'comments'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;='</span><span class=\"token punctuation\">,</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">subHour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"querying-relationship-absence\"><span class=\"link\">Consulta de ausencia de relación</span></h3>\n    <p>Al recuperar los registros del modelo, es posible que desee limitar sus resultados en función de la ausencia de una relación. Por ejemplo, imagina que quieres recuperar todas las publicaciones de blog que <strong>no</strong> tienen comentarios. Para hacerlo, puede pasar el nombre de la relación a los métodos <code>doesntHave</code>y <code>orDoesntHave</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">doesntHave</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comments'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si necesita aún más poder, puede usar los métodos <code>whereDoesntHave</code>y <code>orWhereDoesntHave</code>para agregar restricciones de consulta adicionales a sus <code>doesntHave</code>consultas, como inspeccionar el contenido de un comentario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Builder</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">whereDoesntHave</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comments'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Builder <span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'content'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'like'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'code%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede utilizar la notación de \"puntos\" para ejecutar una consulta en una relación anidada. Por ejemplo, la siguiente consulta recuperará todas las publicaciones que no tengan comentarios; sin embargo, las publicaciones que tengan comentarios de autores que no estén prohibidos se incluirán en los resultados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Builder</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">whereDoesntHave</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comments.author'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Builder <span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'banned'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"querying-morph-to-relationships\"><span class=\"link\">Consultar Morph a relaciones</span></h3>\n    <p>Para consultar la existencia de relaciones \"transformarse en\", puede utilizar los métodos <code>whereHasMorph</code>y <code>whereDoesntHaveMorph</code>. Estos métodos aceptan el nombre de la relación como primer argumento. A continuación, los métodos aceptan los nombres de los modelos relacionados que desea incluir en la consulta. Finalmente, puede proporcionar un cierre que personalice la consulta de relación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Comment</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Video</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Builder</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Retrieve comments associated to posts or videos with a title like code%...</span>\n<span class=\"token variable\">$comments</span> <span class=\"token operator\">=</span> Comment<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">whereHasMorph</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'commentable'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> Video<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Builder <span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'like'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'code%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Retrieve comments associated to posts with a title not like code%...</span>\n<span class=\"token variable\">$comments</span> <span class=\"token operator\">=</span> Comment<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">whereDoesntHaveMorph</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'commentable'</span><span class=\"token punctuation\">,</span>\n    Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Builder <span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'like'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'code%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>En ocasiones, es posible que deba agregar restricciones de consulta según el \"tipo\" del modelo polimórfico relacionado. El cierre pasado al <code>whereHasMorph</code>método puede recibir un <code>$type</code>valor como segundo argumento. Este argumento le permite inspeccionar el \"tipo\" de la consulta que se está construyendo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Builder</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$comments</span> <span class=\"token operator\">=</span> Comment<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">whereHasMorph</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'commentable'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> Video<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Builder <span class=\"token variable\">$query</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$column</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$type</span> <span class=\"token operator\">===</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">?</span> <span class=\"token single-quoted-string string\">'content'</span> <span class=\"token punctuation\">:</span> <span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$column</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'like'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'code%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"querying-all-morph-to-related-models\"><span class=\"link\">Consultar todos los modelos relacionados</span></h4>\n    <p>En lugar de pasar una serie de posibles modelos polimórficos, puede proporcionar <code>*</code>un valor comodín. Esto le indicará a Laravel que recupere todos los posibles tipos polimórficos de la base de datos. Laravel ejecutará una consulta adicional para realizar esta operación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Builder</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$comments</span> <span class=\"token operator\">=</span> Comment<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">whereHasMorph</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'commentable'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Builder <span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'like'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'foo%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"aggregating-related-models\"><span class=\"link\">Agregar modelos relacionados</span></h2>\n    \n    <h3 id=\"counting-related-models\"><span class=\"link\">Contando modelos relacionados</span></h3>\n    <p>A veces, es posible que desee contar el número de modelos relacionados para una relación determinada sin cargar realmente los modelos. Para lograr esto, puede utilizar el <code>withCount</code>método. El <code>withCount</code>método colocará un <code>{relation}_count</code>atributo en los modelos resultantes:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withCount</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comments'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$posts</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">comments_count</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Al pasar una matriz al <code>withCount</code>método, puede agregar los \"recuentos\" para múltiples relaciones, así como agregar restricciones adicionales a las consultas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Builder</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'comments'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Builder <span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'content'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'like'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'code%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$posts</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">votes_count</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$posts</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">comments_count</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede aplicar un alias al resultado del recuento de relaciones, lo que permite varios recuentos en la misma relación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Builder</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'comments'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'comments as pending_comments_count'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Builder <span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'approved'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$posts</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">comments_count</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$posts</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">pending_comments_count</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"deferred-count-loading\"><span class=\"link\">Carga de recuento diferido</span></h4>\n    <p>Con el <code>loadCount</code>método, puede cargar un recuento de relaciones después de que el modelo principal ya se haya recuperado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$book</span> <span class=\"token operator\">=</span> Book<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$book</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">loadCount</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'genres'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si necesita establecer restricciones de consulta adicionales en la consulta de recuento, puede pasar una matriz codificada por las relaciones que desea contar. Los valores de la matriz deben ser cierres que reciban la instancia del generador de consultas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$book</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">loadCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'reviews'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'rating'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n    \n    <h4 id=\"relationship-counting-and-custom-select-statements\"><span class=\"link\">Recuento de relaciones y declaraciones de selección personalizadas</span></h4>\n    <p>Si está combinando <code>withCount</code>con una <code>select</code>declaración, asegúrese de llamar <code>withCount</code>después del <code>select</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'body'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withCount</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comments'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"other-aggregate-functions\"><span class=\"link\">Otras funciones agregadas</span></h3>\n    <p>Además del <code>withCount</code>método, elocuente proporciona <code>withMin</code>, <code>withMax</code>, <code>withAvg</code>, <code>withSum</code>, y <code>withExists</code>métodos. Estos métodos colocarán un <code>{relation}_{function}_{column}</code>atributo en sus modelos resultantes:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withSum</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comments'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$posts</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">comments_sum_votes</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Si desea acceder al resultado de la función agregada con otro nombre, puede especificar su propio alias:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withSum</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comments as total_comments'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$posts</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$post</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">total_comments</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Al igual que el <code>loadCount</code>método, también están disponibles versiones diferidas de estos métodos. Estas operaciones agregadas adicionales se pueden realizar en modelos Eloquent que ya se han recuperado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$post</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">loadSum</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comments'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si está combinando estos métodos agregados con una <code>select</code>declaración, asegúrese de llamar a los métodos agregados después del <code>select</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$posts</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'body'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withExists</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'comments'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"counting-related-models-on-morph-to-relationships\"><span class=\"link\">Contando modelos relacionados en Morph a relaciones</span></h3>\n    <p>Si desea cargar ansiosamente una relación \"transformarse en\", así como los recuentos de modelos relacionados para las diversas entidades que pueden ser devueltas por esa relación, puede utilizar el <code>with</code>método en combinación con el método de la <code>morphTo</code>relación <code>morphWithCount</code>.</p>\n    <p>En este ejemplo, supongamos que los modelos <code>Photo</code>y <code>Post</code>pueden crear <code>ActivityFeed</code>modelos. Asumiremos que el <code>ActivityFeed</code>modelo define una relación \"morph to\" nombrada <code>parentable</code>que nos permite recuperar el padre <code>Photo</code>o <code>Post</code>modelo para una <code>ActivityFeed</code>instancia determinada . Además, supongamos que los <code>Photo</code>modelos \"tienen muchos\" <code>Tag</code>modelos y los <code>Post</code>modelos \"tienen muchos\" <code>Comment</code>modelos.</p>\n    <p>Ahora, imaginemos que queremos recuperar <code>ActivityFeed</code>instancias y cargar <code>parentable</code>ansiosamente los modelos principales para cada <code>ActivityFeed</code>instancia. Además, queremos recuperar la cantidad de etiquetas asociadas con cada foto principal y la cantidad de comentarios asociados con cada publicación principal:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Relations<span class=\"token punctuation\">\\</span>MorphTo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$activities</span> <span class=\"token operator\">=</span> ActivityFeed<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'parentable'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>MorphTo <span class=\"token variable\">$morphTo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$morphTo</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphWithCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            Photo<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'tags'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'comments'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"morph-to-deferred-count-loading\"><span class=\"link\">Carga de recuento diferido</span></h4>\n    <p>Supongamos que ya hemos recuperado un conjunto de <code>ActivityFeed</code>modelos y ahora nos gustaría cargar los recuentos de relaciones anidadas para los diversos <code>parentable</code>modelos asociados con las fuentes de actividad. Puede usar el <code>loadMorphCount</code>método para lograr esto:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$activities</span> <span class=\"token operator\">=</span> ActivityFeed<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'parentable'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$activities</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">loadMorphCount</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'parentable'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    Photo<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'tags'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'comments'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"eager-loading\"><span class=\"link\">Carga ansiosa</span></h2>\n    <p>Al acceder a las relaciones de Eloquent como propiedades, los modelos relacionados se \"cargan de forma diferida\". Esto significa que los datos de la relación no se cargan realmente hasta que accede por primera vez a la propiedad. Sin embargo, Eloquent puede \"cargar ansiosamente\" relaciones en el momento en que consulta el modelo principal. La carga ansiosa alivia el problema de la consulta \"N + 1\". Para ilustrar el problema de la consulta N + 1, considere un <code>Book</code>modelo que \"pertenece a\" a un <code>Author</code>modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get the author that wrote the book.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">author</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>Author<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Ahora, recuperemos todos los libros y sus autores:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Book</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$books</span> <span class=\"token operator\">=</span> Book<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$books</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$book</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$book</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">author</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Este ciclo ejecutará una consulta para recuperar todos los libros dentro de la tabla de la base de datos, luego otra consulta para cada libro con el fin de recuperar el autor del libro. Entonces, si tenemos 25 libros, el código anterior ejecutaría 26 consultas: una para el libro original y 25 consultas adicionales para recuperar el autor de cada libro.</p>\n    <p>Afortunadamente, podemos usar la carga ansiosa para reducir esta operación a solo dos consultas. Al crear una consulta, puede especificar qué relaciones deben cargarse con entusiasmo utilizando el <code>with</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$books</span> <span class=\"token operator\">=</span> Book<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'author'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$books</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$book</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$book</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">author</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Para esta operación, solo se ejecutarán dos consultas: una consulta para recuperar todos los libros y una consulta para recuperar todos los autores de todos los libros:</p>\n    <pre class=\" language-sql\"><code class=\" language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> books\n\n<span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> authors <span class=\"token keyword\">where</span> id <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></code></pre>\n    \n    <h4 id=\"eager-loading-multiple-relationships\"><span class=\"link\">Ansioso por cargar múltiples relaciones</span></h4>\n    <p>A veces, es posible que necesite cargar ansiosamente varias relaciones diferentes. Para hacerlo, simplemente pase una matriz de relaciones al <code>with</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$books</span> <span class=\"token operator\">=</span> Book<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'author'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'publisher'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"nested-eager-loading\"><span class=\"link\">Carga ansiosa anidada</span></h4>\n    <p>Para cargar ansiosamente las relaciones de una relación, puede usar la sintaxis de \"punto\". Por ejemplo, carguemos ansiosamente todos los autores del libro y todos los contactos personales del autor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$books</span> <span class=\"token operator\">=</span> Book<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'author.contacts'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"nested-eager-loading-morphto-relationships\"><span class=\"link\"><code>morphTo</code>Relaciones de carga ansiosas anidadas</span></h4>\n    <p>Si desea cargar ansiosamente una <code>morphTo</code>relación, así como relaciones anidadas en las diversas entidades que pueden ser devueltas por esa relación, puede usar el <code>with</code>método en combinación con el método de la <code>morphTo</code>relación <code>morphWith</code>. Para ayudar a ilustrar este método, consideremos el siguiente modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ActivityFeed</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get the parent of the activity feed record.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parentable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>En este ejemplo, vamos a suponer <code>Event</code>, <code>Photo</code>y <code>Post</code>modelos pueden crear <code>ActivityFeed</code>modelos. Además, supongamos que los <code>Event</code>modelos pertenecen a un <code>Calendar</code>modelo, los <code>Photo</code>modelos están asociados con <code>Tag</code>modelos y los <code>Post</code>modelos pertenecen a un <code>Author</code>modelo.</p>\n    <p>Usando estas definiciones y relaciones de modelo, podemos recuperar <code>ActivityFeed</code>instancias de modelo y cargar ansiosamente todos los <code>parentable</code>modelos y sus respectivas relaciones anidadas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Relations<span class=\"token punctuation\">\\</span>MorphTo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$activities</span> <span class=\"token operator\">=</span> ActivityFeed<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'parentable'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>MorphTo <span class=\"token variable\">$morphTo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$morphTo</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphWith</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            Event<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'calendar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            Photo<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'tags'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'author'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"eager-loading-specific-columns\"><span class=\"link\">Carga ansiosa de columnas específicas</span></h4>\n    <p>Es posible que no siempre necesite todas las columnas de las relaciones que está recuperando. Por esta razón, Eloquent te permite especificar qué columnas de la relación te gustaría recuperar:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$books</span> <span class=\"token operator\">=</span> Book<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'author:id,name,book_id'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Cuando utilice esta función, siempre debe incluir la <code>id</code>columna y cualquier columna de clave externa relevante en la lista de columnas que desea recuperar.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"eager-loading-by-default\"><span class=\"link\">Carga ansiosa por defecto</span></h4>\n    <p>A veces, es posible que desee cargar siempre algunas relaciones al recuperar un modelo. Para lograr esto, puede definir una <code>$with</code>propiedad en el modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Book</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The relationships that should always be loaded.\n     *\n     * @var array\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$with</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'author'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Get the author that wrote the book.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">author</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>Author<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Get the genre of the book.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">genre</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>Genre<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Si desea eliminar un elemento de la <code>$with</code>propiedad para una sola consulta, puede usar el <code>without</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$books</span> <span class=\"token operator\">=</span> Book<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">without</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'author'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea anular todos los elementos dentro de la <code>$with</code>propiedad para una sola consulta, puede usar el <code>withOnly</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$books</span> <span class=\"token operator\">=</span> Book<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withOnly</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'genre'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"constraining-eager-loads\"><span class=\"link\">Restringir cargas impacientes</span></h3>\n    <p>A veces, es posible que desee cargar una relación con entusiasmo, pero también especificar condiciones de consulta adicionales para la consulta de carga ansiosa. Puede lograr esto pasando una matriz de relaciones al <code>with</code>método donde la clave de la matriz es un nombre de relación y el valor de la matriz es un cierre que agrega restricciones adicionales a la consulta de carga ansiosa:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'posts'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'like'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'%code%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>En este ejemplo, Eloquent solo cargará con entusiasmo publicaciones donde la <code>title</code>columna de la publicación contenga la palabra <code>code</code>. Puede llamar a otros métodos de <span class=\"link\">creación de consultas</span> para personalizar aún más la operación de carga ansiosa:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'posts'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'desc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Es posible que los métodos de generación de consultas <code>limit</code>y <code>take</code>no se utilicen al restringir cargas impacientes.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"constraining-eager-loading-of-morph-to-relationships\"><span class=\"link\">Restringir la carga ansiosa de <code>morphTo</code>relaciones</span></h4>\n    <p>Si está ansioso por cargar una <code>morphTo</code>relación, Eloquent ejecutará varias consultas para buscar cada tipo de modelo relacionado. Puede agregar restricciones adicionales a cada una de estas consultas utilizando el método de la <code>MorphTo</code>relación <code>constrain</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Builder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Relations<span class=\"token punctuation\">\\</span>MorphTo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$comments</span> <span class=\"token operator\">=</span> Comment<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'commentable'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>MorphTo <span class=\"token variable\">$morphTo</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$morphTo</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">constrain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Builder <span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereNull</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'hidden_at'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        Video<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Builder <span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'type'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'educational'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>En este ejemplo, Eloquent solo cargará con entusiasmo publicaciones que no se hayan ocultado y los videos tengan un <code>type</code>valor de \"educativo\".</p>\n    \n    <h3 id=\"lazy-eager-loading\"><span class=\"link\">Carga impaciente perezosa</span></h3>\n    <p>A veces, es posible que deba cargar con entusiasmo una relación después de que el modelo principal ya se haya recuperado. Por ejemplo, esto puede ser útil si necesita decidir dinámicamente si cargar modelos relacionados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Book</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$books</span> <span class=\"token operator\">=</span> Book<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$someCondition</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$books</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'author'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'publisher'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Si necesita establecer restricciones de consulta adicionales en la consulta de carga ansiosa, puede pasar una matriz codificada por las relaciones que desea cargar. Los valores de la matriz deben ser instancias de cierre que reciben la instancia de consulta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$author</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'books'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'published_date'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'asc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Para cargar una relación solo cuando aún no se ha cargado, use el <code>loadMissing</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$book</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">loadMissing</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'author'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"nested-lazy-eager-loading-morphto\"><span class=\"link\">Carga ansiosa perezosa anidada y <code>morphTo</code></span></h4>\n    <p>Si desea cargar ansiosamente una <code>morphTo</code>relación, así como relaciones anidadas en las diversas entidades que pueden ser devueltas por esa relación, puede usar el <code>loadMorph</code>método.</p>\n    <p>Este método acepta el nombre de la <code>morphTo</code>relación como primer argumento y una matriz de pares modelo / relación como segundo argumento. Para ayudar a ilustrar este método, consideremos el siguiente modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ActivityFeed</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get the parent of the activity feed record.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parentable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">morphTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>En este ejemplo, vamos a suponer <code>Event</code>, <code>Photo</code>y <code>Post</code>modelos pueden crear <code>ActivityFeed</code>modelos. Además, supongamos que los <code>Event</code>modelos pertenecen a un <code>Calendar</code>modelo, los <code>Photo</code>modelos están asociados con <code>Tag</code>modelos y los <code>Post</code>modelos pertenecen a un <code>Author</code>modelo.</p>\n    <p>Usando estas definiciones y relaciones de modelo, podemos recuperar <code>ActivityFeed</code>instancias de modelo y cargar ansiosamente todos los <code>parentable</code>modelos y sus respectivas relaciones anidadas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$activities</span> <span class=\"token operator\">=</span> ActivityFeed<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">with</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'parentable'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">loadMorph</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'parentable'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        Event<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'calendar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        Photo<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'tags'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'author'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"preventing-lazy-loading\"><span class=\"link\">Prevención de la carga diferida</span></h3>\n    <p>Como se mencionó anteriormente, las relaciones de carga entusiastas a menudo pueden proporcionar importantes beneficios de rendimiento a su aplicación. Por lo tanto, si lo desea, puede indicar a Laravel que siempre evite la carga perezosa de las relaciones. Para lograr esto, puede invocar el <code>preventLazyLoading</code>método ofrecido por la clase de modelo base Eloquent. Por lo general, debe llamar a este método dentro del <code>boot</code>método de la <code>AppServiceProvider</code>clase de su aplicación .</p>\n    <p>El <code>preventLazyLoading</code>método acepta un argumento booleano opcional que indica si se debe evitar la carga diferida. Por ejemplo, es posible que desee deshabilitar solo la carga diferida en entornos que no sean de producción para que su entorno de producción continúe funcionando normalmente incluso si una relación de carga diferida está presente accidentalmente en el código de producción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Bootstrap any application services.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Model<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">preventLazyLoading</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">app</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isProduction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Después de evitar la carga diferida, Eloquent lanzará una <code>Illuminate\\Database\\LazyLoadingViolationException</code>excepción cuando su aplicación intente cargar de forma diferida cualquier relación de Eloquent.</p>\n    <p>Puede personalizar el comportamiento de las infracciones de carga diferida utilizando el <code>handleLazyLoadingViolationsUsing</code>método. Por ejemplo, con este método, puede indicarle a las infracciones de carga diferida que solo se registren en lugar de interrumpir la ejecución de la aplicación con excepciones:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Model<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">handleLazyLoadingViolationUsing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$model</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$relation</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$class</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_class</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$model</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token double-quoted-string string\">\"Attempted to lazy load [<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$relation</span><span class=\"token punctuation\">}</span></span>] on model [<span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$class</span><span class=\"token punctuation\">}</span></span>].\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"inserting-and-updating-related-models\"><span class=\"link\">Insertar y actualizar modelos relacionados</span></h2>\n    \n    <h3 id=\"the-save-method\"><span class=\"link\">El <code>save</code>método</span></h3>\n    <p>Eloquent proporciona métodos convenientes para agregar nuevos modelos a las relaciones. Por ejemplo, quizás necesite agregar un nuevo comentario a una publicación. En lugar de establecer manualmente el <code>post_id</code>atributo en el <code>Comment</code>modelo, puede insertar el comentario utilizando el <code>save</code>método de la relación :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Comment</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$comment</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'message'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'A new comment.'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$post</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">comments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$comment</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Tenga en cuenta que no accedemos a la <code>comments</code>relación como una propiedad dinámica. En su lugar, llamamos al <code>comments</code>método para obtener una instancia de la relación. El <code>save</code>método agregará automáticamente el <code>post_id</code>valor apropiado al nuevo <code>Comment</code>modelo.</p>\n    <p>Si necesita guardar varios modelos relacionados, puede usar el <code>saveMany</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$post</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">comments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">saveMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'message'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'A new comment.'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'message'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Another new comment.'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Los métodos <code>save</code>y conservarán <code>saveMany</code>las instancias de modelo dadas, pero no agregarán los modelos recién persistentes a ninguna relación en memoria que ya esté cargada en el modelo principal. Si planea acceder a la relación después de usar los métodos <code>save</code>o <code>saveMany</code>, es posible que desee usar el <code>refresh</code>método para volver a cargar el modelo y sus relaciones:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">comments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$comment</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// All comments, including the newly saved comment...</span>\n<span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">comments</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"the-push-method\"><span class=\"link\">Guardar modelos y relaciones de forma recursiva</span></h4>\n    <p>Si desea <code>save</code>su modelo y todas sus relaciones asociadas, puede utilizar el <code>push</code>método. En este ejemplo, <code>Post</code>se guardará el modelo, sus comentarios y los autores del comentario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$post</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">comments</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">message</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'Message'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">comments</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">author</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'Author Name'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"the-create-method\"><span class=\"link\">El <code>create</code>método</span></h3>\n    <p>Además de los métodos <code>save</code>y <code>saveMany</code>, también puede utilizar el <code>create</code>método, que acepta una matriz de atributos, crea un modelo y lo inserta en la base de datos. La diferencia entre <code>save</code>y <code>create</code>es que <code>save</code>acepta una instancia de modelo Eloquent completa mientras que <code>create</code>acepta un PHP simple <code>array</code>. El modelo recién creado será devuelto por el <code>create</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Post</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$post</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$comment</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">comments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'message'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'A new comment.'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede utilizar el <code>createMany</code>método para crear varios modelos relacionados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$post</span> <span class=\"token operator\">=</span> Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">comments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">createMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'message'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'A new comment.'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'message'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Another new comment.'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede utilizar los <code>findOrNew</code>, <code>firstOrNew</code>, <code>firstOrCreate</code>, y <code>updateOrCreate</code>métodos para <span class=\"link\">crear y actualizar los modelos de relaciones</span> .</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Antes de usar el <code>create</code>método, asegúrese de revisar la documentación de la <span class=\"link\">asignación masiva</span> .</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"updating-belongs-to-relationships\"><span class=\"link\">Pertenece a las relaciones</span></h3>\n    <p>Si desea asignar un modelo secundario a un nuevo modelo principal, puede utilizar el <code>associate</code>método. En este ejemplo, el <code>User</code>modelo define una <code>belongsTo</code>relación con el <code>Account</code>modelo. Este <code>associate</code>método establecerá la clave externa en el modelo secundario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Account</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$account</span> <span class=\"token operator\">=</span> Account<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">associate</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$account</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Para eliminar un modelo padre de un modelo hijo, puede usar el <code>dissociate</code>método. Este método establecerá la clave externa de la relación en <code>null</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dissociate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"updating-many-to-many-relationships\"><span class=\"link\">Muchas a muchas relaciones</span></h3>\n    \n    <h4 id=\"attaching-detaching\"><span class=\"link\">Adjuntar / Desmontar</span></h4>\n    <p>Eloquent también proporciona métodos para hacer que trabajar con relaciones de muchos a muchos sea más conveniente. Por ejemplo, imaginemos que un usuario puede tener muchos roles y un rol puede tener muchos usuarios. Puede usar el <code>attach</code>método para adjuntar un rol a un usuario insertando un registro en la tabla intermedia de la relación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$roleId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Al adjuntar una relación a un modelo, también puede pasar una matriz de datos adicionales para insertarlos en la tabla intermedia:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$roleId</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'expires'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$expires</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>A veces, puede ser necesario eliminar un rol de un usuario. Para eliminar un registro de relación de varios a varios, utilice el <code>detach</code>método. El <code>detach</code>método eliminará el registro apropiado de la tabla intermedia; sin embargo, ambos modelos permanecerán en la base de datos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Detach a single role from the user...</span>\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$roleId</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Detach all roles from the user...</span>\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Para mayor comodidad, <code>attach</code>y <code>detach</code>también acepte matrices de ID como entrada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token number\">1</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'expires'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$expires</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'expires'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$expires</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"syncing-associations\"><span class=\"link\">Asociaciones de sincronización</span></h4>\n    <p>También puede utilizar el <code>sync</code>método para construir asociaciones de varios a varios. El <code>sync</code>método acepta una matriz de ID para colocar en la tabla intermedia. Cualquier ID que no esté en la matriz dada se eliminará de la tabla intermedia. Entonces, después de que se complete esta operación, solo los ID de la matriz dada existirán en la tabla intermedia:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede pasar valores de tabla intermedios adicionales con los ID:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'expires'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea insertar los mismos valores de la tabla intermedia con cada uno de los ID de modelo sincronizados, puede usar el <code>syncWithPivotValues</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">syncWithPivotValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'active'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si no desea separar las ID existentes que faltan en la matriz dada, puede usar el <code>syncWithoutDetaching</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">syncWithoutDetaching</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"toggling-associations\"><span class=\"link\">Asociaciones de alternancia</span></h4>\n    <p>La relación de muchos a muchos también proporciona un <code>toggle</code>método que \"alterna\" el estado de adjunto de los ID de modelo relacionados dados. Si la identificación proporcionada está actualmente adjunta, se desvinculará. Asimismo, si actualmente se encuentra desvinculado, se adjuntará:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"updating-a-record-on-the-intermediate-table\"><span class=\"link\">Actualización de un registro en la tabla intermedia</span></h4>\n    <p>Si necesita actualizar una fila existente en la tabla intermedia de su relación, puede usar el <code>updateExistingPivot</code>método. Este método acepta la clave externa del registro intermedio y una matriz de atributos para actualizar:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">roles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">updateExistingPivot</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$roleId</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'active'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"touching-parent-timestamps\"><span class=\"link\">Tocar las marcas de tiempo de los padres</span></h2>\n    <p>Cuando un modelo define una relación <code>belongsTo</code>o <code>belongsToMany</code>con otro modelo, como un <code>Comment</code>que pertenece a a <code>Post</code>, a veces es útil actualizar la marca de tiempo del padre cuando se actualiza el modelo hijo.</p>\n    <p>Por ejemplo, cuando <code>Comment</code>se actualiza un modelo, es posible que desee \"tocar\" automáticamente la <code>updated_at</code>marca de tiempo del propietario <code>Post</code>para que se establezca en la fecha y hora actuales. Para lograr esto, puede agregar una <code>touches</code>propiedad a su modelo secundario que contenga los nombres de las relaciones <code>updated_at</code>cuyas marcas de tiempo deberían actualizarse cuando se actualice el modelo secundario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Comment</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * All of the relationships to be touched.\n     *\n     * @var array\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$touches</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'post'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Get the post that the comment belongs to.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">belongsTo</span><span class=\"token punctuation\">(</span>Post<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Las marcas de tiempo del modelo principal solo se actualizarán si el modelo secundario se actualiza utilizando el <code>save</code>método de Eloquent .</p></p></div>\n    </blockquote>\n</div>"
    },
    {
      "title": "Eloquent: Comenzando",
      "subtitle": "ELOQUENT",
      "contenido": "<div>\n    <h1>Eloquent: Comenzando</h1>\n    <ul>\n        <li><span class=\"link\">Introducción</span></li>\n        <li><span class=\"link\">Generación de clases de modelos</span></li>\n        <li><span class=\"link\">Convenciones de modelos elocuentes</span>\n            <ul>\n                <li><span class=\"link\">Nombres de tablas</span></li>\n                <li><span class=\"link\">Claves primarias</span></li>\n                <li><span class=\"link\">Marcas de tiempo</span></li>\n                <li><span class=\"link\">Conexiones de base de datos</span></li>\n                <li><span class=\"link\">Valores de atributo predeterminados</span></li>\n            </ul></li>\n        <li><span class=\"link\">Recuperando modelos</span>\n            <ul>\n                <li><span class=\"link\">Colecciones</span></li>\n                <li><span class=\"link\">Resultados de fragmentación</span></li>\n                <li><span class=\"link\">Transmisión de resultados con pereza</span></li>\n                <li><span class=\"link\">Cursores</span></li>\n                <li><span class=\"link\">Subconsultas avanzadas</span></li>\n            </ul></li>\n        <li><span class=\"link\">Recuperación de modelos / agregados individuales</span>\n            <ul>\n                <li><span class=\"link\">Recuperar o crear modelos</span></li>\n                <li><span class=\"link\">Recuperando agregados</span></li>\n            </ul></li>\n        <li><span class=\"link\">Insertar y actualizar modelos</span>\n            <ul>\n                <li><span class=\"link\">Inserta</span></li>\n                <li><span class=\"link\">Actualizaciones</span></li>\n                <li><span class=\"link\">Asignación masiva</span></li>\n                <li><span class=\"link\">Upserts</span></li>\n            </ul></li>\n        <li><span class=\"link\">Eliminar modelos</span>\n            <ul>\n                <li><span class=\"link\">Eliminación suave</span></li>\n                <li><span class=\"link\">Consulta de modelos eliminados temporalmente</span></li>\n            </ul></li>\n        <li><span class=\"link\">Modelos de poda</span></li>\n        <li><span class=\"link\">Replicando modelos</span></li>\n        <li><span class=\"link\">Ámbitos de consulta</span>\n            <ul>\n                <li><span class=\"link\">Ámbitos globales</span></li>\n                <li><span class=\"link\">Ámbitos locales</span></li>\n            </ul></li>\n        <li><span class=\"link\">Comparación de modelos</span></li>\n        <li><span class=\"link\">Eventos</span>\n            <ul>\n                <li><span class=\"link\">Usando cierres</span></li>\n                <li><span class=\"link\">Observadores</span></li>\n                <li><span class=\"link\">Silenciar eventos</span></li>\n            </ul></li>\n    </ul>\n    \n    <h2 id=\"introduction\"><span class=\"link\">Introducción</span></h2>\n    <p>Laravel incluye Eloquent, un mapeador relacional de objetos (ORM) que hace que sea agradable interactuar con su base de datos. Cuando se usa Eloquent, cada tabla de la base de datos tiene un \"Modelo\" correspondiente que se usa para interactuar con esa tabla. Además de recuperar registros de la tabla de la base de datos, los modelos Eloquent le permiten insertar, actualizar y eliminar registros de la tabla también.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Antes de comenzar, asegúrese de configurar una conexión de base de datos en el <code>config/database.php</code>archivo de configuración de su aplicación . Para obtener más información sobre cómo configurar su base de datos, consulte <span class=\"link\">la documentación de configuración de la base de datos</span> .</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"generating-model-classes\"><span class=\"link\">Generación de clases de modelos</span></h2>\n    <p>Para comenzar, creemos un modelo Eloquent. Los modelos normalmente viven en el <code>app\\Models</code>directorio y amplían la <code>Illuminate\\Database\\Eloquent\\Model</code>clase. Puede usar el <code>make:model</code> <span class=\"link\">comando Artisan</span> para generar un nuevo modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>model Flight</code></pre>\n    <p>Si desea generar una <span class=\"link\">migración de base de datos</span> cuando genera el modelo, puede usar la opción <code>--migration</code>o <code>-m</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>model Flight <span class=\"token operator\">--</span>migration</code></pre>\n    <p>Puede generar varios otros tipos de clases al generar un modelo, como fábricas, sembradoras y controladores. Además, estas opciones se pueden combinar para crear varias clases a la vez:</p>\n    <pre class=\" language-bash\"><code class=\" language-bash\"><span class=\"token comment\"># Generate a model and a FlightFactory class...</span>\nphp artisan make:model Flight --factory\nphp artisan make:model Flight -f\n\n<span class=\"token comment\"># Generate a model and a FlightSeeder class...</span>\nphp artisan make:model Flight --seed\nphp artisan make:model Flight -s\n\n<span class=\"token comment\"># Generate a model and a FlightController class...</span>\nphp artisan make:model Flight --controller\nphp artisan make:model Flight -c\n\n<span class=\"token comment\"># Generate a model and a migration, factory, seeder, and controller...</span>\nphp artisan make:model Flight -mfsc\n\n<span class=\"token comment\"># Shortcut to generate a model, migration, factory, seeder, and controller...</span>\nphp artisan make:model Flight --all\n\n<span class=\"token comment\"># Generate a pivot model...</span>\nphp artisan make:model Member --pivot</code></pre>\n    \n    <h2 id=\"eloquent-model-conventions\"><span class=\"link\">Convenciones de modelos elocuentes</span></h2>\n    <p>Los modelos generados por el <code>make:model</code>comando se colocarán en el <code>app/Models</code>directorio. Examinemos una clase modelo básica y discutamos algunas de las convenciones clave de Eloquent:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h3 id=\"table-names\"><span class=\"link\">Nombres de tablas</span></h3>\n    <p>Después de echar un vistazo al ejemplo anterior, es posible que haya notado que no le dijimos a Eloquent qué tabla de base de datos corresponde a nuestro <code>Flight</code>modelo. Por convención, el \"caso de serpiente\", el nombre plural de la clase se utilizará como nombre de la tabla a menos que se especifique explícitamente otro nombre. Entonces, en este caso, Eloquent asumirá que el <code>Flight</code>modelo almacena registros en la <code>flights</code>tabla, mientras que un <code>AirTrafficController</code>modelo almacenaría registros en una <code>air_traffic_controllers</code>tabla.</p>\n    <p>Si la tabla de base de datos correspondiente de su modelo no se ajusta a esta convención, puede especificar manualmente el nombre de la tabla del modelo definiendo una <code>table</code>propiedad en el modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The table associated with the model.\n     *\n     * @var string\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$table</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'my_flights'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h3 id=\"primary-keys\"><span class=\"link\">Claves primarias</span></h3>\n    <p>Eloquent también asumirá que la tabla de base de datos correspondiente a cada modelo tiene una columna de clave primaria nombrada <code>id</code>. Si es necesario, puede definir una <code>$primaryKey</code>propiedad protegida en su modelo para especificar una columna diferente que sirva como clave principal de su modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The primary key associated with the table.\n     *\n     * @var string\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$primaryKey</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'flight_id'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Además, Eloquent asume que la clave principal es un valor entero creciente, lo que significa que Eloquent convertirá automáticamente la clave principal en un entero. Si desea utilizar una clave primaria no incremental o no numérica, debe definir una <code>$incrementing</code>propiedad pública en su modelo que esté configurada en <code>false</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Indicates if the model's ID is auto-incrementing.\n     *\n     * @var bool\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$incrementing</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Si la clave principal de su modelo no es un número entero, debe definir una <code>$keyType</code>propiedad protegida en su modelo. Esta propiedad debe tener un valor de <code>string</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The data type of the auto-incrementing ID.\n     *\n     * @var string\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$keyType</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h4 id=\"composite-primary-keys\"><span class=\"link\">Claves primarias \"compuestas\"</span></h4>\n    <p>Eloquent requiere que cada modelo tenga al menos una \"ID\" de identificación única que pueda servir como clave principal. Los modelos Eloquent no admiten claves primarias \"compuestas\". Sin embargo, puede agregar índices únicos de varias columnas adicionales a las tablas de su base de datos, además de la clave principal de identificación exclusiva de la tabla.</p>\n    \n    <h3 id=\"timestamps\"><span class=\"link\">Marcas de tiempo</span></h3>\n    <p>Por defecto, espera que elocuentes <code>created_at</code>y <code>updated_at</code>columnas que existen en la correspondiente tabla de la base de su modelo. Eloquent establecerá automáticamente los valores de estas columnas cuando se creen o actualicen modelos. Si no desea que estas columnas sean administradas automáticamente por Eloquent, debe definir una <code>$timestamps</code>propiedad en su modelo con un valor de <code>false</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Indicates if the model should be timestamped.\n     *\n     * @var bool\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$timestamps</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Si necesita personalizar el formato de las marcas de tiempo de su modelo, establezca la <code>$dateFormat</code>propiedad en su modelo. Esta propiedad determina cómo se almacenan los atributos de fecha en la base de datos, así como su formato cuando el modelo se serializa en una matriz o JSON:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The storage format of the model's date columns.\n     *\n     * @var string\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$dateFormat</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'U'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Si necesita personalizar los nombres de las columnas utilizadas para almacenar las marcas de tiempo, puede definir <code>CREATED_AT</code>y <code>UPDATED_AT</code>constantes en su modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">CREATED_AT</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'creation_date'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">UPDATED_AT</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'updated_date'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h3 id=\"database-connections\"><span class=\"link\">Conexiones de base de datos</span></h3>\n    <p>De forma predeterminada, todos los modelos de Eloquent utilizarán la conexión de base de datos predeterminada que está configurada para su aplicación. Si desea especificar una conexión diferente que debe usarse al interactuar con un modelo en particular, debe definir una <code>$connection</code>propiedad en el modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The database connection that should be used by the model.\n     *\n     * @var string\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$connection</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'sqlite'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h3 id=\"default-attribute-values\"><span class=\"link\">Valores de atributo predeterminados</span></h3>\n    <p>De forma predeterminada, una instancia de modelo recién instanciada no contendrá ningún valor de atributo. Si desea definir los valores predeterminados para algunos de los atributos de su modelo, puede definir una <code>$attributes</code>propiedad en su modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The model's default values for attributes.\n     *\n     * @var array\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$attributes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'delayed'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h2 id=\"retrieving-models\"><span class=\"link\">Recuperando modelos</span></h2>\n    <p>Una vez que haya creado un modelo y <span class=\"link\">su tabla de base de datos asociada</span> , estará listo para comenzar a recuperar datos de su base de datos. Puede pensar en cada modelo de Eloquent como un poderoso <span class=\"link\">generador de consultas</span> que le permite consultar con fluidez la tabla de la base de datos asociada con el modelo. El <code>all</code>método del modelo recuperará todos los registros de la tabla de la base de datos asociada del modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Flight</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span>Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$flight</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"building-queries\"><span class=\"link\">Consultas de construcción</span></h4>\n    <p>El <code>all</code>método Eloquent devolverá todos los resultados en la tabla del modelo. Sin embargo, dado que cada modelo de Eloquent sirve como <span class=\"link\">generador de consultas</span> , puede agregar restricciones adicionales a las consultas y luego invocar el <code>get</code>método para recuperar los resultados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flights</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n               <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span>\n               <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n               <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Dado que los modelos Eloquent son constructores de consultas, debe revisar todos los métodos proporcionados por el <span class=\"link\">constructor de consultas</span> de Laravel . Puede utilizar cualquiera de estos métodos al escribir sus consultas de Eloquent.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"refreshing-models\"><span class=\"link\">Modelos refrescantes</span></h4>\n    <p>Si ya tiene una instancia de un modelo Eloquent que se recuperó de la base de datos, puede \"actualizar\" el modelo usando los métodos <code>fresh</code>y <code>refresh</code>. El <code>fresh</code>método volverá a recuperar el modelo de la base de datos. La instancia del modelo existente no se verá afectada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'FR 900'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$freshFlight</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">fresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>refresh</code>método rehidratará el modelo existente utilizando datos nuevos de la base de datos. Además, todas sus relaciones cargadas también se actualizarán:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'number'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'FR 900'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">number</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'FR 456'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"FR 900\"</span></code></pre>\n    \n    <h3 id=\"collections\"><span class=\"link\">Colecciones</span></h3>\n    <p>Como hemos visto, a los métodos Eloquent les gusta <code>all</code>y <code>get</code>recuperan múltiples registros de la base de datos. Sin embargo, estos métodos no devuelven una matriz PHP simple. En su lugar, <code>Illuminate\\Database\\Eloquent\\Collection</code>se devuelve una instancia de .</p>\n    <p>La <code>Collection</code>clase Eloquent extiende la <code>Illuminate\\Support\\Collection</code>clase base de Laravel , que proporciona una <span class=\"link\">variedad de métodos útiles</span> para interactuar con colecciones de datos. Por ejemplo, el <code>reject</code>método puede usarse para eliminar modelos de una colección en función de los resultados de un cierre invocado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flights</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'destination'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Paris'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flights</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$flights</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$flight</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">cancelled</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Además de los métodos proporcionados por la clase de colección base de Laravel, la clase de colección Eloquent proporciona <span class=\"link\">algunos métodos adicionales</span> que están diseñados específicamente para interactuar con colecciones de modelos Eloquent.</p>\n    <p>Dado que todas las colecciones de Laravel implementan las interfaces iterables de PHP, puede recorrer las colecciones como si fueran una matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$flights</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$flight</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h3 id=\"chunking-results\"><span class=\"link\">Resultados de fragmentación</span></h3>\n    <p>Su aplicación puede quedarse sin memoria si intenta cargar decenas de miles de registros de Eloquent a través de los métodos <code>all</code>o <code>get</code>. En lugar de utilizar estos métodos, el <code>chunk</code>método se puede utilizar para procesar una gran cantidad de modelos de forma más eficiente.</p>\n    <p>El <code>chunk</code>método recuperará un subconjunto de modelos Eloquent, pasándolos a un cierre para su procesamiento. Dado que solo se recupera la parte actual de los modelos Eloquent a la vez, el <code>chunk</code>método proporcionará un uso de memoria significativamente reducido cuando se trabaja con una gran cantidad de modelos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Flight</span><span class=\"token punctuation\">;</span>\n\nFlight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">chunk</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$flights</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$flights</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$flight</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El primer argumento que se pasa al <code>chunk</code>método es el número de registros que desea recibir por \"fragmento\". El cierre pasado como segundo argumento se invocará para cada fragmento que se recupere de la base de datos. Se ejecutará una consulta a la base de datos para recuperar cada fragmento de registros que se pasa al cierre.</p>\n    <p>Si está filtrando los resultados del <code>chunk</code>método en función de una columna que también actualizará mientras itera sobre los resultados, debe usar el <code>chunkById</code>método. El uso del <code>chunk</code>método en estos escenarios podría generar resultados inesperados e inconsistentes. Internamente, el <code>chunkById</code>método siempre recuperará modelos con una <code>id</code>columna mayor que el último modelo en el fragmento anterior:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'departed'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">chunkById</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$flights</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$flights</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">each</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'departed'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$column</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"streaming-results-lazily\"><span class=\"link\">Transmisión de resultados con pereza</span></h3>\n    <p>El <code>lazy</code>método funciona de manera similar a <span class=\"link\">la <code>chunk</code>método</span> en el sentido de que, detrás de las escenas, se ejecuta la consulta en trozos. Sin embargo, en lugar de pasar cada fragmento directamente a una devolución de llamada tal como está, el <code>lazy</code>método devuelve un <span class=\"link\"><code>LazyCollection</code></span>modelo Eloquent plano , que le permite interactuar con los resultados como una única secuencia:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Flight</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span>Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$flight</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Si está filtrando los resultados del <code>lazy</code>método en función de una columna que también actualizará mientras itera sobre los resultados, debe usar el <code>lazyById</code>método. Internamente, el <code>lazyById</code>método siempre recuperará modelos con una <code>id</code>columna mayor que el último modelo en el fragmento anterior:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'departed'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">lazyById</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$column</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">each</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'departed'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"cursors\"><span class=\"link\">Cursores</span></h3>\n    <p>De manera similar al <code>lazy</code>método, el <code>cursor</code>método puede usarse para reducir significativamente el consumo de memoria de su aplicación cuando se itera a través de decenas de miles de registros del modelo Eloquent.</p>\n    <p>El <code>cursor</code>método solo ejecutará una única consulta de base de datos; sin embargo, los modelos individuales de Eloquent no se hidratarán hasta que se repitan. Por lo tanto, solo un modelo Eloquent se mantiene en la memoria en un momento dado mientras se itera sobre el cursor.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Dado que el <code>cursor</code>método solo tiene un solo modelo Eloquent en la memoria a la vez, no puede cargar relaciones ansiosas. Si necesita relaciones de carga ansiosas, considere usar <span class=\"link\">el <code>lazy</code>método en su</span> lugar.</p></p></div>\n    </blockquote>\n    <p>Internamente, el <code>cursor</code>método utiliza <span class=\"link\">generadores</span> PHP para implementar esta funcionalidad:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Flight</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span>Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'destination'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Zurich'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">cursor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$flight</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>El <code>cursor</code>devuelve una <code>Illuminate\\Support\\LazyCollection</code>instancia. <span class=\"link\">Las colecciones perezosas le</span> permiten usar muchos de los métodos de colección disponibles en las colecciones típicas de Laravel mientras solo carga un solo modelo en la memoria a la vez:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">cursor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$users</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Aunque el <code>cursor</code>método usa mucha menos memoria que una consulta normal (al mantener solo un modelo Eloquent en la memoria a la vez), eventualmente se quedará sin memoria. Esto se <span class=\"link\">debe a que el controlador PDO de PHP almacena internamente en caché todos los resultados de las consultas sin procesar en su búfer</span> . Si está tratando con una gran cantidad de registros de Eloquent, considere usar <span class=\"link\">el <code>lazy</code>método en su</span> lugar.</p>\n    \n    <h3 id=\"advanced-subqueries\"><span class=\"link\">Subconsultas avanzadas</span></h3>\n    \n    <h4 id=\"subquery-selects\"><span class=\"link\">Selección de subconsultas</span></h4>\n    <p>Eloquent también ofrece soporte avanzado de subconsultas, lo que le permite extraer información de tablas relacionadas en una sola consulta. Por ejemplo, imaginemos que tenemos una tabla de vuelos <code>destinations</code>y una tabla de <code>flights</code>destinos. La <code>flights</code>tabla contiene una <code>arrived_at</code>columna que indica cuándo llegó el vuelo a destino.</p>\n    <p>Usando la funcionalidad de subconsulta disponible para los métodos <code>select</code>y el constructor de consultas <code>addSelect</code>, podemos seleccionar todos los <code>destinations</code>y el nombre del vuelo que llegó más recientemente a ese destino usando una sola consulta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Destination</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Flight</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> Destination<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">addSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'last_flight'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereColumn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'destination_id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'destinations.id'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderByDesc</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'arrived_at'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"subquery-ordering\"><span class=\"link\">Orden de subconsultas</span></h4>\n    <p>Además, la <code>orderBy</code>función del generador de consultas admite subconsultas. Si continuamos usando nuestro ejemplo de vuelo, podemos usar esta funcionalidad para ordenar todos los destinos en función de cuándo llegó el último vuelo a ese destino. Nuevamente, esto se puede hacer mientras se ejecuta una sola consulta de base de datos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">return</span> Destination<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">orderByDesc</span><span class=\"token punctuation\">(</span>\n    Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'arrived_at'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereColumn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'destination_id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'destinations.id'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderByDesc</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'arrived_at'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"retrieving-single-models\"><span class=\"link\">Recuperación de modelos / agregados individuales</span></h2>\n    <p>Además de recuperar todos los registros que coinciden con una consulta determinada, también puede recuperar registros individuales utilizando los <code>find</code>, <code>first</code>o <code>firstWhere</code>métodos. En lugar de devolver una colección de modelos, estos métodos devuelven una única instancia de modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Flight</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Retrieve a model by its primary key...</span>\n<span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Retrieve the first model matching the query constraints...</span>\n<span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Alternative to retrieving the first model matching the query constraints...</span>\n<span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">firstWhere</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>A veces, es posible que desee recuperar el primer resultado de una consulta o realizar alguna otra acción si no se encuentran resultados. El <code>firstOr</code>método devolverá el primer resultado que coincida con la consulta o, si no se encuentran resultados, ejecutará el cierre dado. El valor devuelto por el cierre se considerará el resultado del <code>firstOr</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$model</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'legs'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">firstOr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"not-found-exceptions\"><span class=\"link\">Excepciones no encontradas</span></h4>\n    <p>A veces, es posible que desee lanzar una excepción si no se encuentra un modelo. Esto es particularmente útil en rutas o controladores. Las <code>findOrFail</code>y <code>firstOrFail</code>los métodos recuperará el primer resultado de la consulta; sin embargo, si no se encuentra ningún resultado, se <code>Illuminate\\Database\\Eloquent\\ModelNotFoundException</code>lanzará un :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">findOrFail</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'legs'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">firstOrFail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si <code>ModelNotFoundException</code>no se detecta, se envía automáticamente una respuesta HTTP 404 al cliente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Flight</span><span class=\"token punctuation\">;</span>\n\nRoute<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/api/flights/{id}'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">findOrFail</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"retrieving-or-creating-models\"><span class=\"link\">Recuperar o crear modelos</span></h3>\n    <p>El <code>firstOrCreate</code>método intentará localizar un registro de base de datos utilizando los pares de columna / valor dados. Si el modelo no se puede encontrar en la base de datos, se insertará un registro con los atributos resultantes de fusionar el primer argumento de matriz con el segundo argumento de matriz opcional:</p>\n    <p>El <code>firstOrNew</code>método, como <code>firstOrCreate</code>, intentará localizar un registro en la base de datos que coincida con los atributos dados. Sin embargo, si no se encuentra un modelo, se devolverá una nueva instancia de modelo. Tenga en cuenta que el modelo devuelto por <code>firstOrNew</code>aún no se ha conservado en la base de datos. Deberá llamar manualmente al <code>save</code>método para conservarlo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Flight</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Retrieve flight by name or create it if it doesn't exist...</span>\n<span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">firstOrCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'London to Paris'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Retrieve flight by name or create it with the name, delayed, and arrival_time attributes...</span>\n<span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">firstOrCreate</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'London to Paris'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'delayed'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'arrival_time'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'11:30'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Retrieve flight by name or instantiate a new Flight instance...</span>\n<span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">firstOrNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'London to Paris'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Retrieve flight by name or instantiate with the name, delayed, and arrival_time attributes...</span>\n<span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">firstOrNew</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Tokyo to Sydney'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'delayed'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'arrival_time'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'11:30'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"retrieving-aggregates\"><span class=\"link\">Recuperando agregados</span></h3>\n    <p>Al interactuar con los modelos elocuentes, también puede utilizar los <code>count</code>, <code>sum</code>, <code>max</code>y otros <span class=\"link\">métodos agregados</span> proporcionados por el laravel <span class=\"link\">generador de consultas</span> . Como era de esperar, estos métodos devuelven un valor escalar en lugar de una instancia de modelo Eloquent:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$count</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$max</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'price'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"inserting-and-updating-models\"><span class=\"link\">Insertar y actualizar modelos</span></h2>\n    \n    <h3 id=\"inserts\"><span class=\"link\">Inserta</span></h3>\n    <p>Por supuesto, cuando usamos Eloquent, no solo necesitamos recuperar modelos de la base de datos. También necesitamos insertar nuevos registros. Afortunadamente, Eloquent lo hace simple. Para insertar un nuevo registro en la base de datos, debe crear una instancia de modelo nuevo y establecer atributos en el modelo. Luego, llame al <code>save</code>método en la instancia del modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Controllers<span class=\"token punctuation\">\\</span>Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Flight</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>Request</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlightController</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Controller</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Store a new flight in the database.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\Response\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">store</span><span class=\"token punctuation\">(</span>Request <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Validate the request...</span>\n\n        <span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Flight</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>En este ejemplo, asignamos el <code>name</code>campo de la solicitud HTTP entrante al <code>name</code>atributo de la <code>App\\Models\\Flight</code>instancia del modelo. Cuando llamamos al <code>save</code>método, se insertará un registro en la base de datos. Las marcas de tiempo <code>created_at</code>y del modelo <code>updated_at</code>se establecerán automáticamente cuando <code>save</code>se llame al método, por lo que no es necesario configurarlas manualmente.</p>\n    <p>Alternativamente, puede usar el <code>create</code>método para \"guardar\" un nuevo modelo usando una sola declaración de PHP. La instancia de modelo insertada le será devuelta por el <code>create</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Flight</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'London to Paris'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Sin embargo, antes de usar el <code>create</code>método, deberá especificar una propiedad <code>fillable</code>o <code>guarded</code>en su clase de modelo. Estas propiedades son necesarias porque todos los modelos de Eloquent están protegidos contra vulnerabilidades de asignación masiva de forma predeterminada. Para obtener más información sobre la asignación masiva, consulte la <span class=\"link\">documentación de la asignación masiva</span> .</p>\n    \n    <h3 id=\"updates\"><span class=\"link\">Actualizaciones</span></h3>\n    <p>El <code>save</code>método también se puede utilizar para actualizar modelos que ya existen en la base de datos. Para actualizar un modelo, debe recuperarlo y establecer los atributos que desee actualizar. Entonces, debes llamar al <code>save</code>método del modelo . Nuevamente, la <code>updated_at</code>marca de tiempo se actualizará automáticamente, por lo que no es necesario establecer su valor manualmente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Flight</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'Paris to London'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"mass-updates\"><span class=\"link\">Actualizaciones masivas</span></h4>\n    <p>Las actualizaciones también se pueden realizar en modelos que coinciden con una consulta determinada. En este ejemplo, todos los vuelos que están <code>active</code>y tienen un <code>destination</code>de <code>San Diego</code>se marcarán como retrasados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'destination'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'San Diego'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'delayed'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>update</code>método espera una matriz de pares de columnas y valores que representan las columnas que deben actualizarse.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Al emitir una actualización masiva a través elocuente, la <code>saving</code>, <code>saved</code>, <code>updating</code>, y <code>updated</code>eventos modelo no será despedido por los modelos actualizados. Esto se debe a que los modelos nunca se recuperan realmente cuando se realiza una actualización masiva.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"examining-attribute-changes\"><span class=\"link\">Examinar los cambios de atributos</span></h4>\n    <p>Elocuente ofrece las <code>isDirty</code>, <code>isClean</code>y <code>wasChanged</code>los métodos para examinar el estado interno de su modelo y determinar cómo sus atributos han cambiado desde que el modelo fue recuperada en un principio.</p>\n    <p>El <code>isDirty</code>método determina si alguno de los atributos del modelo ha cambiado desde que se recuperó el modelo. Puede pasar un nombre de atributo específico al <code>isDirty</code>método para determinar si un atributo en particular está sucio. El <code>isClean</code>determinará si un atributo no ha cambiado desde que se recuperó el modelo. Este método también acepta un argumento de atributo opcional:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'first_name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'last_name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Otwell'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Developer'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">title</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'Painter'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isDirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isDirty</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isDirty</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'first_name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isClean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isClean</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isClean</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'first_name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isDirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isClean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre>\n    <p>El <code>wasChanged</code>método determina si se cambió algún atributo cuando el modelo se guardó por última vez dentro del ciclo de solicitud actual. Si es necesario, puede pasar un nombre de atributo para ver si se cambió un atributo en particular:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'first_name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'last_name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Otwell'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'title'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Developer'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">title</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'Painter'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">wasChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">wasChanged</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">wasChanged</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'first_name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre>\n    <p>El <code>getOriginal</code>método devuelve una matriz que contiene los atributos originales del modelo independientemente de los cambios realizados en el modelo desde que se recuperó. Si es necesario, puede pasar un nombre de atributo específico para obtener el valor original de un atributo en particular:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// John</span>\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">email</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// john@example.com</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"Jack\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Jack</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getOriginal</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// John</span>\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getOriginal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Array of original attributes...</span></code></pre>\n    \n    <h3 id=\"mass-assignment\"><span class=\"link\">Asignación masiva</span></h3>\n    <p>Puede usar el <code>create</code>método para \"guardar\" un nuevo modelo usando una sola declaración PHP. La instancia de modelo insertada le será devuelta por el método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Flight</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'London to Paris'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Sin embargo, antes de usar el <code>create</code>método, deberá especificar una propiedad <code>fillable</code>o <code>guarded</code>en su clase de modelo. Estas propiedades son necesarias porque todos los modelos de Eloquent están protegidos contra vulnerabilidades de asignación masiva de forma predeterminada.</p>\n    <p>Una vulnerabilidad de asignación masiva ocurre cuando un usuario pasa un campo de solicitud HTTP inesperado y ese campo cambia una columna en su base de datos que no esperaba. Por ejemplo, un usuario malintencionado puede enviar un <code>is_admin</code>parámetro a través de una solicitud HTTP, que luego se pasa al <code>create</code>método de su modelo , lo que permite al usuario escalar a un administrador.</p>\n    <p>Por lo tanto, para comenzar, debe definir qué atributos del modelo desea hacer asignables en masa. Puede hacer esto usando la <code>$fillable</code>propiedad en el modelo. Por ejemplo, hagamos que el <code>name</code>atributo de nuestro <code>Flight</code>modelo sea asignable en masa:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$fillable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Una vez que haya especificado qué atributos son asignables en masa, puede usar el <code>create</code>método para insertar un nuevo registro en la base de datos. El <code>create</code>método devuelve la instancia de modelo recién creada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'London to Paris'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si ya tiene una instancia de modelo, puede usar el <code>fill</code>método para completarla con una matriz de atributos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Amsterdam to Frankfurt'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"mass-assignment-json-columns\"><span class=\"link\">Asignación masiva y columnas JSON</span></h4>\n    <p>Al asignar columnas JSON, la clave asignable en masa de cada columna debe especificarse en la <code>$fillable</code>matriz de su modelo . Por seguridad, Laravel no admite la actualización de atributos JSON anidados cuando se usa la <code>guarded</code>propiedad:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The attributes that are mass assignable.\n *\n * @var array\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$fillable</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'options-&gt;enabled'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"allowing-mass-assignment\"><span class=\"link\">Permitir la asignación masiva</span></h4>\n    <p>Si desea que todos sus atributos sean asignables en masa, puede definir la <code>$guarded</code>propiedad de su modelo como una matriz vacía. Si decide unguard su modelo, se debe tener especial cuidado para siempre artesanal, los arrays pasados a elocuentes <code>fill</code>, <code>create</code>y <code>update</code>métodos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * The attributes that aren't mass assignable.\n *\n * @var array\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token variable\">$guarded</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"upserts\"><span class=\"link\">Upserts</span></h3>\n    <p>Ocasionalmente, es posible que deba actualizar un modelo existente o crear un modelo nuevo si no existe un modelo coincidente. Al igual que el <code>firstOrCreate</code>método, el <code>updateOrCreate</code>método conserva el modelo, por lo que no es necesario llamarlo manualmente <code>save</code>.</p>\n    <p>En el siguiente ejemplo, si existe un vuelo con una <code>departure</code>ubicación de <code>Oakland</code>y una <code>destination</code>ubicación de <code>San Diego</code>, se actualizarán sus columnas <code>price</code>y <code>discounted</code>. Si no existe tal vuelo, se creará un nuevo vuelo que tiene los atributos resultantes de fusionar la primera matriz de argumentos con la segunda matriz de argumentos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">updateOrCreate</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'departure'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Oakland'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'destination'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'San Diego'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'discounted'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea realizar múltiples \"upserts\" en una sola consulta, entonces debería usar el <code>upsert</code>método en su lugar. El primer argumento del método consiste en los valores para insertar o actualizar, mientras que el segundo argumento enumera las columnas que identifican de manera única los registros dentro de la tabla asociada. El tercer y último argumento del método es una matriz de las columnas que deben actualizarse si ya existe un registro coincidente en la base de datos. El <code>upsert</code>método establecerá automáticamente las marcas de tiempo <code>created_at</code>y <code>updated_at</code>si las marcas de tiempo están habilitadas en el modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">upsert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'departure'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Oakland'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'destination'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'San Diego'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">99</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'departure'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Chicago'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'destination'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'New York'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'price'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">150</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'departure'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'destination'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'price'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Todos los sistemas de bases de datos, excepto SQL Server, requieren que las columnas del segundo argumento proporcionado al <code>upsert</code>método tengan un índice \"principal\" o \"único\".</p></p></div>\n    </blockquote>\n    \n    <h2 id=\"deleting-models\"><span class=\"link\">Eliminar modelos</span></h2>\n    <p>Para eliminar un modelo, puede llamar al <code>delete</code>método en la instancia del modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Flight</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede llamar al <code>truncate</code>método para eliminar todos los registros de la base de datos asociados al modelo. La <code>truncate</code>operación también restablecerá cualquier ID de incremento automático en la tabla asociada del modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">truncate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"deleting-an-existing-model-by-its-primary-key\"><span class=\"link\">Eliminar un modelo existente por su clave principal</span></h4>\n    <p>En el ejemplo anterior, recuperamos el modelo de la base de datos antes de llamar al <code>delete</code>método. Sin embargo, si conoce la clave principal del modelo, puede eliminar el modelo sin recuperarlo explícitamente llamando al <code>destroy</code>método. Además de aceptar la clave primaria única, el <code>destroy</code>método aceptará múltiples claves primarias, una matriz de claves primarias o una <span class=\"link\">colección</span> de claves primarias:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nFlight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nFlight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nFlight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>El <code>destroy</code>método carga cada modelo individualmente y llama al <code>delete</code>método para que los eventos <code>deleting</code>y <code>deleted</code>se distribuyan correctamente para cada modelo.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"deleting-models-using-queries\"><span class=\"link\">Eliminar modelos mediante consultas</span></h4>\n    <p>Por supuesto, puede crear una consulta Eloquent para eliminar todos los modelos que coincidan con los criterios de su consulta. En este ejemplo, eliminaremos todos los vuelos marcados como inactivos. Al igual que las actualizaciones masivas, las eliminaciones masivas no enviarán eventos de modelo para los modelos que se eliminan:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$deletedRows</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Al ejecutar una declaración de eliminación masiva a través de Eloquent, los eventos de modelo <code>deleting</code>y <code>deleted</code>no se enviarán para los modelos eliminados. Esto se debe a que los modelos nunca se recuperan realmente cuando se ejecuta la instrucción de eliminación.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"soft-deleting\"><span class=\"link\">Eliminación suave</span></h3>\n    <p>Además de eliminar registros de su base de datos, Eloquent también puede \"eliminar suavemente\" modelos. Cuando los modelos se eliminan temporalmente, en realidad no se eliminan de su base de datos. En su lugar, <code>deleted_at</code>se establece un atributo en el modelo que indica la fecha y hora en que se \"eliminó\" el modelo. Para habilitar eliminaciones suaves para un modelo, agregue el <code>Illuminate\\Database\\Eloquent\\SoftDeletes</code>rasgo al modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>SoftDeletes</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> <span class=\"token package\">SoftDeletes</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>El <code>SoftDeletes</code>rasgo emitirá automáticamente el <code>deleted_at</code>atributo a una instancia <code>DateTime</code>/ <code>Carbon</code>por ti.</p></p></div>\n    </blockquote>\n    <p>También debe agregar la <code>deleted_at</code>columna a la tabla de su base de datos. El <span class=\"link\">constructor de esquemas de</span> Laravel contiene un método auxiliar para crear esta columna:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Schema<span class=\"token punctuation\">\\</span>Blueprint</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Schema</span><span class=\"token punctuation\">;</span>\n\nSchema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'flights'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">softDeletes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nSchema<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'flights'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dropSoftDeletes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Ahora, cuando llame al <code>delete</code>método en el modelo, la <code>deleted_at</code>columna se establecerá en la fecha y hora actuales. Sin embargo, el registro de la base de datos del modelo se dejará en la tabla. Al consultar un modelo que utiliza eliminaciones temporales, los modelos eliminados temporalmente se excluirán automáticamente de todos los resultados de la consulta.</p>\n    <p>Para determinar si una instancia de modelo determinada se ha eliminado temporalmente, puede utilizar el <code>trashed</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">trashed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h4 id=\"restoring-soft-deleted-models\"><span class=\"link\">Restauración de modelos eliminados por software</span></h4>\n    <p>A veces, es posible que desee \"anular la eliminación\" de un modelo eliminado temporalmente. Para restaurar un modelo eliminado temporalmente, puede llamar al <code>restore</code>método en una instancia de modelo. El <code>restore</code>método establecerá la <code>deleted_at</code>columna del modelo en <code>null</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede utilizar el <code>restore</code>método en una consulta para restaurar varios modelos. Nuevamente, al igual que otras operaciones \"masivas\", esto no enviará ningún evento de modelo para los modelos que se restauran:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withTrashed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'airline_id'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>restore</code>método también se puede utilizar al crear consultas de <span class=\"link\">relaciones</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">history</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">restore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"permanently-deleting-models\"><span class=\"link\">Eliminar modelos de forma permanente</span></h4>\n    <p>A veces, es posible que necesite eliminar realmente un modelo de su base de datos. Puede usar el <code>forceDelete</code>método para eliminar permanentemente un modelo eliminado temporalmente de la tabla de la base de datos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">forceDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede utilizar el <code>forceDelete</code>método al crear consultas de relación Eloquent:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">history</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">forceDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"querying-soft-deleted-models\"><span class=\"link\">Consulta de modelos eliminados temporalmente</span></h3>\n    \n    <h4 id=\"including-soft-deleted-models\"><span class=\"link\">Incluyendo modelos eliminados suavemente</span></h4>\n    <p>Como se indicó anteriormente, los modelos eliminados temporalmente se excluirán automáticamente de los resultados de la consulta. Sin embargo, puede forzar que los modelos eliminados temporalmente se incluyan en los resultados de una consulta llamando al <code>withTrashed</code>método en la consulta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Flight</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flights</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withTrashed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'account_id'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>withTrashed</code>método también se puede llamar al crear una consulta de <span class=\"link\">relación</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">history</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withTrashed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"retrieving-only-soft-deleted-models\"><span class=\"link\">Recuperar solo modelos eliminados temporalmente</span></h4>\n    <p>El <code>onlyTrashed</code>método recuperará <strong>solo</strong> modelos eliminados temporalmente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flights</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">onlyTrashed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'airline_id'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"pruning-models\"><span class=\"link\">Modelos de poda</span></h2>\n    <p>A veces, es posible que desee eliminar periódicamente los modelos que ya no son necesarios. Para lograr esto, puede agregar el rasgo <code>Illuminate\\Database\\Eloquent\\Prunable</code>o <code>Illuminate\\Database\\Eloquent\\MassPrunable</code>a los modelos que le gustaría podar periódicamente. Después de agregar uno de los rasgos al modelo, implemente un <code>prunable</code>método que devuelva un generador de consultas Eloquent que resuelva los modelos que ya no son necesarios:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Prunable</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> <span class=\"token package\">Prunable</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Get the prunable model query.\n     *\n     * @return \\Illuminate\\Database\\Eloquent\\Builder\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">prunable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">static</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&lt;='</span><span class=\"token punctuation\">,</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">subMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Al marcar modelos como <code>Prunable</code>, también puede definir un <code>pruning</code>método en el modelo. Este método se llamará antes de que se elimine el modelo. Este método puede ser útil para eliminar cualquier recurso adicional asociado con el modelo, como archivos almacenados, antes de que el modelo se elimine permanentemente de la base de datos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Prepare the model for pruning.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">pruning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Después de configurar su modelo podable, debe programar el <code>model:prune</code>comando Artisan en la <code>App\\Console\\Kernel</code>clase de su aplicación . Puede elegir el intervalo apropiado en el que se debe ejecutar este comando:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">/**\n * Define the application's command schedule.\n *\n * @param  \\Illuminate\\Console\\Scheduling\\Schedule  $schedule\n * @return void\n */</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>Schedule <span class=\"token variable\">$schedule</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'model:prune'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Detrás de escena, el <code>model:prune</code>comando detectará automáticamente modelos \"Prunable\" dentro del <code>app/Models</code>directorio de su aplicación . Si sus modelos están en una ubicación diferente, puede usar la <code>--model</code>opción para especificar los nombres de las clases del modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$schedule</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">command</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'model:prune'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'--model'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>Address<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">daily</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Los modelos de eliminación suave se eliminarán permanentemente ( <code>forceDelete</code>) si coinciden con la consulta que se puede eliminar .</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"mass-pruning\"><span class=\"link\">Poda masiva</span></h4>\n    <p>Cuando los modelos están marcados con el <code>Illuminate\\Database\\Eloquent\\MassPrunable</code>rasgo, los modelos se eliminan de la base de datos mediante consultas de eliminación masiva. Por lo tanto, <code>pruning</code>no se invocará el método ni se distribuirán los eventos <code>deleting</code>y <code>deleted</code>model. Esto se debe a que los modelos nunca se recuperan antes de la eliminación, lo que hace que el proceso de poda sea mucho más eficiente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>MassPrunable</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flight</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> <span class=\"token package\">MassPrunable</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Get the prunable model query.\n     *\n     * @return \\Illuminate\\Database\\Eloquent\\Builder\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">prunable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">static</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&lt;='</span><span class=\"token punctuation\">,</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">subMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h2 id=\"replicating-models\"><span class=\"link\">Replicando modelos</span></h2>\n    <p>Puede crear una copia no guardada de una instancia de modelo existente usando el <code>replicate</code>método. Este método es particularmente útil cuando tiene instancias de modelo que comparten muchos de los mismos atributos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>Address</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$shipping</span> <span class=\"token operator\">=</span> Address<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'shipping'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'line_1'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'123 Example Street'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'city'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Victorville'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'state'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'CA'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'postcode'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'90001'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$billing</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$shipping</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">replicate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'type'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'billing'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$billing</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Para excluir uno o más atributos de la replicación en el nuevo modelo, puede pasar una matriz al <code>replicate</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> Flight<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'destination'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'LAX'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'origin'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'LHR'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'last_flown'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'2020-03-04 11:00:00'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'last_pilot_id'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token number\">747</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$flight</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$flight</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">replicate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'last_flown'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'last_pilot_id'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"query-scopes\"><span class=\"link\">Ámbitos de consulta</span></h2>\n    \n    <h3 id=\"global-scopes\"><span class=\"link\">Ámbitos globales</span></h3>\n    <p>Los ámbitos globales le permiten agregar restricciones a todas las consultas para un modelo determinado. La propia funcionalidad de <span class=\"link\">eliminación suave de</span> Laravel utiliza ámbitos globales para recuperar solo modelos \"no eliminados\" de la base de datos. Escribir sus propios alcances globales puede proporcionar una manera conveniente y fácil de asegurarse de que cada consulta para un modelo dado reciba ciertas restricciones.</p>\n    \n    <h4 id=\"writing-global-scopes\"><span class=\"link\">Escribir alcances globales</span></h4>\n    <p>Escribir un alcance global es simple. Primero, defina una clase que implemente la <code>Illuminate\\Database\\Eloquent\\Scope</code>interfaz. Laravel no tiene una ubicación convencional en la que deba colocar clases de alcance, por lo que puede colocar esta clase en cualquier directorio que desee.</p>\n    <p>La <code>Scope</code>interfaz requiere que se implemente un método: <code>apply</code>. El <code>apply</code>método puede agregar <code>where</code>restricciones u otros tipos de cláusulas a la consulta según sea necesario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Scopes</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Builder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Scope</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">AncientScope</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Scope</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Apply the scope to a given Eloquent query builder.\n     *\n     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $builder\n     * @param  \\Illuminate\\Database\\Eloquent\\Model  $model\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>Builder <span class=\"token variable\">$builder</span><span class=\"token punctuation\">,</span> Model <span class=\"token variable\">$model</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$builder</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&lt;'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">subYears</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Si su alcance global está agregando columnas a la cláusula select de la consulta, debe usar el <code>addSelect</code>método en lugar de <code>select</code>. Esto evitará el reemplazo involuntario de la cláusula select existente de la consulta.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"applying-global-scopes\"><span class=\"link\">Aplicar alcances globales</span></h4>\n    <p>Para asignar un alcance global a un modelo, debe anular el <code>booted</code>método del modelo e invocar el <code>addGlobalScope</code>método del modelo . El <code>addGlobalScope</code>método acepta una instancia de su alcance como su único argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Scopes<span class=\"token punctuation\">\\</span>AncientScope</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The \"booted\" method of the model.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">booted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">static</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">addGlobalScope</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AncientScope</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Después de agregar el alcance en el ejemplo anterior al <code>App\\Models\\User</code>modelo, una llamada al <code>User::all()</code>método ejecutará la siguiente consulta SQL:</p>\n    <pre class=\" language-sql\"><code class=\" language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">`</span>users<span class=\"token punctuation\">`</span> <span class=\"token keyword\">where</span> <span class=\"token punctuation\">`</span>created_at<span class=\"token punctuation\">`</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0021</span><span class=\"token operator\">-</span><span class=\"token number\">02</span><span class=\"token operator\">-</span><span class=\"token number\">18</span> <span class=\"token number\">00</span>:<span class=\"token number\">00</span>:<span class=\"token number\">00</span></code></pre>\n    \n    <h4 id=\"anonymous-global-scopes\"><span class=\"link\">Ámbitos globales anónimos</span></h4>\n    <p>Eloquent también le permite definir alcances globales usando cierres, lo cual es particularmente útil para alcances simples que no justifican una clase separada propia. Al definir un alcance global usando un cierre, debe proporcionar un nombre de alcance de su propia elección como primer argumento del <code>addGlobalScope</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Builder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The \"booted\" method of the model.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">booted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">static</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">addGlobalScope</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'ancient'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Builder <span class=\"token variable\">$builder</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$builder</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&lt;'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">subYears</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h4 id=\"removing-global-scopes\"><span class=\"link\">Eliminar ámbitos globales</span></h4>\n    <p>Si desea eliminar un alcance global para una consulta determinada, puede usar el <code>withoutGlobalScope</code>método. Este método acepta el nombre de clase del ámbito global como su único argumento:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withoutGlobalScope</span><span class=\"token punctuation\">(</span>AncientScope<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>O, si definió el alcance global usando un cierre, debe pasar el nombre de cadena que asignó al alcance global:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withoutGlobalScope</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'ancient'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si desea eliminar varios o incluso todos los ámbitos globales de la consulta, puede usar el <code>withoutGlobalScopes</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Remove all of the global scopes...</span>\nUser<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withoutGlobalScopes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Remove some of the global scopes...</span>\nUser<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withoutGlobalScopes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    FirstScope<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> SecondScope<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"local-scopes\"><span class=\"link\">Ámbitos locales</span></h3>\n    <p>Los ámbitos locales le permiten definir conjuntos comunes de restricciones de consulta que puede reutilizar fácilmente en toda su aplicación. Por ejemplo, es posible que deba recuperar con frecuencia todos los usuarios que se consideran \"populares\". Para definir un alcance, anteponga un método de modelo Eloquent con <code>scope</code>.</p>\n    <p>Los ámbitos siempre deben devolver una instancia del generador de consultas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Scope a query to only include popular users.\n     *\n     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n     * @return \\Illuminate\\Database\\Eloquent\\Builder\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">scopePopular</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'votes'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'&gt;'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Scope a query to only include active users.\n     *\n     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n     * @return \\Illuminate\\Database\\Eloquent\\Builder\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">scopeActive</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h4 id=\"utilizing-a-local-scope\"><span class=\"link\">Utilizando un alcance local</span></h4>\n    <p>Una vez que se ha definido el alcance, puede llamar a los métodos de alcance al consultar el modelo. Sin embargo, no debe incluir el <code>scope</code>prefijo al llamar al método. Incluso puede encadenar llamadas a varios ámbitos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">popular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">active</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'created_at'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>La combinación de múltiples alcances del modelo Eloquent a través de un <code>or</code>operador de consulta puede requerir el uso de cierres para lograr la <span class=\"link\">agrupación lógica</span> correcta :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">popular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">orWhere</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Builder <span class=\"token variable\">$query</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">active</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Sin embargo, dado que esto puede ser engorroso, Laravel proporciona un <code>orWhere</code>método de \"orden superior\" que le permite encadenar con fluidez los ámbitos sin el uso de cierres:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> App\\<span class=\"token package\">Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">popular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">orWhere</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">active</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"dynamic-scopes\"><span class=\"link\">Ámbitos dinámicos</span></h4>\n    <p>A veces, es posible que desee definir un ámbito que acepte parámetros. Para comenzar, simplemente agregue sus parámetros adicionales a la firma de su método de alcance. Los parámetros de alcance deben definirse después del <code>$query</code>parámetro:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Scope a query to only include users of a given type.\n     *\n     * @param  \\Illuminate\\Database\\Eloquent\\Builder  $query\n     * @param  mixed  $type\n     * @return \\Illuminate\\Database\\Eloquent\\Builder\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">scopeOfType</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$query</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$query</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'type'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Una vez que se han agregado los argumentos esperados a la firma de su método de alcance, puede pasar los argumentos al llamar al alcance:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$users</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">ofType</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'admin'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"comparing-models\"><span class=\"link\">Comparación de modelos</span></h2>\n    <p>A veces, es posible que deba determinar si dos modelos son \"iguales\" o no. Los métodos <code>is</code>y <code>isNot</code>se pueden usar para verificar rápidamente que dos modelos tienen la misma clave principal, tabla y conexión de base de datos o no:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$anotherPost</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">isNot</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$anotherPost</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>El <code>is</code>y <code>isNot</code>métodos también están disponibles cuando se utilizan las <code>belongsTo</code>, <code>hasOne</code>, <code>morphTo</code>, y <code>morphOne</code> <span class=\"link\">las relaciones</span> . Este método es particularmente útil cuando desea comparar un modelo relacionado sin emitir una consulta para recuperar ese modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">author</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    \n    <h2 id=\"events\"><span class=\"link\">Eventos</span></h2>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>¿Quiere transmitir sus eventos Eloquent directamente a su aplicación del lado del cliente? Echa un vistazo a la <span class=\"link\">transmisión de eventos modelo</span> de Laravel .</p></p></div>\n    </blockquote>\n    <p>Modelos elocuentes envían varios eventos, lo que le permite enganchar en los siguientes momentos del ciclo de vida de un modelo: <code>retrieved</code>, <code>creating</code>, <code>created</code>, <code>updating</code>, <code>updated</code>, <code>saving</code>, <code>saved</code>, <code>deleting</code>, <code>deleted</code>, <code>restoring</code>, <code>restored</code>, y <code>replicating</code>.</p>\n    <p>El <code>retrieved</code>evento se distribuirá cuando se recupere un modelo existente de la base de datos. Cuando se guarda un nuevo modelo por primera vez, los eventos <code>creating</code>y <code>created</code>se enviarán. Los eventos <code>updating</code>/ <code>updated</code>se distribuirán cuando se modifique un modelo existente y <code>save</code>se llame al método. Los eventos <code>saving</code>/ <code>saved</code>se distribuirán cuando se cree o actualice un modelo, incluso si los atributos del modelo no se han cambiado. Los nombres de eventos que terminan en <code>-ing</code>se envían antes de que se conserven los cambios en el modelo, mientras que los eventos que terminan en <code>-ed</code>se envían después de que se conservan los cambios en el modelo.</p>\n    <p>Para comenzar a escuchar los eventos del modelo, defina una <code>$dispatchesEvents</code>propiedad en su modelo Eloquent. Esta propiedad asigna varios puntos del ciclo de vida del modelo Eloquent a sus propias <span class=\"link\">clases de eventos</span> . Cada clase de evento de modelo debe esperar recibir una instancia del modelo afectado a través de su constructor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>UserDeleted</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Events<span class=\"token punctuation\">\\</span>UserSaved</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Auth<span class=\"token punctuation\">\\</span>User</span> <span class=\"token keyword\">as</span> Authenticatable<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Authenticatable</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">use</span> <span class=\"token package\">Notifiable</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * The event map for the model.\n     *\n     * @var array\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$dispatchesEvents</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'saved'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> UserSaved<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'deleted'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> UserDeleted<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Después de definir y mapear sus eventos Eloquent, puede usar <span class=\"link\">detectores de eventos</span> para manejar los eventos.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-red-600 lg:mb-0\"><img src=\"/img/callouts/exclamation.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Al emitir una actualización masiva o consulta de eliminación a través elocuente, la <code>saved</code>, <code>updated</code>, <code>deleting</code>, y <code>deleted</code>eventos modelo no serán enviados por los modelos afectados. Esto se debe a que los modelos nunca se recuperan realmente cuando se realizan actualizaciones o eliminaciones masivas.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"events-using-closures\"><span class=\"link\">Usando cierres</span></h3>\n    <p>En lugar de utilizar clases de eventos personalizadas, puede registrar cierres que se ejecutan cuando se envían varios eventos de modelo. Por lo general, debe registrar estos cierres en el <code>booted</code>método de su modelo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Eloquent<span class=\"token punctuation\">\\</span>Model</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * The \"booted\" method of the model.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">booted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">static</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Si es necesario, puede utilizar <span class=\"link\">detectores de eventos anónimos</span> que se pueden <span class=\"link\">poner en cola</span> al registrar eventos de modelo. Esto le indicará a Laravel que ejecute el detector de eventos modelo en segundo plano usando la <span class=\"link\">cola de</span> su aplicación :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">function</span> Illuminate\\<span class=\"token package\">Events<span class=\"token punctuation\">\\</span>queueable</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token function\">queueable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"observers\"><span class=\"link\">Observadores</span></h3>\n    \n    <h4 id=\"defining-observers\"><span class=\"link\">Definición de observadores</span></h4>\n    <p>Si está escuchando muchos eventos en un modelo dado, puede usar observadores para agrupar a todos sus oyentes en una sola clase. Las clases de observadores tienen nombres de métodos que reflejan los eventos elocuentes que desea escuchar. Cada uno de estos métodos recibe el modelo afectado como único argumento. El <code>make:observer</code>comando Artisan es la forma más sencilla de crear una nueva clase de observador:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">php artisan make<span class=\"token punctuation\">:</span>observer UserObserver <span class=\"token operator\">--</span>model<span class=\"token operator\">=</span>User</code></pre>\n    <p>Este comando colocará al nuevo observador en su <code>App/Observers</code>directorio. Si este directorio no existe, Artisan lo creará por usted. Su nuevo observador tendrá el siguiente aspecto:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Observers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserObserver</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Handle the User \"created\" event.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">created</span><span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Handle the User \"updated\" event.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updated</span><span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Handle the User \"deleted\" event.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">deleted</span><span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * Handle the User \"forceDeleted\" event.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">forceDeleted</span><span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Para registrar un observador, debe llamar al <code>observe</code>método en el modelo que desea observar. Puede registrar observadores en el <code>boot</code>método del <code>App\\Providers\\EventServiceProvider</code>proveedor de servicios de su aplicación :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Observers<span class=\"token punctuation\">\\</span>UserObserver</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Register any events for your application.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">boot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>UserObserver<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>Hay eventos adicionales que un observador puede escuchar, como <code>saving</code>y <code>retrieved</code>. Estos eventos se describen en la documentación de <span class=\"link\">eventos</span> .</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"observers-and-database-transactions\"><span class=\"link\">Observadores y transacciones de bases de datos</span></h4>\n    <p>Cuando se crean modelos dentro de una transacción de base de datos, es posible que desee indicarle a un observador que solo ejecute sus controladores de eventos después de que se confirme la transacción de la base de datos. Puede lograr esto definiendo una <code>$afterCommit</code>propiedad en el observador. Si una transacción de la base de datos no está en curso, los controladores de eventos se ejecutarán inmediatamente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Observers</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserObserver</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Handle events after all transactions are committed.\n     *\n     * @var bool\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$afterCommit</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * Handle the User \"created\" event.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">created</span><span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h3 id=\"muting-events\"><span class=\"link\">Silenciar eventos</span></h3>\n    <p>En ocasiones, es posible que deba \"silenciar\" temporalmente todos los eventos activados por un modelo. Puede lograr esto usando el <code>withoutEvents</code>método. El <code>withoutEvents</code>método acepta un cierre como único argumento. Cualquier código ejecutado dentro de este cierre no enviará eventos de modelo. Por ejemplo, el siguiente ejemplo buscará y eliminará una <code>App\\Models\\User</code>instancia sin enviar ningún evento de modelo. Cualquier valor devuelto por el cierre será devuelto por el <code>withoutEvents</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">withoutEvents</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">use</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">findOrFail</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"saving-a-single-model-without-events\"><span class=\"link\">Guardar un solo modelo sin eventos</span></h4>\n    <p>A veces, es posible que desee \"guardar\" un modelo determinado sin enviar ningún evento. Puede lograr esto usando el <code>saveQuietly</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">findOrFail</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'Victoria Faith'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">saveQuietly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div>"
    },
    {
      "title": "Pruebas HTTP",
      "subtitle": "TEST",
      "contenido": "<div>\n    <h1>Pruebas HTTP</h1>    \n    <h2 id=\"introduction\"><span class=\"link\">Introducción</span></h2>\n    <p>Laravel proporciona una API muy fluida para realizar solicitudes HTTP a su aplicación y examinar las respuestas. Por ejemplo, eche un vistazo a la prueba de características que se define a continuación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>Feature</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Testing<span class=\"token punctuation\">\\</span>RefreshDatabase</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Testing<span class=\"token punctuation\">\\</span>WithoutMiddleware</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>TestCase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TestCase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * A basic test example.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test_a_basic_request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>El <code>get</code>método realiza una <code>GET</code>solicitud en la aplicación, mientras que el <code>assertStatus</code>método afirma que la respuesta devuelta debe tener el código de estado HTTP dado. Además de esta simple afirmación, Laravel también contiene una variedad de afirmaciones para inspeccionar los encabezados de respuesta, el contenido, la estructura JSON y más.</p>\n    \n    <h2 id=\"making-requests\"><span class=\"link\">Haciendo peticiones</span></h2>\n    <p>Para hacer una solicitud a su aplicación, es posible invocar el <code>get</code>, <code>post</code>, <code>put</code>, <code>patch</code>, o <code>delete</code>métodos dentro de su prueba. Estos métodos en realidad no emiten una solicitud HTTP \"real\" a su aplicación. En cambio, toda la solicitud de red se simula internamente.</p>\n    <p>En lugar de devolver una <code>Illuminate\\Http\\Response</code>instancia, los métodos de solicitud de prueba devuelven una instancia de <code>Illuminate\\Testing\\TestResponse</code>, que proporciona una <span class=\"link\">variedad de afirmaciones útiles</span> que le permiten inspeccionar las respuestas de su aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>Feature</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Testing<span class=\"token punctuation\">\\</span>RefreshDatabase</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Testing<span class=\"token punctuation\">\\</span>WithoutMiddleware</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>TestCase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TestCase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * A basic test example.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test_a_basic_request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>En general, cada una de sus pruebas solo debe realizar una solicitud a su aplicación. Puede ocurrir un comportamiento inesperado si se ejecutan varias solicitudes dentro de un único método de prueba.</p>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p> Para mayor comodidad, el middleware CSRF se desactiva automáticamente al ejecutar pruebas.</p></p></div>\n    </blockquote>\n    \n    <h3 id=\"customizing-request-headers\"><span class=\"link\">Personalización de encabezados de solicitud</span></h3>\n    <p>Puede utilizar el <code>withHeaders</code>método para personalizar los encabezados de la solicitud antes de enviarla a la aplicación. Este método le permite agregar cualquier encabezado personalizado que le gustaría a la solicitud:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>Feature</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>TestCase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TestCase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * A basic functional test example.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test_interacting_with_headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'X-Header'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Value'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Sally'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h3 id=\"cookies\"><span class=\"link\">Galletas</span></h3>\n    <p>Puede utilizar los métodos <code>withCookie</code>o <code>withCookies</code>para establecer los valores de las cookies antes de realizar una solicitud. El <code>withCookie</code>método acepta un nombre y un valor de cookie como sus dos argumentos, mientras que el <code>withCookies</code>método acepta una matriz de pares de nombre / valor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>Feature</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>TestCase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TestCase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test_interacting_with_cookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withCookie</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'color'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'blue'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withCookies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'color'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'blue'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h3 id=\"session-and-authentication\"><span class=\"link\">Sesión / Autenticación</span></h3>\n    <p>Laravel proporciona varios ayudantes para interactuar con la sesión durante las pruebas HTTP. Primero, puede configurar los datos de la sesión en una matriz dada usando el <code>withSession</code>método. Esto es útil para cargar la sesión con datos antes de enviar una solicitud a su aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>Feature</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>TestCase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TestCase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test_interacting_with_the_session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'banned'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>La sesión de Laravel se usa generalmente para mantener el estado del usuario actualmente autenticado. Por lo tanto, el <code>actingAs</code>método auxiliar proporciona una forma sencilla de autenticar a un usuario determinado como usuario actual. Por ejemplo, podemos usar una <span class=\"link\">fábrica de modelos</span> para generar y autenticar a un usuario:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>Feature</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Models<span class=\"token punctuation\">\\</span>User</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>TestCase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TestCase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test_an_action_that_requires_authentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">actingAs</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span>\n                         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'banned'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>También puede especificar qué guardia se debe usar para autenticar al usuario dado pasando el nombre de la guardia como segundo argumento del <code>actingAs</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">actingAs</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'web'</span><span class=\"token punctuation\">)</span></code></pre>\n    \n    <h3 id=\"debugging-responses\"><span class=\"link\">Respuestas de depuración</span></h3>\n    <p>Después de hacer una solicitud de prueba para su aplicación, el <code>dump</code>, <code>dumpHeaders</code>y <code>dumpSession</code>métodos se pueden utilizar para examinar y depurar los contenidos de respuesta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>Feature</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Testing<span class=\"token punctuation\">\\</span>RefreshDatabase</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Testing<span class=\"token punctuation\">\\</span>WithoutMiddleware</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>TestCase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TestCase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * A basic test example.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test_basic_test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dumpHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dumpSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h2 id=\"testing-json-apis\"><span class=\"link\">Prueba de API JSON</span></h2>\n    <p>Laravel también proporciona varios ayudantes para probar las API JSON y sus respuestas. Por ejemplo, el <code>json</code>, <code>getJson</code>, <code>postJson</code>, <code>putJson</code>, <code>patchJson</code>, <code>deleteJson</code>, y <code>optionsJson</code>métodos se pueden utilizar para emitir solicitudes JSON con diversos verbos HTTP. También puede pasar fácilmente datos y encabezados a estos métodos. Para comenzar, escribamos una prueba para realizar una <code>POST</code>solicitud <code>/api/user</code>y afirmar que se devolvieron los datos JSON esperados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>Feature</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>TestCase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TestCase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * A basic functional test example.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test_making_an_api_request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">postJson</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/api/user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Sally'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$response</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n                <span class=\"token single-quoted-string string\">'created'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Además, se puede acceder a los datos de respuesta JSON como variables de matriz en la respuesta, lo que le permite inspeccionar los valores individuales devueltos dentro de una respuesta JSON:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$response</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'created'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <blockquote>\n        <div class=\"mb-10 max-w-2xl mx-auto px-4 py-8 shadow-lg lg:flex lg:items-center callout\"><div class=\"w-20 h-20 mb-6 flex items-center justify-center flex-shrink-0 bg-purple-600 lg:mb-0\"><img src=\"/img/callouts/lightbulb.min.svg\" class=\"opacity-75\"></div><p class=\"mb-0 lg:ml-6\"><p>El <code>assertJson</code>método convierte la respuesta en una matriz y se utiliza <code>PHPUnit::assertArraySubset</code>para verificar que la matriz dada existe dentro de la respuesta JSON devuelta por la aplicación. Por lo tanto, si hay otras propiedades en la respuesta JSON, esta prueba se aprobará siempre que el fragmento dado esté presente.</p></p></div>\n    </blockquote>\n    \n    <h4 id=\"verifying-exact-match\"><span class=\"link\">Afirmar coincidencias JSON exactas</span></h4>\n    <p>Como se mencionó anteriormente, el <code>assertJson</code>método puede usarse para afirmar que existe un fragmento de JSON dentro de la respuesta JSON. Si desea verificar que una matriz dada <strong>coincide exactamente con</strong> el JSON devuelto por su aplicación, debe usar el <code>assertExactJson</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>Feature</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>TestCase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TestCase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * A basic functional test example.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test_asserting_an_exact_json_match</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'/user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Sally'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$response</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertExactJson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n                <span class=\"token single-quoted-string string\">'created'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h4 id=\"verifying-json-paths\"><span class=\"link\">Afirmación en rutas JSON</span></h4>\n    <p>Si desea verificar que la respuesta JSON contiene los datos dados en una ruta específica, debe usar el <code>assertJsonPath</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>Feature</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>TestCase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TestCase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * A basic functional test example.\n     *\n     * @return void\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test_asserting_a_json_paths_value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'/user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Sally'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$response</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">201</span><span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJsonPath</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'team.owner.name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Darian'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    \n    <h3 id=\"fluent-json-testing\"><span class=\"link\">Pruebas JSON fluidas</span></h3>\n    <p>Laravel también ofrece una manera hermosa de probar con fluidez las respuestas JSON de su aplicación. Para comenzar, pase un cierre al <code>assertJson</code>método. Este cierre se invocará con una instancia de la <code>Illuminate\\Testing\\Fluent\\AssertableJson</code>cual se puede usar para hacer afirmaciones contra el JSON que fue devuelto por su aplicación. El <code>where</code>método puede usarse para hacer afirmaciones contra un atributo particular del JSON, mientras que el <code>missing</code>método puede usarse para afirmar que falta un atributo particular del JSON:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Testing<span class=\"token punctuation\">\\</span>Fluent<span class=\"token punctuation\">\\</span>AssertableJson</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * A basic functional test example.\n *\n * @return void\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test_fluent_json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'/users/1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$response</span>\n        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJson</span><span class=\"token punctuation\">(</span>fn <span class=\"token punctuation\">(</span>AssertableJson <span class=\"token variable\">$json</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span>\n            <span class=\"token variable\">$json</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Victoria Faith'</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">missing</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'password'</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">etc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <h4>Entendiendo el <code>etc</code>método</h4>\n    <p>En el ejemplo anterior, es posible que haya notado que invocamos el <code>etc</code>método al final de nuestra cadena de aserción. Este método informa a Laravel que puede haber otros atributos presentes en el objeto JSON. Si <code>etc</code>no se usa el método, la prueba fallará si existen otros atributos contra los que no hizo afirmaciones en el objeto JSON.</p>\n    <p>La intención detrás de este comportamiento es protegerlo de exponer involuntariamente información confidencial en sus respuestas JSON al obligarlo a hacer explícitamente una afirmación contra el atributo o permitir explícitamente atributos adicionales a través del <code>etc</code>método.</p>\n    \n    <h4 id=\"asserting-against-json-collections\"><span class=\"link\">Afirmar contra las colecciones JSON</span></h4>\n    <p>A menudo, su ruta devolverá una respuesta JSON que contiene varios elementos, como varios usuarios:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>En estas situaciones, podemos usar el <code>has</code>método del objeto JSON fluido para hacer afirmaciones contra los usuarios incluidos en la respuesta. Por ejemplo, afirmemos que la respuesta JSON contiene tres usuarios. A continuación, haremos algunas afirmaciones sobre el primer usuario de la colección que utiliza el <code>first</code>método. El <code>first</code>método acepta un cierre que recibe otra cadena JSON declarable que podemos usar para hacer afirmaciones sobre el primer objeto de la colección JSON:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJson</span><span class=\"token punctuation\">(</span>fn <span class=\"token punctuation\">(</span>AssertableJson <span class=\"token variable\">$json</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token variable\">$json</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n             <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span>fn <span class=\"token punctuation\">(</span><span class=\"token variable\">$json</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token variable\">$json</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                     <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Victoria Faith'</span><span class=\"token punctuation\">)</span>\n                     <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">missing</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'password'</span><span class=\"token punctuation\">)</span>\n                     <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">etc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"scoping-json-collection-assertions\"><span class=\"link\">Aserciones de colección JSON de alcance</span></h4>\n    <p>A veces, las rutas de su aplicación devolverán colecciones JSON a las que se les asignan claves con nombre:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'meta'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token single-quoted-string string\">'users'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> User<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n    <p>Al probar estas rutas, puede usar el <code>has</code>método para hacer valer contra el número de elementos de la colección. Además, puede utilizar el <code>has</code>método para definir el alcance de una cadena de afirmaciones:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJson</span><span class=\"token punctuation\">(</span>fn <span class=\"token punctuation\">(</span>AssertableJson <span class=\"token variable\">$json</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token variable\">$json</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'meta'</span><span class=\"token punctuation\">)</span>\n             <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n             <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users.0'</span><span class=\"token punctuation\">,</span> fn <span class=\"token punctuation\">(</span><span class=\"token variable\">$json</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token variable\">$json</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                     <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Victoria Faith'</span><span class=\"token punctuation\">)</span>\n                     <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">missing</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'password'</span><span class=\"token punctuation\">)</span>\n                     <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">etc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Sin embargo, en lugar de realizar dos llamadas separadas al <code>has</code>método para hacer valer contra la <code>users</code>colección, puede realizar una sola llamada que proporciona un cierre como tercer parámetro. Al hacerlo, el cierre se invocará automáticamente y se aplicará al primer elemento de la colección:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span>\n    <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJson</span><span class=\"token punctuation\">(</span>fn <span class=\"token punctuation\">(</span>AssertableJson <span class=\"token variable\">$json</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span>\n        <span class=\"token variable\">$json</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'meta'</span><span class=\"token punctuation\">)</span>\n             <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'users'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> fn <span class=\"token punctuation\">(</span><span class=\"token variable\">$json</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span>\n                <span class=\"token variable\">$json</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                     <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Victoria Faith'</span><span class=\"token punctuation\">)</span>\n                     <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">missing</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'password'</span><span class=\"token punctuation\">)</span>\n                     <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">etc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"asserting-json-types\"><span class=\"link\">Afirmar tipos de JSON</span></h4>\n    <p>Es posible que solo desee afirmar que las propiedades de la respuesta JSON son de un tipo determinado. La <code>Illuminate\\Testing\\Fluent\\AssertableJson</code>clase proporciona los métodos <code>whereType</code>y <code>whereAllType</code>para hacer precisamente eso:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJson</span><span class=\"token punctuation\">(</span>fn <span class=\"token punctuation\">(</span>AssertableJson <span class=\"token variable\">$json</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token variable\">$json</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereType</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'integer'</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereAllType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'users.0.name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'string'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token single-quoted-string string\">'meta'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'array'</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede especificar varios tipos utilizando el <code>|</code>carácter o pasando una matriz de tipos como segundo parámetro del <code>whereType</code>método. La aserción tendrá éxito si el valor de respuesta es cualquiera de los tipos enumerados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJson</span><span class=\"token punctuation\">(</span>fn <span class=\"token punctuation\">(</span>AssertableJson <span class=\"token variable\">$json</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span>\n    <span class=\"token variable\">$json</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereType</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'string|null'</span><span class=\"token punctuation\">)</span>\n         <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">whereType</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'string'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'integer'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>whereType</code>y <code>whereAllType</code>métodos reconocen los siguientes tipos: <code>string</code>, <code>integer</code>, <code>double</code>, <code>boolean</code>, <code>array</code>, y <code>null</code>.</p>\n    \n    <h2 id=\"testing-file-uploads\"><span class=\"link\">Prueba de cargas de archivos</span></h2>\n    <p>La <code>Illuminate\\Http\\UploadedFile</code>clase proporciona un <code>fake</code>método que se puede utilizar para generar archivos o imágenes ficticios para realizar pruebas. Esto, combinado con el método de la <code>Storage</code>fachada <code>fake</code>, simplifica enormemente la prueba de carga de archivos. Por ejemplo, puede combinar estas dos funciones para probar fácilmente un formulario de carga de avatar:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>Feature</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Testing<span class=\"token punctuation\">\\</span>RefreshDatabase</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Foundation<span class=\"token punctuation\">\\</span>Testing<span class=\"token punctuation\">\\</span>WithoutMiddleware</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Http<span class=\"token punctuation\">\\</span>UploadedFile</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Support<span class=\"token punctuation\">\\</span>Facades<span class=\"token punctuation\">\\</span>Storage</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>TestCase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TestCase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test_avatars_can_be_uploaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Storage<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'avatars'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> UploadedFile<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'avatar.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$response</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/avatar'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token single-quoted-string string\">'avatar'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Storage<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">disk</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'avatars'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertExists</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">hashName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>Si desea afirmar que un archivo determinado no existe, puede utilizar el <code>assertMissing</code>método proporcionado por la <code>Storage</code>fachada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Storage<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'avatars'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\nStorage<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">disk</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'avatars'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertMissing</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'missing.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"fake-file-customization\"><span class=\"link\">Personalización de archivos falsos</span></h4>\n    <p>Al crear archivos utilizando el <code>fake</code>método proporcionado por la <code>UploadedFile</code>clase, puede especificar el ancho, alto y tamaño de la imagen (en kilobytes) para probar mejor las reglas de validación de su aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">UploadedFile<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">image</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'avatar.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$width</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$height</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Además de crear imágenes, puede crear archivos de cualquier otro tipo utilizando el <code>create</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">UploadedFile<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'document.pdf'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$sizeInKilobytes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si es necesario, puede pasar un <code>$mimeType</code>argumento al método para definir explícitamente el tipo MIME que debe devolver el archivo:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">UploadedFile<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">fake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'document.pdf'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$sizeInKilobytes</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'application/pdf'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"testing-views\"><span class=\"link\">Prueba de vistas</span></h2>\n    <p>Laravel también te permite renderizar una vista sin realizar una solicitud HTTP simulada a la aplicación. Para lograr esto, puede llamar al <code>view</code>método dentro de su prueba. El <code>view</code>método acepta el nombre de la vista y una matriz opcional de datos. El método devuelve una instancia de <code>Illuminate\\Testing\\TestView</code>, que ofrece varios métodos para hacer afirmaciones de manera conveniente sobre el contenido de la vista:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>Feature</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token package\">Tests<span class=\"token punctuation\">\\</span>TestCase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TestCase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test_a_welcome_view_can_be_rendered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$view</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'welcome'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$view</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSee</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n    <p>La <code>TestView</code>clase proporciona los siguientes métodos de aserción: <code>assertSee</code>, <code>assertSeeInOrder</code>, <code>assertSeeText</code>, <code>assertSeeTextInOrder</code>, <code>assertDontSee</code>, y <code>assertDontSeeText</code>.</p>\n    <p>Si es necesario, puede obtener el contenido de la vista renderizada sin procesar al convertir la <code>TestView</code>instancia en una cadena:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$contents</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'welcome'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"sharing-errors\"><span class=\"link\">Compartiendo errores</span></h4>\n    <p>Algunas vistas pueden depender de errores compartidos en la <span class=\"link\">bolsa de errores global proporcionada por Laravel</span> . Para hidratar la bolsa de error con mensajes de error, puede utilizar el <code>withViewErrors</code>método:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$view</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">withViewErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'Please provide a valid name.'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">view</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'form'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$view</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSee</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Please provide a valid name.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"rendering-blade-and-components\"><span class=\"link\">Renderizado de cuchillas y componentes</span></h3>\n    <p>Si es necesario, puede utilizar el <code>blade</code>método para evaluar y renderizar una cadena <span class=\"link\">Blade sin</span> procesar . Al igual que el <code>view</code>método, el <code>blade</code>método devuelve una instancia de <code>Illuminate\\Testing\\TestView</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$view</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">blade</span><span class=\"token punctuation\">(</span>\n    <span class=\"token single-quoted-string string\">'&lt;x-component :name=\"$name\" /&gt;'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$view</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSee</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Puede utilizar el <code>component</code>método para evaluar y renderizar un <span class=\"link\">componente Blade</span> . Al igual que el <code>view</code>método, el <code>component</code>método devuelve una instancia de <code>Illuminate\\Testing\\TestView</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$view</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span>Profile<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$view</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSee</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h2 id=\"available-assertions\"><span class=\"link\">Afirmaciones disponibles</span></h2>\n    \n    <h3 id=\"response-assertions\"><span class=\"link\">Afirmaciones de respuesta</span></h3>\n    <p>La <code>Illuminate\\Testing\\TestResponse</code>clase de Laravel proporciona una variedad de métodos de afirmación personalizados que puede utilizar al probar su aplicación. Estas afirmaciones pueden ser accedidos en la respuesta que se devuelve por los <code>json</code>, <code>get</code>, <code>post</code>, <code>put</code>, y <code>delete</code>métodos de ensayo:</p>\n    <style>\n    .collection-method-list > p {\n        column-count: 2; -moz-column-count: 2; -webkit-column-count: 2;\n        column-gap: 2em; -moz-column-gap: 2em; -webkit-column-gap: 2em;\n    }\n\n    .collection-method-list a {\n        display: block;\n    }\n</style>\n    <div class=\"collection-method-list\">\n        <p><span class=\"link\">afirmarCookie</span>\n            <span class=\"link\">asertCookieExpired</span>\n            <span class=\"link\">asertCookieNotExpired</span>\n            <span class=\"link\">aseverarCookieMissing</span>\n            <span class=\"link\">aseverarCreado</span>\n            <span class=\"link\">AsertDontSee</span>\n            <span class=\"link\">asertDontSeeText</span>\n            <span class=\"link\">asertDownload</span>\n            <span class=\"link\">asertExactJson</span>\n            <span class=\"link\">aseverar Prohibido</span>\n            <span class=\"link\">asertHeader</span>\n            <span class=\"link\">assertHeaderMissing</span>\n            <span class=\"link\">asertJson</span>\n            <span class=\"link\">asertJsonCount</span>\n            <span class=\"link\">asertJsonFragment</span>\n            <span class=\"link\">asertJsonMissing</span>\n            <span class=\"link\">asertJsonMissingExact</span>\n            <span class=\"link\">asertJsonMissingValidationErrors</span>\n            <span class=\"link\">asertJsonPath</span>\n            <span class=\"link\">asertJsonStructure</span>\n            <span class=\"link\">asertJsonValidationErrors</span>\n            <span class=\"link\">asertLocation</span>\n            <span class=\"link\">assertNoContent</span>\n            <span class=\"link\">asertNotFound</span>\n            <span class=\"link\">aseverarOk</span>\n            <span class=\"link\">assertPlainCookie</span>\n            <span class=\"link\">assertRedirect</span>\n            <span class=\"link\">asertRedirectToSignedRoute</span>\n            <span class=\"link\">afirmarVer</span>\n            <span class=\"link\">asertSeeInOrder</span>\n            <span class=\"link\">asertSeeText</span>\n            <span class=\"link\">asertSeeTextInOrder</span>\n            <span class=\"link\">asertSessionHas</span>\n            <span class=\"link\">asertSessionHasInput</span>\n            <span class=\"link\">asertSessionHasAll</span>\n            <span class=\"link\">asertSessionHasErrors</span>\n            <span class=\"link\">asertSessionHasErrorsIn</span>\n            <span class=\"link\">asertSessionHasNoErrors</span>\n            <span class=\"link\">asertSessionDoesntHaveErrors</span>\n            <span class=\"link\">asertSessionMissing</span>\n            <span class=\"link\">asertStatus</span>\n            <span class=\"link\">aseverar con éxito</span>\n            <span class=\"link\">afirmar no autorizado</span>\n            <span class=\"link\">asertValid</span>\n            <span class=\"link\">aseverar</span>\n            <span class=\"link\">asertViewHas</span>\n            <span class=\"link\">asertViewHasAll</span>\n            <span class=\"link\">AsertViewIs</span>\n            <span class=\"link\">assertViewMissing</span></p>\n    </div>\n    \n    <h4 id=\"assert-cookie\"><span class=\"link\">afirmarCookie</span></h4>\n    <p>Afirma que la respuesta contiene la cookie dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertCookie</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$cookieName</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-cookie-expired\"><span class=\"link\">asertCookieExpired</span></h4>\n    <p>Afirma que la respuesta contiene la cookie dada y está vencida:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertCookieExpired</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$cookieName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-cookie-not-expired\"><span class=\"link\">asertCookieNotExpired</span></h4>\n    <p>Afirma que la respuesta contiene la cookie dada y que no ha caducado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertCookieNotExpired</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$cookieName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-cookie-missing\"><span class=\"link\">aseverarCookieMissing</span></h4>\n    <p>Afirme que la respuesta no contiene la cookie dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertCookieMissing</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$cookieName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-created\"><span class=\"link\">aseverarCreado</span></h4>\n    <p>Afirme que la respuesta tiene un código de estado HTTP 201:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertCreated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-dont-see\"><span class=\"link\">AsertDontSee</span></h4>\n    <p>Afirme que la cadena dada no está contenida en la respuesta devuelta por la aplicación. Esta afirmación escapará automáticamente de la cadena dada a menos que pase un segundo argumento de <code>false</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertDontSee</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$escaped</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-dont-see-text\"><span class=\"link\">asertDontSeeText</span></h4>\n    <p>Afirme que la cadena dada no está contenida en el texto de respuesta. Esta aserción escapará automáticamente de la cadena dada a menos que pase un segundo argumento de <code>false</code>. Este método pasará el contenido de la respuesta a la <code>strip_tags</code>función PHP antes de hacer la afirmación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertDontSeeText</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$escaped</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-download\"><span class=\"link\">asertDownload</span></h4>\n    <p>Afirme que la respuesta es una \"descarga\". Normalmente, esto significa que la ruta invocada que devolvió la respuesta devolvió una <code>Response::download</code>respuesta <code>BinaryFileResponse</code>, o una <code>Storage::download</code>respuesta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertDownload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Si lo desea, puede afirmar que al archivo descargable se le asignó un nombre de archivo determinado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertDownload</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'image.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-exact-json\"><span class=\"link\">asertExactJson</span></h4>\n    <p>Afirma que la respuesta contiene una coincidencia exacta de los datos JSON dados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertExactJson</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-forbidden\"><span class=\"link\">aseverar Prohibido</span></h4>\n    <p>Confirme que la respuesta tiene un código de estado HTTP prohibido (403):</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertForbidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-header\"><span class=\"link\">asertHeader</span></h4>\n    <p>Afirma que el encabezado y el valor dados están presentes en la respuesta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertHeader</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$headerName</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-header-missing\"><span class=\"link\">assertHeaderMissing</span></h4>\n    <p>Afirma que el encabezado dado no está presente en la respuesta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertHeaderMissing</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$headerName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-json\"><span class=\"link\">asertJson</span></h4>\n    <p>Afirma que la respuesta contiene los datos JSON proporcionados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJson</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$strict</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>El <code>assertJson</code>método convierte la respuesta en una matriz y se utiliza <code>PHPUnit::assertArraySubset</code>para verificar que la matriz dada existe dentro de la respuesta JSON devuelta por la aplicación. Por lo tanto, si hay otras propiedades en la respuesta JSON, esta prueba se aprobará siempre que el fragmento dado esté presente.</p>\n    \n    <h4 id=\"assert-json-count\"><span class=\"link\">asertJsonCount</span></h4>\n    <p>Afirma que la respuesta JSON tiene una matriz con el número esperado de elementos en la clave dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJsonCount</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$count</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$key</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-json-fragment\"><span class=\"link\">asertJsonFragment</span></h4>\n    <p>Afirme que la respuesta contiene los datos JSON proporcionados en cualquier lugar de la respuesta:</p>\n    <pre class=\" language-php\"><code class=\" language-php\">Route<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'users'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">[</span>\n                <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor Otwell'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJsonFragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor Otwell'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-json-missing\"><span class=\"link\">asertJsonMissing</span></h4>\n    <p>Afirme que la respuesta no contiene los datos JSON proporcionados:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJsonMissing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-json-missing-exact\"><span class=\"link\">asertJsonMissingExact</span></h4>\n    <p>Afirme que la respuesta no contiene los datos JSON exactos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJsonMissingExact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-json-missing-validation-errors\"><span class=\"link\">asertJsonMissingValidationErrors</span></h4>\n    <p>Afirme que la respuesta no tiene errores de validación JSON para las claves dadas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJsonMissingValidationErrors</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$keys</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-json-path\"><span class=\"link\">asertJsonPath</span></h4>\n    <p>Afirma que la respuesta contiene los datos dados en la ruta especificada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJsonPath</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$path</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$expectedValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Por ejemplo, si la respuesta JSON devuelta por su aplicación contiene los siguientes datos:</p>\n    <pre class=\" language-js\"><code class=\" language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Steve Schoger\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Puede afirmar que la <code>name</code>propiedad del <code>user</code>objeto coincide con un valor dado así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJsonPath</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user.name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Steve Schoger'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-json-structure\"><span class=\"link\">asertJsonStructure</span></h4>\n    <p>Afirma que la respuesta tiene una estructura JSON determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJsonStructure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$structure</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Por ejemplo, si la respuesta JSON devuelta por su aplicación contiene los siguientes datos:</p>\n    <pre class=\" language-js\"><code class=\" language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Steve Schoger\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>Puede afirmar que la estructura JSON coincide con sus expectativas de la siguiente manera:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJsonStructure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>A veces, las respuestas JSON devueltas por su aplicación pueden contener matrices de objetos:</p>\n    <pre class=\" language-js\"><code class=\" language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Steve Schoger\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"location\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Earth\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Mary Schoger\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"location\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Earth\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n    <p>En esta situación, puede usar el <code>*</code>carácter para hacer valer contra la estructura de todos los objetos de la matriz:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJsonStructure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'user'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token single-quoted-string string\">'*'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>\n             <span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span>\n             <span class=\"token single-quoted-string string\">'age'</span><span class=\"token punctuation\">,</span>\n             <span class=\"token single-quoted-string string\">'location'</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-json-validation-errors\"><span class=\"link\">asertJsonValidationErrors</span></h4>\n    <p>Afirme que la respuesta tiene los errores de validación JSON dados para las claves dadas. Este método debe usarse al realizar afirmaciones contra respuestas en las que los errores de validación se devuelven como una estructura JSON en lugar de mostrarse en la sesión:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertJsonValidationErrors</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-location\"><span class=\"link\">asertLocation</span></h4>\n    <p>Afirma que la respuesta tiene el valor de URI dado en el <code>Location</code>encabezado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertLocation</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uri</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-no-content\"><span class=\"link\">assertNoContent</span></h4>\n    <p>Afirme que la respuesta tiene el código de estado HTTP proporcionado y no tiene contenido:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertNoContent</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$status</span> <span class=\"token operator\">=</span> <span class=\"token number\">204</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-not-found\"><span class=\"link\">asertNotFound</span></h4>\n    <p>Confirme que la respuesta tiene un código de estado HTTP no encontrado (404):</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertNotFound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-ok\"><span class=\"link\">aseverarOk</span></h4>\n    <p>Afirma que la respuesta tiene un código de estado HTTP 200:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertOk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-plain-cookie\"><span class=\"link\">assertPlainCookie</span></h4>\n    <p>Afirme que la respuesta contiene la cookie no cifrada dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertPlainCookie</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$cookieName</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-redirect\"><span class=\"link\">assertRedirect</span></h4>\n    <p>Afirma que la respuesta es una redirección al URI dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertRedirect</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uri</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-redirect-to-signed-route\"><span class=\"link\">asertRedirectToSignedRoute</span></h4>\n    <p>Afirme que la respuesta es una redirección a la ruta firmada dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertRedirectToSignedRoute</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$parameters</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-see\"><span class=\"link\">afirmarVer</span></h4>\n    <p>Afirma que la cadena dada está contenida en la respuesta. Esta afirmación escapará automáticamente de la cadena dada a menos que pase un segundo argumento de <code>false</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSee</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$escaped</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-see-in-order\"><span class=\"link\">asertSeeInOrder</span></h4>\n    <p>Afirme que las cadenas dadas están contenidas en orden dentro de la respuesta. Esta afirmación escapará automáticamente de las cadenas dadas a menos que pase un segundo argumento de <code>false</code>:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSeeInOrder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$values</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$escaped</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-see-text\"><span class=\"link\">asertSeeText</span></h4>\n    <p>Afirme que la cadena dada está contenida en el texto de respuesta. Esta aserción escapará automáticamente de la cadena dada a menos que pase un segundo argumento de <code>false</code>. El contenido de la respuesta se pasará a la <code>strip_tags</code>función PHP antes de que se haga la aserción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSeeText</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$escaped</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-see-text-in-order\"><span class=\"link\">asertSeeTextInOrder</span></h4>\n    <p>Afirme que las cadenas dadas están contenidas en orden dentro del texto de respuesta. Esta afirmación escapará automáticamente de las cadenas dadas a menos que pase un segundo argumento de <code>false</code>. El contenido de la respuesta se pasará a la <code>strip_tags</code>función PHP antes de que se haga la aserción:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSeeTextInOrder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$values</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$escaped</span> <span class=\"token operator\">=</span> <span class=\"token boolean constant\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-session-has\"><span class=\"link\">asertSessionHas</span></h4>\n    <p>Afirmar que la sesión contiene el dato dado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSessionHas</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-session-has-input\"><span class=\"link\">asertSessionHasInput</span></h4>\n    <p>Afirme que la sesión tiene un valor dado en la <span class=\"link\">matriz de entrada flasheada</span> :</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSessionHasInput</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-session-has-all\"><span class=\"link\">asertSessionHasAll</span></h4>\n    <p>Afirme que la sesión contiene una matriz determinada de pares clave / valor:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSessionHasAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Por ejemplo, si la sesión de su aplicación contiene claves <code>name</code>y <code>status</code>, puede afirmar que ambas existen y tienen los valores especificados así:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSessionHasAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor Otwell'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'status'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'active'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-session-has-errors\"><span class=\"link\">asertSessionHasErrors</span></h4>\n    <p>Afirme que la sesión contiene un error para el dado <code>$keys</code>. Si <code>$keys</code>es una matriz asociativa, afirme que la sesión contiene un mensaje de error específico (valor) para cada campo (clave). Este método debe usarse cuando se prueban rutas que muestran errores de validación en la sesión en lugar de devolverlos como una estructura JSON:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSessionHasErrors</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">array</span> <span class=\"token variable\">$keys</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$format</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$errorBag</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'default'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Por ejemplo, para afirmar que los campos <code>name</code>y <code>email</code>tienen mensajes de error de validación que se enviaron a la sesión, puede invocar el <code>assertSessionHasErrors</code>método de la siguiente manera:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSessionHasErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>O puede afirmar que un campo determinado tiene un mensaje de error de validación particular:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSessionHasErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'The given name was invalid.'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-session-has-errors-in\"><span class=\"link\">asertSessionHasErrorsIn</span></h4>\n    <p>Afirme que la sesión contiene un error para el dado <code>$keys</code>dentro de una <span class=\"link\">bolsa de errores</span> específica . Si <code>$keys</code>es una matriz asociativa, afirme que la sesión contiene un mensaje de error específico (valor) para cada campo (clave), dentro de la bolsa de errores:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSessionHasErrorsIn</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$errorBag</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$keys</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$format</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-session-has-no-errors\"><span class=\"link\">asertSessionHasNoErrors</span></h4>\n    <p>Afirme que la sesión no tiene errores de validación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSessionHasNoErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-session-doesnt-have-errors\"><span class=\"link\">asertSessionDoesntHaveErrors</span></h4>\n    <p>Afirme que la sesión no tiene errores de validación para las claves dadas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSessionDoesntHaveErrors</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$keys</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$format</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$errorBag</span> <span class=\"token operator\">=</span> <span class=\"token single-quoted-string string\">'default'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-session-missing\"><span class=\"link\">asertSessionMissing</span></h4>\n    <p>Afirmar que la sesión no contiene la clave dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSessionMissing</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-status\"><span class=\"link\">asertStatus</span></h4>\n    <p>Afirma que la respuesta tiene un código de estado HTTP determinado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertStatus</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-successful\"><span class=\"link\">aseverar con éxito</span></h4>\n    <p>Confirme que la respuesta tiene un código de estado HTTP correcto (&gt; = 200 y &lt;300):</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertSuccessful</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-unauthorized\"><span class=\"link\">afirmar no autorizado</span></h4>\n    <p>Afirme que la respuesta tiene un código de estado HTTP no autorizado (401):</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertUnauthorized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-valid\"><span class=\"link\">asertValid</span></h4>\n    <p>Afirme que la respuesta no tiene errores de validación para las claves dadas. Este método se puede utilizar para afirmar contra respuestas donde los errores de validación se devuelven como una estructura JSON o donde los errores de validación se han transmitido a la sesión:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token comment\">// Assert that no validation errors are present...</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertValid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Assert that the given keys do not have validation errors...</span>\n<span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertValid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-invalid\"><span class=\"link\">aseverar</span></h4>\n    <p>Afirme que la respuesta tiene errores de validación para las claves proporcionadas. Este método se puede utilizar para afirmar contra respuestas donde los errores de validación se devuelven como una estructura JSON o donde los errores de validación se han transmitido a la sesión:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertInvalid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>También puede afirmar que una clave determinada tiene un mensaje de error de validación particular. Al hacerlo, puede proporcionar el mensaje completo o solo una pequeña parte del mensaje:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertInvalid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'The name field is required.'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'valid email address'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-view-has\"><span class=\"link\">asertViewHas</span></h4>\n    <p>Afirmar que la vista de respuesta contiene un dato determinado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertViewHas</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Pasar un cierre como segundo argumento del <code>assertViewHas</code>método le permitirá inspeccionar y hacer afirmaciones contra una parte particular de los datos de la vista:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertViewHas</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'user'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>User <span class=\"token variable\">$user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$user</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">name</span> <span class=\"token operator\">===</span> <span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Además, se puede acceder a los datos de la vista como variables de matriz en la respuesta, lo que le permite inspeccionarlos cómodamente:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'Taylor'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$response</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-view-has-all\"><span class=\"link\">asertViewHasAll</span></h4>\n    <p>Afirme que la vista de respuesta tiene una lista de datos determinada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertViewHasAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span> <span class=\"token variable\">$data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>Este método puede usarse para afirmar que la vista simplemente contiene datos que coinciden con las claves dadas:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertViewHasAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'email'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    <p>O puede afirmar que los datos de la vista están presentes y tienen valores específicos:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertViewHasAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token single-quoted-string string\">'name'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'Taylor Otwell'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token single-quoted-string string\">'email'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token single-quoted-string string\">'taylor@example.com,'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-view-is\"><span class=\"link\">AsertViewIs</span></h4>\n    <p>Afirmar que la ruta devolvió la vista dada:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertViewIs</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-view-missing\"><span class=\"link\">assertViewMissing</span></h4>\n    <p>Afirme que la clave de datos proporcionada no se puso a disposición de la vista devuelta en la respuesta de la aplicación:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$response</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertViewMissing</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h3 id=\"authentication-assertions\"><span class=\"link\">Afirmaciones de autenticación</span></h3>\n    <p>Laravel también proporciona una variedad de afirmaciones relacionadas con la autenticación que puede utilizar dentro de las pruebas de funciones de su aplicación. Tenga en cuenta que estos métodos se invocan en la propia clase de prueba y no en la <code>Illuminate\\Testing\\TestResponse</code>instancia devuelta por métodos como <code>get</code>y <code>post</code>.</p>\n    \n    <h4 id=\"assert-authenticated\"><span class=\"link\">AsertAuthenticated</span></h4>\n    <p>Afirmar que un usuario está autenticado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertAuthenticated</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$guard</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-guest\"><span class=\"link\">AsertGuest</span></h4>\n    <p>Afirmar que un usuario no está autenticado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertGuest</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$guard</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n    \n    <h4 id=\"assert-authenticated-as\"><span class=\"link\">assertAuthenticatedAs</span></h4>\n    <p>Afirmar que un usuario específico está autenticado:</p>\n    <pre class=\" language-php\"><code class=\" language-php\"><span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">assertAuthenticatedAs</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$user</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$guard</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</div>"
    },
    {
      "title": "",
      "subtitle": "",
      "contenido": ""
    }
]